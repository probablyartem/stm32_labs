
lab2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f18  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080040c8  080040c8  000050c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042bc  080042bc  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  080042bc  080042bc  000052bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042c4  080042c4  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c4  080042c4  000052c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042c8  080042c8  000052c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080042cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          000002e4  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009abb  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f2e  00000000  00000000  0000fb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  00011a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066c  00000000  00000000  00012300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022305  00000000  00000000  0001296c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b3c3  00000000  00000000  00034c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfce2  00000000  00000000  00040034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010fd16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002610  00000000  00000000  0010fd5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0011236c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080040b0 	.word	0x080040b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080040b0 	.word	0x080040b0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b35      	ldr	r3, [pc, #212]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a34      	ldr	r2, [pc, #208]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b32      	ldr	r3, [pc, #200]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a2d      	ldr	r2, [pc, #180]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a26      	ldr	r2, [pc, #152]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0308 	and.w	r3, r3, #8
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a1f      	ldr	r2, [pc, #124]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000658:	4812      	ldr	r0, [pc, #72]	@ (80006a4 <MX_GPIO_Init+0xf4>)
 800065a:	f001 fa35 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800065e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <MX_GPIO_Init+0xf8>)
 8000674:	f001 f864 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000678:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <MX_GPIO_Init+0xf4>)
 8000692:	f001 f855 	bl	8001740 <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	@ 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	40020800 	.word	0x40020800

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f000 fe30 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f816 	bl	80006e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  TrafficLight_Init();
 80006b8:	f000 f994 	bl	80009e4 <TrafficLight_Init>
  APP_UART_Init();
 80006bc:	f000 fb94 	bl	8000de8 <APP_UART_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f7ff ff76 	bl	80005b0 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      Button_Update();
 80006c4:	f000 f9ec 	bl	8000aa0 <Button_Update>
      TrafficLight_Update();
 80006c8:	f000 fa42 	bl	8000b50 <TrafficLight_Update>
      if (APP_UART_IsInterruptMode()) {
 80006cc:	f000 fbf8 	bl	8000ec0 <APP_UART_IsInterruptMode>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <main+0x30>
          // interrupt-mode: вычитываем буфер
          APP_UART_ProcessInterrupt();
 80006d6:	f000 fc51 	bl	8000f7c <APP_UART_ProcessInterrupt>
 80006da:	e7f3      	b.n	80006c4 <main+0x18>
      } else {
          // polling-mode
          APP_UART_ProcessPolling();
 80006dc:	f000 fbfc 	bl	8000ed8 <APP_UART_ProcessPolling>
      Button_Update();
 80006e0:	e7f0      	b.n	80006c4 <main+0x18>
	...

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	@ 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	@ 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f85c 	bl	80037b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b2b      	ldr	r3, [pc, #172]	@ (80007bc <SystemClock_Config+0xd8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000710:	4a2a      	ldr	r2, [pc, #168]	@ (80007bc <SystemClock_Config+0xd8>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	@ 0x40
 8000718:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <SystemClock_Config+0xd8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <SystemClock_Config+0xdc>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a24      	ldr	r2, [pc, #144]	@ (80007c0 <SystemClock_Config+0xdc>)
 800072e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <SystemClock_Config+0xdc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000740:	2301      	movs	r3, #1
 8000742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000754:	230f      	movs	r3, #15
 8000756:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000758:	23d8      	movs	r3, #216	@ 0xd8
 800075a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fa17 	bl	8001b9c <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000774:	f000 f826 	bl	80007c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000778:	f001 f9c0 	bl	8001afc <HAL_PWREx_EnableOverDrive>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000782:	f000 f81f 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000792:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2105      	movs	r1, #5
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fc71 	bl	800208c <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007b0:	f000 f808 	bl	80007c4 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	@ 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	4a0f      	ldr	r2, [pc, #60]	@ (800081c <HAL_MspInit+0x4c>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_MspInit+0x4c>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	4a08      	ldr	r2, [pc, #32]	@ (800081c <HAL_MspInit+0x4c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	@ 0x40
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_MspInit+0x4c>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <NMI_Handler+0x4>

08000828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <MemManage_Handler+0x4>

08000838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <UsageFault_Handler+0x4>

08000848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000876:	f000 fd9f 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000884:	4802      	ldr	r0, [pc, #8]	@ (8000890 <USART6_IRQHandler+0x10>)
 8000886:	f001 ff79 	bl	800277c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200001bc 	.word	0x200001bc

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f002 ff7c 	bl	80037c0 <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20030000 	.word	0x20030000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	20000088 	.word	0x20000088
 80008fc:	20000350 	.word	0x20000350

08000900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <LED_OffAll>:

/* --------------------------------------------
 * Функции управления светодиодами
 * --------------------------------------------*/
static void LED_OffAll(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800092e:	4808      	ldr	r0, [pc, #32]	@ (8000950 <LED_OffAll+0x2c>)
 8000930:	f001 f8ca 	bl	8001ac8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_YELLOW_PORT, LED_YELLOW_PIN, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <LED_OffAll+0x2c>)
 800093c:	f001 f8c4 	bl	8001ac8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000946:	4802      	ldr	r0, [pc, #8]	@ (8000950 <LED_OffAll+0x2c>)
 8000948:	f001 f8be 	bl	8001ac8 <HAL_GPIO_WritePin>
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40020c00 	.word	0x40020c00

08000954 <LED_SetRed>:

static void LED_SetRed(uint8_t onOff)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, onOff ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	bf14      	ite	ne
 8000964:	2301      	movne	r3, #1
 8000966:	2300      	moveq	r3, #0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <LED_SetRed+0x2c>)
 8000972:	f001 f8a9 	bl	8001ac8 <HAL_GPIO_WritePin>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40020c00 	.word	0x40020c00

08000984 <LED_SetYellow>:

static void LED_SetYellow(uint8_t onOff)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_YELLOW_PORT, LED_YELLOW_PIN, onOff ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	bf14      	ite	ne
 8000994:	2301      	movne	r3, #1
 8000996:	2300      	moveq	r3, #0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009a0:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <LED_SetYellow+0x2c>)
 80009a2:	f001 f891 	bl	8001ac8 <HAL_GPIO_WritePin>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <LED_SetGreen>:

static void LED_SetGreen(uint8_t onOff)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, onOff ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bf14      	ite	ne
 80009c4:	2301      	movne	r3, #1
 80009c6:	2300      	moveq	r3, #0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <LED_SetGreen+0x2c>)
 80009d2:	f001 f879 	bl	8001ac8 <HAL_GPIO_WritePin>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40020c00 	.word	0x40020c00

080009e4 <TrafficLight_Init>:

/* --------------------------------------------
 * Инициализация светофора (GPIO + нач. сост)
 * --------------------------------------------*/
void TrafficLight_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    // По идее, GPIO тактирование уже включено в MX_GPIO_Init()
    // Установим изначальное состояние
    currentState = STATE_RED;
 80009e8:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <TrafficLight_Init+0x88>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
    timeStateEnteredMs = HAL_GetTick();
 80009ee:	f000 fcf7 	bl	80013e0 <HAL_GetTick>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a70 <TrafficLight_Init+0x8c>)
 80009f6:	6013      	str	r3, [r2, #0]
    trafficMode = 1;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <TrafficLight_Init+0x90>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
    redTimeoutSec = 4;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000a78 <TrafficLight_Init+0x94>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	601a      	str	r2, [r3, #0]
    currentRedDurationMs = redTimeoutSec * 1000;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <TrafficLight_Init+0x94>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a0c:	fb02 f303 	mul.w	r3, r2, r3
 8000a10:	4a1a      	ldr	r2, [pc, #104]	@ (8000a7c <TrafficLight_Init+0x98>)
 8000a12:	6013      	str	r3, [r2, #0]
    nextRedShortened = 0;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <TrafficLight_Init+0x9c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]

    LED_OffAll();
 8000a1a:	f7ff ff83 	bl	8000924 <LED_OffAll>
    LED_SetRed(1);
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f7ff ff98 	bl	8000954 <LED_SetRed>
    greenBlinkLedOn = 0;
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <TrafficLight_Init+0xa0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
    greenBlinkLastTglMs = 0;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <TrafficLight_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]

    // Инициализация кнопки (считаем, что уже сконфигурирована как input pull-up)
    buttonWasPressed = 0;
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <TrafficLight_Init+0xa8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
    lastRawState = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 8000a36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a3a:	4815      	ldr	r0, [pc, #84]	@ (8000a90 <TrafficLight_Init+0xac>)
 8000a3c:	f001 f82c 	bl	8001a98 <HAL_GPIO_ReadPin>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <TrafficLight_Init+0xb0>)
 8000a46:	701a      	strb	r2, [r3, #0]
    stableState = (lastRawState == GPIO_PIN_RESET) ? 1 : 0;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <TrafficLight_Init+0xb0>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <TrafficLight_Init+0xb4>)
 8000a5a:	701a      	strb	r2, [r3, #0]
    buttonLastChangeTick = HAL_GetTick();
 8000a5c:	f000 fcc0 	bl	80013e0 <HAL_GetTick>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a0e      	ldr	r2, [pc, #56]	@ (8000a9c <TrafficLight_Init+0xb8>)
 8000a64:	6013      	str	r3, [r2, #0]
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000008c 	.word	0x2000008c
 8000a70:	20000090 	.word	0x20000090
 8000a74:	20000004 	.word	0x20000004
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	2000000c 	.word	0x2000000c
 8000a80:	20000094 	.word	0x20000094
 8000a84:	20000095 	.word	0x20000095
 8000a88:	20000098 	.word	0x20000098
 8000a8c:	2000009c 	.word	0x2000009c
 8000a90:	40020800 	.word	0x40020800
 8000a94:	20000010 	.word	0x20000010
 8000a98:	2000009d 	.word	0x2000009d
 8000a9c:	200000a0 	.word	0x200000a0

08000aa0 <Button_Update>:

/* --------------------------------------------
 * Дребезг кнопки: вызывать в main() часто
 * --------------------------------------------*/
void Button_Update(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
    GPIO_PinState raw = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 8000aa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aaa:	481a      	ldr	r0, [pc, #104]	@ (8000b14 <Button_Update+0x74>)
 8000aac:	f000 fff4 	bl	8001a98 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
    if (raw != lastRawState) {
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <Button_Update+0x78>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d008      	beq.n	8000ad0 <Button_Update+0x30>
        lastRawState = raw;
 8000abe:	4a16      	ldr	r2, [pc, #88]	@ (8000b18 <Button_Update+0x78>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	7013      	strb	r3, [r2, #0]
        buttonLastChangeTick = HAL_GetTick();
 8000ac4:	f000 fc8c 	bl	80013e0 <HAL_GetTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4a14      	ldr	r2, [pc, #80]	@ (8000b1c <Button_Update+0x7c>)
 8000acc:	6013      	str	r3, [r2, #0]
                    buttonWasPressed = 1;
                }
            }
        }
    }
}
 8000ace:	e01d      	b.n	8000b0c <Button_Update+0x6c>
        if ((HAL_GetTick() - buttonLastChangeTick) >= DEBOUNCE_DELAY_MS) {
 8000ad0:	f000 fc86 	bl	80013e0 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <Button_Update+0x7c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	2b31      	cmp	r3, #49	@ 0x31
 8000ade:	d915      	bls.n	8000b0c <Button_Update+0x6c>
            uint8_t newStable = (raw == GPIO_PIN_RESET) ? 1 : 0;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2301      	moveq	r3, #1
 8000ae8:	2300      	movne	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	71bb      	strb	r3, [r7, #6]
            if (newStable != stableState) {
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <Button_Update+0x80>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	79ba      	ldrb	r2, [r7, #6]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d009      	beq.n	8000b0c <Button_Update+0x6c>
                stableState = newStable;
 8000af8:	4a09      	ldr	r2, [pc, #36]	@ (8000b20 <Button_Update+0x80>)
 8000afa:	79bb      	ldrb	r3, [r7, #6]
 8000afc:	7013      	strb	r3, [r2, #0]
                if (stableState == 1) {
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <Button_Update+0x80>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d102      	bne.n	8000b0c <Button_Update+0x6c>
                    buttonWasPressed = 1;
 8000b06:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <Button_Update+0x84>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40020800 	.word	0x40020800
 8000b18:	20000010 	.word	0x20000010
 8000b1c:	200000a0 	.word	0x200000a0
 8000b20:	2000009d 	.word	0x2000009d
 8000b24:	2000009c 	.word	0x2000009c

08000b28 <Button_WasPressed>:

// Однократно вернуть флаг нажатия
static uint8_t Button_WasPressed(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
    if (buttonWasPressed) {
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <Button_WasPressed+0x24>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d004      	beq.n	8000b3e <Button_WasPressed+0x16>
        buttonWasPressed = 0;
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <Button_WasPressed+0x24>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
        return 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <Button_WasPressed+0x18>
    }
    return 0;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	2000009c 	.word	0x2000009c

08000b50 <TrafficLight_Update>:

/* --------------------------------------------
 * Главный цикл светофора: вызываем в main
 * --------------------------------------------*/
void TrafficLight_Update(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 8000b56:	f000 fc43 	bl	80013e0 <HAL_GetTick>
 8000b5a:	6078      	str	r0, [r7, #4]
    uint32_t elapsed = now - timeStateEnteredMs;
 8000b5c:	4b5f      	ldr	r3, [pc, #380]	@ (8000cdc <TrafficLight_Update+0x18c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	603b      	str	r3, [r7, #0]

    // Проверяем кнопку, только если mode=1
    if (trafficMode == 1) {
 8000b66:	4b5e      	ldr	r3, [pc, #376]	@ (8000ce0 <TrafficLight_Update+0x190>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d124      	bne.n	8000bb8 <TrafficLight_Update+0x68>
        if (Button_WasPressed()) {
 8000b6e:	f7ff ffdb 	bl	8000b28 <Button_WasPressed>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d01f      	beq.n	8000bb8 <TrafficLight_Update+0x68>
            // Логика: если мы в красном
            if (currentState == STATE_RED) {
 8000b78:	4b5a      	ldr	r3, [pc, #360]	@ (8000ce4 <TrafficLight_Update+0x194>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d118      	bne.n	8000bb2 <TrafficLight_Update+0x62>
                // Если уже горим больше 1/4
                if (elapsed > (currentRedDurationMs / 4)) {
 8000b80:	4b59      	ldr	r3, [pc, #356]	@ (8000ce8 <TrafficLight_Update+0x198>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d90e      	bls.n	8000baa <TrafficLight_Update+0x5a>
                    // Сразу переходим на зелёный
                    nextRedShortened = 0;
 8000b8c:	4b57      	ldr	r3, [pc, #348]	@ (8000cec <TrafficLight_Update+0x19c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
                    LED_OffAll();
 8000b92:	f7ff fec7 	bl	8000924 <LED_OffAll>
                    LED_SetGreen(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff ff0c 	bl	80009b4 <LED_SetGreen>
                    currentState = STATE_GREEN;
 8000b9c:	4b51      	ldr	r3, [pc, #324]	@ (8000ce4 <TrafficLight_Update+0x194>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
                    timeStateEnteredMs = now;
 8000ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8000cdc <TrafficLight_Update+0x18c>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e006      	b.n	8000bb8 <TrafficLight_Update+0x68>
                } else {
                    // Запоминаем, что следующий красный будет короче
                    nextRedShortened = 1;
 8000baa:	4b50      	ldr	r3, [pc, #320]	@ (8000cec <TrafficLight_Update+0x19c>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	e002      	b.n	8000bb8 <TrafficLight_Update+0x68>
                }
            }
            // Если нажато в зелёном/мигающем/жёлтом —
            // тогда просто nextRedShortened = 1
            else {
                nextRedShortened = 1;
 8000bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8000cec <TrafficLight_Update+0x19c>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // Переходы по таймерам
    switch (currentState) {
 8000bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ce4 <TrafficLight_Update+0x194>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	f200 8080 	bhi.w	8000cc2 <TrafficLight_Update+0x172>
 8000bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc8 <TrafficLight_Update+0x78>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000bd9 	.word	0x08000bd9
 8000bcc:	08000bfb 	.word	0x08000bfb
 8000bd0:	08000c21 	.word	0x08000c21
 8000bd4:	08000c71 	.word	0x08000c71
    case STATE_RED:
        if (elapsed >= currentRedDurationMs) {
 8000bd8:	4b43      	ldr	r3, [pc, #268]	@ (8000ce8 <TrafficLight_Update+0x198>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	683a      	ldr	r2, [r7, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d371      	bcc.n	8000cc6 <TrafficLight_Update+0x176>
            // в зелёный
            LED_OffAll();
 8000be2:	f7ff fe9f 	bl	8000924 <LED_OffAll>
            LED_SetGreen(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fee4 	bl	80009b4 <LED_SetGreen>
            currentState = STATE_GREEN;
 8000bec:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce4 <TrafficLight_Update+0x194>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
            timeStateEnteredMs = now;
 8000bf2:	4a3a      	ldr	r2, [pc, #232]	@ (8000cdc <TrafficLight_Update+0x18c>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6013      	str	r3, [r2, #0]
        }
        break;
 8000bf8:	e065      	b.n	8000cc6 <TrafficLight_Update+0x176>
    case STATE_GREEN:
        // пусть зелёный горит 1 сек (просто пример)
        if (elapsed >= 1000) {
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c00:	d363      	bcc.n	8000cca <TrafficLight_Update+0x17a>
            // переходим на мигающий
            LED_OffAll();
 8000c02:	f7ff fe8f 	bl	8000924 <LED_OffAll>
            currentState = STATE_GREEN_BLINK;
 8000c06:	4b37      	ldr	r3, [pc, #220]	@ (8000ce4 <TrafficLight_Update+0x194>)
 8000c08:	2202      	movs	r2, #2
 8000c0a:	701a      	strb	r2, [r3, #0]
            timeStateEnteredMs = now;
 8000c0c:	4a33      	ldr	r2, [pc, #204]	@ (8000cdc <TrafficLight_Update+0x18c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
            greenBlinkLedOn = 0;
 8000c12:	4b37      	ldr	r3, [pc, #220]	@ (8000cf0 <TrafficLight_Update+0x1a0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
            greenBlinkLastTglMs = now;
 8000c18:	4a36      	ldr	r2, [pc, #216]	@ (8000cf4 <TrafficLight_Update+0x1a4>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
        }
        break;
 8000c1e:	e054      	b.n	8000cca <TrafficLight_Update+0x17a>
    case STATE_GREEN_BLINK:
        // мигаем 1 сек (частота 250мс), потом желтый
        if ((now - greenBlinkLastTglMs) >= 250) {
 8000c20:	4b34      	ldr	r3, [pc, #208]	@ (8000cf4 <TrafficLight_Update+0x1a4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2bf9      	cmp	r3, #249	@ 0xf9
 8000c2a:	d911      	bls.n	8000c50 <TrafficLight_Update+0x100>
            greenBlinkLastTglMs = now;
 8000c2c:	4a31      	ldr	r2, [pc, #196]	@ (8000cf4 <TrafficLight_Update+0x1a4>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
            greenBlinkLedOn = !greenBlinkLedOn;
 8000c32:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf0 <TrafficLight_Update+0x1a0>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bf0c      	ite	eq
 8000c3a:	2301      	moveq	r3, #1
 8000c3c:	2300      	movne	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf0 <TrafficLight_Update+0x1a0>)
 8000c44:	701a      	strb	r2, [r3, #0]
            LED_SetGreen(greenBlinkLedOn);
 8000c46:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf0 <TrafficLight_Update+0x1a0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff feb2 	bl	80009b4 <LED_SetGreen>
        }
        if (elapsed >= 1000) {
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c56:	d33a      	bcc.n	8000cce <TrafficLight_Update+0x17e>
            // желтый
            LED_OffAll();
 8000c58:	f7ff fe64 	bl	8000924 <LED_OffAll>
            LED_SetYellow(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f7ff fe91 	bl	8000984 <LED_SetYellow>
            currentState = STATE_YELLOW;
 8000c62:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <TrafficLight_Update+0x194>)
 8000c64:	2203      	movs	r2, #3
 8000c66:	701a      	strb	r2, [r3, #0]
            timeStateEnteredMs = now;
 8000c68:	4a1c      	ldr	r2, [pc, #112]	@ (8000cdc <TrafficLight_Update+0x18c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
        }
        break;
 8000c6e:	e02e      	b.n	8000cce <TrafficLight_Update+0x17e>
    case STATE_YELLOW:
        // пусть желтый горит 1 сек
        if (elapsed >= 1000) {
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c76:	d32c      	bcc.n	8000cd2 <TrafficLight_Update+0x182>
            // снова красный
            LED_OffAll();
 8000c78:	f7ff fe54 	bl	8000924 <LED_OffAll>
            currentState = STATE_RED;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <TrafficLight_Update+0x194>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
            timeStateEnteredMs = now;
 8000c82:	4a16      	ldr	r2, [pc, #88]	@ (8000cdc <TrafficLight_Update+0x18c>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6013      	str	r3, [r2, #0]
            // Проверим флаг укороченного красного
            if (nextRedShortened) {
 8000c88:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <TrafficLight_Update+0x19c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00c      	beq.n	8000caa <TrafficLight_Update+0x15a>
                currentRedDurationMs = (redTimeoutSec * 1000) / 4;
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <TrafficLight_Update+0x1a8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <TrafficLight_Update+0x198>)
 8000ca0:	6013      	str	r3, [r2, #0]
                nextRedShortened = 0;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <TrafficLight_Update+0x19c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e007      	b.n	8000cba <TrafficLight_Update+0x16a>
            } else {
                currentRedDurationMs = redTimeoutSec * 1000;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <TrafficLight_Update+0x1a8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cb2:	fb02 f303 	mul.w	r3, r2, r3
 8000cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <TrafficLight_Update+0x198>)
 8000cb8:	6013      	str	r3, [r2, #0]
            }
            LED_SetRed(1);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff fe4a 	bl	8000954 <LED_SetRed>
        }
        break;
 8000cc0:	e007      	b.n	8000cd2 <TrafficLight_Update+0x182>
    default:
        // fallback
        break;
 8000cc2:	bf00      	nop
 8000cc4:	e006      	b.n	8000cd4 <TrafficLight_Update+0x184>
        break;
 8000cc6:	bf00      	nop
 8000cc8:	e004      	b.n	8000cd4 <TrafficLight_Update+0x184>
        break;
 8000cca:	bf00      	nop
 8000ccc:	e002      	b.n	8000cd4 <TrafficLight_Update+0x184>
        break;
 8000cce:	bf00      	nop
 8000cd0:	e000      	b.n	8000cd4 <TrafficLight_Update+0x184>
        break;
 8000cd2:	bf00      	nop
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000090 	.word	0x20000090
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	2000008c 	.word	0x2000008c
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	20000094 	.word	0x20000094
 8000cf0:	20000095 	.word	0x20000095
 8000cf4:	20000098 	.word	0x20000098
 8000cf8:	20000008 	.word	0x20000008

08000cfc <TrafficLight_SetMode>:

/* --------------------------------------------
 * Настройка "mode 1"/"mode 2"
 * --------------------------------------------*/
void TrafficLight_SetMode(uint8_t mode)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
    // 1 или 2
    trafficMode = (mode == 2) ? 2 : 1;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d101      	bne.n	8000d10 <TrafficLight_SetMode+0x14>
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	e000      	b.n	8000d12 <TrafficLight_SetMode+0x16>
 8000d10:	2201      	movs	r2, #1
 8000d12:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <TrafficLight_SetMode+0x28>)
 8000d14:	701a      	strb	r2, [r3, #0]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000004 	.word	0x20000004

08000d28 <TrafficLight_GetMode>:

uint8_t TrafficLight_GetMode(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
    return trafficMode;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <TrafficLight_GetMode+0x14>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000004 	.word	0x20000004

08000d40 <TrafficLight_SetRedTimeoutSec>:

/* --------------------------------------------
 * Timeout (сколько секунд горит красный)
 * --------------------------------------------*/
void TrafficLight_SetRedTimeoutSec(uint32_t sec)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    if (sec < 1) sec = 1;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <TrafficLight_SetRedTimeoutSec+0x12>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	607b      	str	r3, [r7, #4]
    if (sec > 3600) sec = 3600; // например, ограничим
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8000d58:	d902      	bls.n	8000d60 <TrafficLight_SetRedTimeoutSec+0x20>
 8000d5a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8000d5e:	607b      	str	r3, [r7, #4]
    redTimeoutSec = sec;
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <TrafficLight_SetRedTimeoutSec+0x34>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
    // при следующем заходе в красный учтётся
    // (или мгновенно, если сейчас красный?)
    // Для простоты, пусть вступает в силу при следующем полном цикле.
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008

08000d78 <TrafficLight_GetRedTimeoutSec>:

uint32_t TrafficLight_GetRedTimeoutSec(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
    return redTimeoutSec;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <TrafficLight_GetRedTimeoutSec+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008

08000d90 <TrafficLight_GetStateString>:

/* --------------------------------------------
 * Строковое представление состояния
 * --------------------------------------------*/
const char* TrafficLight_GetStateString(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
    switch (currentState) {
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <TrafficLight_GetStateString+0x40>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d813      	bhi.n	8000dc4 <TrafficLight_GetStateString+0x34>
 8000d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8000da4 <TrafficLight_GetStateString+0x14>)
 8000d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	08000db5 	.word	0x08000db5
 8000da8:	08000db9 	.word	0x08000db9
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000dc1 	.word	0x08000dc1
    case STATE_RED:          return "red";
 8000db4:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <TrafficLight_GetStateString+0x44>)
 8000db6:	e006      	b.n	8000dc6 <TrafficLight_GetStateString+0x36>
    case STATE_GREEN:        return "green";
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <TrafficLight_GetStateString+0x48>)
 8000dba:	e004      	b.n	8000dc6 <TrafficLight_GetStateString+0x36>
    case STATE_GREEN_BLINK:  return "blinking green";
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <TrafficLight_GetStateString+0x4c>)
 8000dbe:	e002      	b.n	8000dc6 <TrafficLight_GetStateString+0x36>
    case STATE_YELLOW:       return "yellow";
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <TrafficLight_GetStateString+0x50>)
 8000dc2:	e000      	b.n	8000dc6 <TrafficLight_GetStateString+0x36>
    default:                 return "???";
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <TrafficLight_GetStateString+0x54>)
    }
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	2000008c 	.word	0x2000008c
 8000dd4:	080040c8 	.word	0x080040c8
 8000dd8:	080040cc 	.word	0x080040cc
 8000ddc:	080040d4 	.word	0x080040d4
 8000de0:	080040e4 	.word	0x080040e4
 8000de4:	080040ec 	.word	0x080040ec

08000de8 <APP_UART_Init>:

/* -----------------------------------
   ИНИЦИАЛИЗАЦИЯ UART (57600 8N1)
   -----------------------------------*/
void APP_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <APP_UART_Init+0x74>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	4a19      	ldr	r2, [pc, #100]	@ (8000e5c <APP_UART_Init+0x74>)
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <APP_UART_Init+0x74>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

    // Настраиваем huart2
    huart6.Instance = USART6;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <APP_UART_Init+0x78>)
 8000e0c:	4a15      	ldr	r2, [pc, #84]	@ (8000e64 <APP_UART_Init+0x7c>)
 8000e0e:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 57600;
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <APP_UART_Init+0x78>)
 8000e12:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000e16:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <APP_UART_Init+0x78>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <APP_UART_Init+0x78>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <APP_UART_Init+0x78>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <APP_UART_Init+0x78>)
 8000e2c:	220c      	movs	r2, #12
 8000e2e:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <APP_UART_Init+0x78>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <APP_UART_Init+0x78>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart6) != HAL_OK) {
 8000e3c:	4808      	ldr	r0, [pc, #32]	@ (8000e60 <APP_UART_Init+0x78>)
 8000e3e:	f001 fb05 	bl	800244c <HAL_UART_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <APP_UART_Init+0x64>
        // handle error
        while (1) { }
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <APP_UART_Init+0x60>
    }

    // По умолчанию в polling-режиме
    isInterruptMode = 0;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <APP_UART_Init+0x80>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	200000a4 	.word	0x200000a4
 8000e64:	40011400 	.word	0x40011400
 8000e68:	200000ec 	.word	0x200000ec

08000e6c <APP_UART_SetInterruptMode>:

/* -----------------------------------
   Включение/выключение interrupt-режима
   -----------------------------------*/
void APP_UART_SetInterruptMode(uint8_t onOff)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
    if (onOff) {
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00f      	beq.n	8000e9c <APP_UART_SetInterruptMode+0x30>
        // Включаем прерывания
        rxHead = rxTail = 0;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <APP_UART_SetInterruptMode+0x40>)
 8000e80:	460a      	mov	r2, r1
 8000e82:	801a      	strh	r2, [r3, #0]
 8000e84:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <APP_UART_SetInterruptMode+0x44>)
 8000e86:	460a      	mov	r2, r1
 8000e88:	801a      	strh	r2, [r3, #0]
        isInterruptMode = 1;
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <APP_UART_SetInterruptMode+0x48>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	701a      	strb	r2, [r3, #0]
        // Запускаем приём
        HAL_UART_Receive_IT(&huart6, &rxTempByte, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	4909      	ldr	r1, [pc, #36]	@ (8000eb8 <APP_UART_SetInterruptMode+0x4c>)
 8000e94:	4809      	ldr	r0, [pc, #36]	@ (8000ebc <APP_UART_SetInterruptMode+0x50>)
 8000e96:	f001 fc4b 	bl	8002730 <HAL_UART_Receive_IT>
        // Выключаем
        isInterruptMode = 0;
        // Можно отключить NVIC или просто игнорировать
        // Для простоты — просто перестаём вызывать Receive_IT
    }
}
 8000e9a:	e002      	b.n	8000ea2 <APP_UART_SetInterruptMode+0x36>
        isInterruptMode = 0;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <APP_UART_SetInterruptMode+0x48>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000172 	.word	0x20000172
 8000eb0:	20000170 	.word	0x20000170
 8000eb4:	200000ec 	.word	0x200000ec
 8000eb8:	20000174 	.word	0x20000174
 8000ebc:	200000a4 	.word	0x200000a4

08000ec0 <APP_UART_IsInterruptMode>:

uint8_t APP_UART_IsInterruptMode(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
    return isInterruptMode;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <APP_UART_IsInterruptMode+0x14>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200000ec 	.word	0x200000ec

08000ed8 <APP_UART_ProcessPolling>:
   Процесс в polling-режиме:
   - пытаемся считать 1 байт (timeout=0)
   - если есть байт, эхо + парсим
   -----------------------------------*/
void APP_UART_ProcessPolling(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
    if (!isInterruptMode) {
 8000ede:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <APP_UART_ProcessPolling+0x90>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d13c      	bne.n	8000f60 <APP_UART_ProcessPolling+0x88>
        uint8_t ch;
        if (HAL_UART_Receive(&huart6, &ch, 1, 0) == HAL_OK) {
 8000ee6:	1cf9      	adds	r1, r7, #3
 8000ee8:	2300      	movs	r3, #0
 8000eea:	2201      	movs	r2, #1
 8000eec:	481f      	ldr	r0, [pc, #124]	@ (8000f6c <APP_UART_ProcessPolling+0x94>)
 8000eee:	f001 fb88 	bl	8002602 <HAL_UART_Receive>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d133      	bne.n	8000f60 <APP_UART_ProcessPolling+0x88>
            // Эхо
            HAL_UART_Transmit(&huart6, &ch, 1, 10);
 8000ef8:	1cf9      	adds	r1, r7, #3
 8000efa:	230a      	movs	r3, #10
 8000efc:	2201      	movs	r2, #1
 8000efe:	481b      	ldr	r0, [pc, #108]	@ (8000f6c <APP_UART_ProcessPolling+0x94>)
 8000f00:	f001 faf4 	bl	80024ec <HAL_UART_Transmit>
            // Собираем в cmdBuf
            if (ch == '\r' || ch == '\n') {
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b0d      	cmp	r3, #13
 8000f08:	d002      	beq.n	8000f10 <APP_UART_ProcessPolling+0x38>
 8000f0a:	78fb      	ldrb	r3, [r7, #3]
 8000f0c:	2b0a      	cmp	r3, #10
 8000f0e:	d119      	bne.n	8000f44 <APP_UART_ProcessPolling+0x6c>
                cmdBuf[cmdIdx] = 0;
 8000f10:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <APP_UART_ProcessPolling+0x98>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <APP_UART_ProcessPolling+0x9c>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	5499      	strb	r1, [r3, r2]
                if (cmdIdx > 0) {
 8000f1c:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <APP_UART_ProcessPolling+0x98>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <APP_UART_ProcessPolling+0x52>
                    APP_UART_ProcessCommand(cmdBuf);
 8000f24:	4813      	ldr	r0, [pc, #76]	@ (8000f74 <APP_UART_ProcessPolling+0x9c>)
 8000f26:	f000 f8bd 	bl	80010a4 <APP_UART_ProcessCommand>
                }
                const char *nl = "\r\n";
 8000f2a:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <APP_UART_ProcessPolling+0xa0>)
 8000f2c:	607b      	str	r3, [r7, #4]
                HAL_UART_Transmit(&huart6, (uint8_t*)nl, 2, 10);
 8000f2e:	230a      	movs	r3, #10
 8000f30:	2202      	movs	r2, #2
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <APP_UART_ProcessPolling+0x94>)
 8000f36:	f001 fad9 	bl	80024ec <HAL_UART_Transmit>
                cmdIdx = 0;
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <APP_UART_ProcessPolling+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
            if (ch == '\r' || ch == '\n') {
 8000f40:	bf00      	nop
                    cmdBuf[cmdIdx++] = (char)ch;
                }
            }
        }
    }
}
 8000f42:	e00d      	b.n	8000f60 <APP_UART_ProcessPolling+0x88>
                if (cmdIdx < sizeof(cmdBuf)-1) {
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <APP_UART_ProcessPolling+0x98>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b3e      	cmp	r3, #62	@ 0x3e
 8000f4a:	d809      	bhi.n	8000f60 <APP_UART_ProcessPolling+0x88>
                    cmdBuf[cmdIdx++] = (char)ch;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <APP_UART_ProcessPolling+0x98>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	b2d1      	uxtb	r1, r2
 8000f54:	4a06      	ldr	r2, [pc, #24]	@ (8000f70 <APP_UART_ProcessPolling+0x98>)
 8000f56:	7011      	strb	r1, [r2, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	78f9      	ldrb	r1, [r7, #3]
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <APP_UART_ProcessPolling+0x9c>)
 8000f5e:	5499      	strb	r1, [r3, r2]
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000ec 	.word	0x200000ec
 8000f6c:	200000a4 	.word	0x200000a4
 8000f70:	200001b8 	.word	0x200001b8
 8000f74:	20000178 	.word	0x20000178
 8000f78:	080040f0 	.word	0x080040f0

08000f7c <APP_UART_ProcessInterrupt>:
   Обработка в interrupt-режиме:
   - выгребаем все байты из rxBuf
   - эхо + парсер
   -----------------------------------*/
void APP_UART_ProcessInterrupt(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
    if (isInterruptMode) {
 8000f82:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <APP_UART_ProcessInterrupt+0xb8>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d050      	beq.n	800102c <APP_UART_ProcessInterrupt+0xb0>
        while (rxTail != rxHead) {
 8000f8a:	e047      	b.n	800101c <APP_UART_ProcessInterrupt+0xa0>
            uint8_t ch = rxBuf[rxTail];
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <APP_UART_ProcessInterrupt+0xbc>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b29      	ldr	r3, [pc, #164]	@ (800103c <APP_UART_ProcessInterrupt+0xc0>)
 8000f96:	5c9b      	ldrb	r3, [r3, r2]
 8000f98:	70fb      	strb	r3, [r7, #3]
            rxTail = (rxTail + 1) % RX_BUFFER_SIZE;
 8000f9a:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <APP_UART_ProcessInterrupt+0xbc>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	425a      	negs	r2, r3
 8000fa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fa8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000fac:	bf58      	it	pl
 8000fae:	4253      	negpl	r3, r2
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <APP_UART_ProcessInterrupt+0xbc>)
 8000fb4:	801a      	strh	r2, [r3, #0]

            // Эхо
            HAL_UART_Transmit(&huart6, &ch, 1, 10);
 8000fb6:	1cf9      	adds	r1, r7, #3
 8000fb8:	230a      	movs	r3, #10
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4820      	ldr	r0, [pc, #128]	@ (8001040 <APP_UART_ProcessInterrupt+0xc4>)
 8000fbe:	f001 fa95 	bl	80024ec <HAL_UART_Transmit>

            if (ch == '\r' || ch == '\n') {
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	2b0d      	cmp	r3, #13
 8000fc6:	d002      	beq.n	8000fce <APP_UART_ProcessInterrupt+0x52>
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	2b0a      	cmp	r3, #10
 8000fcc:	d118      	bne.n	8001000 <APP_UART_ProcessInterrupt+0x84>
                cmdBuf[cmdIdx] = 0;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <APP_UART_ProcessInterrupt+0xc8>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <APP_UART_ProcessInterrupt+0xcc>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	5499      	strb	r1, [r3, r2]
                if (cmdIdx > 0) {
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <APP_UART_ProcessInterrupt+0xc8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <APP_UART_ProcessInterrupt+0x6c>
                    APP_UART_ProcessCommand(cmdBuf);
 8000fe2:	4819      	ldr	r0, [pc, #100]	@ (8001048 <APP_UART_ProcessInterrupt+0xcc>)
 8000fe4:	f000 f85e 	bl	80010a4 <APP_UART_ProcessCommand>
                }
                const char *nl = "\r\n";
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <APP_UART_ProcessInterrupt+0xd0>)
 8000fea:	607b      	str	r3, [r7, #4]
                HAL_UART_Transmit(&huart6, (uint8_t*)nl, 2, 10);
 8000fec:	230a      	movs	r3, #10
 8000fee:	2202      	movs	r2, #2
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4813      	ldr	r0, [pc, #76]	@ (8001040 <APP_UART_ProcessInterrupt+0xc4>)
 8000ff4:	f001 fa7a 	bl	80024ec <HAL_UART_Transmit>
                cmdIdx = 0;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <APP_UART_ProcessInterrupt+0xc8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
            if (ch == '\r' || ch == '\n') {
 8000ffe:	e00d      	b.n	800101c <APP_UART_ProcessInterrupt+0xa0>
            } else {
                if (cmdIdx < sizeof(cmdBuf)-1) {
 8001000:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <APP_UART_ProcessInterrupt+0xc8>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b3e      	cmp	r3, #62	@ 0x3e
 8001006:	d809      	bhi.n	800101c <APP_UART_ProcessInterrupt+0xa0>
                    cmdBuf[cmdIdx++] = (char)ch;
 8001008:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <APP_UART_ProcessInterrupt+0xc8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	b2d1      	uxtb	r1, r2
 8001010:	4a0c      	ldr	r2, [pc, #48]	@ (8001044 <APP_UART_ProcessInterrupt+0xc8>)
 8001012:	7011      	strb	r1, [r2, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	78f9      	ldrb	r1, [r7, #3]
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <APP_UART_ProcessInterrupt+0xcc>)
 800101a:	5499      	strb	r1, [r3, r2]
        while (rxTail != rxHead) {
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <APP_UART_ProcessInterrupt+0xbc>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <APP_UART_ProcessInterrupt+0xd4>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	b29b      	uxth	r3, r3
 8001028:	429a      	cmp	r2, r3
 800102a:	d1af      	bne.n	8000f8c <APP_UART_ProcessInterrupt+0x10>
                }
            }
        }
    }
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000ec 	.word	0x200000ec
 8001038:	20000172 	.word	0x20000172
 800103c:	200000f0 	.word	0x200000f0
 8001040:	200000a4 	.word	0x200000a4
 8001044:	200001b8 	.word	0x200001b8
 8001048:	20000178 	.word	0x20000178
 800104c:	080040f0 	.word	0x080040f0
 8001050:	20000170 	.word	0x20000170

08001054 <APP_UART_SendString>:

/* -----------------------------------
   Вспомогательные ф-ции для вывода
   -----------------------------------*/
void APP_UART_SendString(const char *s)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)s, strlen(s), 100);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff f8c7 	bl	80001f0 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	2364      	movs	r3, #100	@ 0x64
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4803      	ldr	r0, [pc, #12]	@ (8001078 <APP_UART_SendString+0x24>)
 800106c:	f001 fa3e 	bl	80024ec <HAL_UART_Transmit>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000a4 	.word	0x200000a4

0800107c <APP_UART_SendOK>:

void APP_UART_SendOK(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    APP_UART_SendString("OK\r\n");
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <APP_UART_SendOK+0x10>)
 8001082:	f7ff ffe7 	bl	8001054 <APP_UART_SendString>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	080040f4 	.word	0x080040f4

08001090 <APP_UART_SendUnknown>:

void APP_UART_SendUnknown(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
    APP_UART_SendString("unknown command\r\n");
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <APP_UART_SendUnknown+0x10>)
 8001096:	f7ff ffdd 	bl	8001054 <APP_UART_SendString>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	080040fc 	.word	0x080040fc

080010a4 <APP_UART_ProcessCommand>:
   set mode 1 / set mode 2
   set timeout X
   set interrupts on/off
   -----------------------------------*/
static void APP_UART_ProcessCommand(const char *cmd)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0ac      	sub	sp, #176	@ 0xb0
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	6078      	str	r0, [r7, #4]
    // Команда "?"
    if (strcmp(cmd, "?") == 0) {
 80010ac:	4954      	ldr	r1, [pc, #336]	@ (8001200 <APP_UART_ProcessCommand+0x15c>)
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff f8a6 	bl	8000200 <strcmp>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d12b      	bne.n	8001112 <APP_UART_ProcessCommand+0x6e>
        char buf[128];
        const char *stStr = TrafficLight_GetStateString();
 80010ba:	f7ff fe69 	bl	8000d90 <TrafficLight_GetStateString>
 80010be:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
        uint8_t mode = TrafficLight_GetMode();
 80010c2:	f7ff fe31 	bl	8000d28 <TrafficLight_GetMode>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        uint32_t tout = TrafficLight_GetRedTimeoutSec();
 80010cc:	f7ff fe54 	bl	8000d78 <TrafficLight_GetRedTimeoutSec>
 80010d0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
        char cIntr = (isInterruptMode ? 'I' : 'P');
 80010d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001204 <APP_UART_ProcessCommand+0x160>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <APP_UART_ProcessCommand+0x3c>
 80010dc:	2349      	movs	r3, #73	@ 0x49
 80010de:	e000      	b.n	80010e2 <APP_UART_ProcessCommand+0x3e>
 80010e0:	2350      	movs	r3, #80	@ 0x50
 80010e2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        // Пример: "Current: red, mode=1, timeout=4, I"
        sprintf(buf, "Current: %s, mode=%u, timeout=%lu, %c\r\n", stStr, mode, (unsigned long)tout, cIntr);
 80010e6:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80010ea:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80010ee:	f107 000c 	add.w	r0, r7, #12
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	4613      	mov	r3, r2
 80010fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001100:	4941      	ldr	r1, [pc, #260]	@ (8001208 <APP_UART_ProcessCommand+0x164>)
 8001102:	f002 fa9f 	bl	8003644 <siprintf>
        APP_UART_SendString(buf);
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ffa2 	bl	8001054 <APP_UART_SendString>
 8001110:	e072      	b.n	80011f8 <APP_UART_ProcessCommand+0x154>
        return;
    }

    // "set mode 1" / "set mode 2"
    if (strncmp(cmd, "set mode ", 9) == 0) {
 8001112:	2209      	movs	r2, #9
 8001114:	493d      	ldr	r1, [pc, #244]	@ (800120c <APP_UART_ProcessCommand+0x168>)
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f002 fb38 	bl	800378c <strncmp>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d11a      	bne.n	8001158 <APP_UART_ProcessCommand+0xb4>
        int m = atoi(&cmd[9]);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3309      	adds	r3, #9
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fa88 	bl	800363c <atoi>
 800112c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        if (m == 1 || m == 2) {
 8001130:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001134:	2b01      	cmp	r3, #1
 8001136:	d003      	beq.n	8001140 <APP_UART_ProcessCommand+0x9c>
 8001138:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800113c:	2b02      	cmp	r3, #2
 800113e:	d108      	bne.n	8001152 <APP_UART_ProcessCommand+0xae>
            TrafficLight_SetMode((uint8_t)m);
 8001140:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fdd8 	bl	8000cfc <TrafficLight_SetMode>
            APP_UART_SendOK();
 800114c:	f7ff ff96 	bl	800107c <APP_UART_SendOK>
        } else {
            APP_UART_SendUnknown();
        }
        return;
 8001150:	e052      	b.n	80011f8 <APP_UART_ProcessCommand+0x154>
            APP_UART_SendUnknown();
 8001152:	f7ff ff9d 	bl	8001090 <APP_UART_SendUnknown>
        return;
 8001156:	e04f      	b.n	80011f8 <APP_UART_ProcessCommand+0x154>
    }

    // "set timeout X"
    if (strncmp(cmd, "set timeout ", 12) == 0) {
 8001158:	220c      	movs	r2, #12
 800115a:	492d      	ldr	r1, [pc, #180]	@ (8001210 <APP_UART_ProcessCommand+0x16c>)
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f002 fb15 	bl	800378c <strncmp>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d11a      	bne.n	800119e <APP_UART_ProcessCommand+0xfa>
        int t = atoi(&cmd[12]);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	330c      	adds	r3, #12
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fa65 	bl	800363c <atoi>
 8001172:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
        if (t > 0 && t < 3600) {
 8001176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800117a:	2b00      	cmp	r3, #0
 800117c:	dd0c      	ble.n	8001198 <APP_UART_ProcessCommand+0xf4>
 800117e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001182:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001186:	da07      	bge.n	8001198 <APP_UART_ProcessCommand+0xf4>
            TrafficLight_SetRedTimeoutSec((uint32_t)t);
 8001188:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fdd7 	bl	8000d40 <TrafficLight_SetRedTimeoutSec>
            APP_UART_SendOK();
 8001192:	f7ff ff73 	bl	800107c <APP_UART_SendOK>
        } else {
            APP_UART_SendUnknown();
        }
        return;
 8001196:	e02f      	b.n	80011f8 <APP_UART_ProcessCommand+0x154>
            APP_UART_SendUnknown();
 8001198:	f7ff ff7a 	bl	8001090 <APP_UART_SendUnknown>
        return;
 800119c:	e02c      	b.n	80011f8 <APP_UART_ProcessCommand+0x154>
    }

    // "set interrupts on/off"
    if (strncmp(cmd, "set interrupts ", 15) == 0) {
 800119e:	220f      	movs	r2, #15
 80011a0:	491c      	ldr	r1, [pc, #112]	@ (8001214 <APP_UART_ProcessCommand+0x170>)
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f002 faf2 	bl	800378c <strncmp>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d122      	bne.n	80011f4 <APP_UART_ProcessCommand+0x150>
        const char *param = &cmd[15];
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	330f      	adds	r3, #15
 80011b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        if (strcmp(param, "on") == 0) {
 80011b6:	4918      	ldr	r1, [pc, #96]	@ (8001218 <APP_UART_ProcessCommand+0x174>)
 80011b8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80011bc:	f7ff f820 	bl	8000200 <strcmp>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d105      	bne.n	80011d2 <APP_UART_ProcessCommand+0x12e>
            APP_UART_SetInterruptMode(1);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff fe50 	bl	8000e6c <APP_UART_SetInterruptMode>
            APP_UART_SendOK();
 80011cc:	f7ff ff56 	bl	800107c <APP_UART_SendOK>
            return;
 80011d0:	e012      	b.n	80011f8 <APP_UART_ProcessCommand+0x154>
        } else if (strcmp(param, "off") == 0) {
 80011d2:	4912      	ldr	r1, [pc, #72]	@ (800121c <APP_UART_ProcessCommand+0x178>)
 80011d4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80011d8:	f7ff f812 	bl	8000200 <strcmp>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <APP_UART_ProcessCommand+0x14a>
            APP_UART_SetInterruptMode(0);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff fe42 	bl	8000e6c <APP_UART_SetInterruptMode>
            APP_UART_SendOK();
 80011e8:	f7ff ff48 	bl	800107c <APP_UART_SendOK>
            return;
 80011ec:	e004      	b.n	80011f8 <APP_UART_ProcessCommand+0x154>
        } else {
            APP_UART_SendUnknown();
 80011ee:	f7ff ff4f 	bl	8001090 <APP_UART_SendUnknown>
            return;
 80011f2:	e001      	b.n	80011f8 <APP_UART_ProcessCommand+0x154>
        }
    }

    // иначе
    APP_UART_SendUnknown();
 80011f4:	f7ff ff4c 	bl	8001090 <APP_UART_SendUnknown>
}
 80011f8:	37a8      	adds	r7, #168	@ 0xa8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	08004110 	.word	0x08004110
 8001204:	200000ec 	.word	0x200000ec
 8001208:	08004114 	.word	0x08004114
 800120c:	0800413c 	.word	0x0800413c
 8001210:	08004148 	.word	0x08004148
 8001214:	08004158 	.word	0x08004158
 8001218:	08004168 	.word	0x08004168
 800121c:	0800416c 	.word	0x0800416c

08001220 <HAL_UART_MspInit>:
  /* USER CODE END USART6_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1d      	ldr	r2, [pc, #116]	@ (80012b4 <HAL_UART_MspInit+0x94>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d133      	bne.n	80012aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <HAL_UART_MspInit+0x98>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	4a1b      	ldr	r2, [pc, #108]	@ (80012b8 <HAL_UART_MspInit+0x98>)
 800124c:	f043 0320 	orr.w	r3, r3, #32
 8001250:	6453      	str	r3, [r2, #68]	@ 0x44
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <HAL_UART_MspInit+0x98>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_UART_MspInit+0x98>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <HAL_UART_MspInit+0x98>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_UART_MspInit+0x98>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800127a:	23c0      	movs	r3, #192	@ 0xc0
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800128a:	2308      	movs	r3, #8
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4809      	ldr	r0, [pc, #36]	@ (80012bc <HAL_UART_MspInit+0x9c>)
 8001296:	f000 fa53 	bl	8001740 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2047      	movs	r0, #71	@ 0x47
 80012a0:	f000 f985 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80012a4:	2047      	movs	r0, #71	@ 0x47
 80012a6:	f000 f99e 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	@ 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40011400 	.word	0x40011400
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020800 	.word	0x40020800

080012c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012c4:	f7ff fb1c 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c8:	480c      	ldr	r0, [pc, #48]	@ (80012fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ca:	490d      	ldr	r1, [pc, #52]	@ (8001300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e0:	4c0a      	ldr	r4, [pc, #40]	@ (800130c <LoopFillZerobss+0x22>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f002 fa6d 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f2:	f7ff f9db 	bl	80006ac <main>
  bx  lr    
 80012f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001304:	080042cc 	.word	0x080042cc
  ldr r2, =_sbss
 8001308:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800130c:	20000350 	.word	0x20000350

08001310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC_IRQHandler>
	...

08001314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001318:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <HAL_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0d      	ldr	r2, [pc, #52]	@ (8001354 <HAL_Init+0x40>)
 800131e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <HAL_Init+0x40>)
 800132a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800132e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	@ (8001354 <HAL_Init+0x40>)
 8001336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800133a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 f92b 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001342:	200f      	movs	r0, #15
 8001344:	f000 f808 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff fa42 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023c00 	.word	0x40023c00

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f943 	bl	8001602 <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001394:	f000 f90b 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	@ (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000018 	.word	0x20000018
 80013b4:	20000014 	.word	0x20000014

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000018 	.word	0x20000018
 80013dc:	20000204 	.word	0x20000204

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000204 	.word	0x20000204

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	@ (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	@ (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	@ (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	@ (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	@ 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	@ 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff29 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff3e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff31 	bl	800145c <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff feda 	bl	80013e0 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d008      	beq.n	800164c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2280      	movs	r2, #128	@ 0x80
 800163e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e052      	b.n	80016f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0216 	bic.w	r2, r2, #22
 800165a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800166a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <HAL_DMA_Abort+0x62>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0208 	bic.w	r2, r2, #8
 800168a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169c:	e013      	b.n	80016c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800169e:	f7ff fe9f 	bl	80013e0 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d90c      	bls.n	80016c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2220      	movs	r2, #32
 80016b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2203      	movs	r2, #3
 80016b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e015      	b.n	80016f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e4      	bne.n	800169e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d8:	223f      	movs	r2, #63	@ 0x3f
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d004      	beq.n	8001718 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2280      	movs	r2, #128	@ 0x80
 8001712:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e00c      	b.n	8001732 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2205      	movs	r2, #5
 800171c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	@ 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e177      	b.n	8001a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800175c:	2201      	movs	r2, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	f040 8166 	bne.w	8001a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d005      	beq.n	8001792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178e:	2b02      	cmp	r3, #2
 8001790:	d130      	bne.n	80017f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c8:	2201      	movs	r2, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 0201 	and.w	r2, r3, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d017      	beq.n	8001830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d123      	bne.n	8001884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	69b9      	ldr	r1, [r7, #24]
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80c0 	beq.w	8001a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b66      	ldr	r3, [pc, #408]	@ (8001a64 <HAL_GPIO_Init+0x324>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	4a65      	ldr	r2, [pc, #404]	@ (8001a64 <HAL_GPIO_Init+0x324>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d6:	4b63      	ldr	r3, [pc, #396]	@ (8001a64 <HAL_GPIO_Init+0x324>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e2:	4a61      	ldr	r2, [pc, #388]	@ (8001a68 <HAL_GPIO_Init+0x328>)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a58      	ldr	r2, [pc, #352]	@ (8001a6c <HAL_GPIO_Init+0x32c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d037      	beq.n	800197e <HAL_GPIO_Init+0x23e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a57      	ldr	r2, [pc, #348]	@ (8001a70 <HAL_GPIO_Init+0x330>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d031      	beq.n	800197a <HAL_GPIO_Init+0x23a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a56      	ldr	r2, [pc, #344]	@ (8001a74 <HAL_GPIO_Init+0x334>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02b      	beq.n	8001976 <HAL_GPIO_Init+0x236>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a55      	ldr	r2, [pc, #340]	@ (8001a78 <HAL_GPIO_Init+0x338>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x232>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a54      	ldr	r2, [pc, #336]	@ (8001a7c <HAL_GPIO_Init+0x33c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x22e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a53      	ldr	r2, [pc, #332]	@ (8001a80 <HAL_GPIO_Init+0x340>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x22a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a52      	ldr	r2, [pc, #328]	@ (8001a84 <HAL_GPIO_Init+0x344>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x226>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a51      	ldr	r2, [pc, #324]	@ (8001a88 <HAL_GPIO_Init+0x348>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x222>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a50      	ldr	r2, [pc, #320]	@ (8001a8c <HAL_GPIO_Init+0x34c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x21e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4f      	ldr	r2, [pc, #316]	@ (8001a90 <HAL_GPIO_Init+0x350>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x21a>
 8001956:	2309      	movs	r3, #9
 8001958:	e012      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800195a:	230a      	movs	r3, #10
 800195c:	e010      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800195e:	2308      	movs	r3, #8
 8001960:	e00e      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001962:	2307      	movs	r3, #7
 8001964:	e00c      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001966:	2306      	movs	r3, #6
 8001968:	e00a      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800196e:	2304      	movs	r3, #4
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800197e:	2300      	movs	r3, #0
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001990:	4935      	ldr	r1, [pc, #212]	@ (8001a68 <HAL_GPIO_Init+0x328>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a94 <HAL_GPIO_Init+0x354>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c2:	4a34      	ldr	r2, [pc, #208]	@ (8001a94 <HAL_GPIO_Init+0x354>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c8:	4b32      	ldr	r3, [pc, #200]	@ (8001a94 <HAL_GPIO_Init+0x354>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ec:	4a29      	ldr	r2, [pc, #164]	@ (8001a94 <HAL_GPIO_Init+0x354>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f2:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <HAL_GPIO_Init+0x354>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a16:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <HAL_GPIO_Init+0x354>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <HAL_GPIO_Init+0x354>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a40:	4a14      	ldr	r2, [pc, #80]	@ (8001a94 <HAL_GPIO_Init+0x354>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	f67f ae84 	bls.w	800175c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021400 	.word	0x40021400
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40021c00 	.word	0x40021c00
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40022400 	.word	0x40022400
 8001a94:	40013c00 	.word	0x40013c00

08001a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e001      	b.n	8001aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad8:	787b      	ldrb	r3, [r7, #1]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ae4:	e003      	b.n	8001aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	619a      	str	r2, [r3, #24]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_PWREx_EnableOverDrive+0x90>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b8c <HAL_PWREx_EnableOverDrive+0x90>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <HAL_PWREx_EnableOverDrive+0x90>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_PWREx_EnableOverDrive+0x94>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b28:	f7ff fc5a 	bl	80013e0 <HAL_GetTick>
 8001b2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b2e:	e009      	b.n	8001b44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b30:	f7ff fc56 	bl	80013e0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b3e:	d901      	bls.n	8001b44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e01f      	b.n	8001b84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b50:	d1ee      	bne.n	8001b30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b58:	f7ff fc42 	bl	80013e0 <HAL_GetTick>
 8001b5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b5e:	e009      	b.n	8001b74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b60:	f7ff fc3e 	bl	80013e0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b6e:	d901      	bls.n	8001b74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e007      	b.n	8001b84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b74:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b80:	d1ee      	bne.n	8001b60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	420e0040 	.word	0x420e0040
 8001b94:	40007000 	.word	0x40007000
 8001b98:	420e0044 	.word	0x420e0044

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e267      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d075      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bba:	4b88      	ldr	r3, [pc, #544]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d00c      	beq.n	8001be0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc6:	4b85      	ldr	r3, [pc, #532]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d112      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd2:	4b82      	ldr	r3, [pc, #520]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bde:	d10b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	4b7e      	ldr	r3, [pc, #504]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d05b      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x108>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d157      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e242      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_OscConfig+0x74>
 8001c02:	4b76      	ldr	r3, [pc, #472]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a75      	ldr	r2, [pc, #468]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e01d      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b70      	ldr	r3, [pc, #448]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6f      	ldr	r2, [pc, #444]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b6d      	ldr	r3, [pc, #436]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6c      	ldr	r2, [pc, #432]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c34:	4b69      	ldr	r3, [pc, #420]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a68      	ldr	r2, [pc, #416]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b66      	ldr	r3, [pc, #408]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a65      	ldr	r2, [pc, #404]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fbc4 	bl	80013e0 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fbc0 	bl	80013e0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	@ 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e207      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0xc0>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fbb0 	bl	80013e0 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff fbac 	bl	80013e0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	@ 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1f3      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	4b51      	ldr	r3, [pc, #324]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0xe8>
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d063      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbe:	4b47      	ldr	r3, [pc, #284]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d11c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cca:	4b44      	ldr	r3, [pc, #272]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d116      	bne.n	8001d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	4b41      	ldr	r3, [pc, #260]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x152>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e1c7      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4b3b      	ldr	r3, [pc, #236]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4937      	ldr	r1, [pc, #220]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	e03a      	b.n	8001d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0c:	4b34      	ldr	r3, [pc, #208]	@ (8001de0 <HAL_RCC_OscConfig+0x244>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff fb65 	bl	80013e0 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fb61 	bl	80013e0 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e1a8      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4b28      	ldr	r3, [pc, #160]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4925      	ldr	r1, [pc, #148]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4e:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <HAL_RCC_OscConfig+0x244>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fb44 	bl	80013e0 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fb40 	bl	80013e0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e187      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d036      	beq.n	8001df4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d016      	beq.n	8001dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <HAL_RCC_OscConfig+0x248>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff fb24 	bl	80013e0 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fb20 	bl	80013e0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e167      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x200>
 8001dba:	e01b      	b.n	8001df4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_RCC_OscConfig+0x248>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fb0d 	bl	80013e0 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	e00e      	b.n	8001de8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff fb09 	bl	80013e0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d907      	bls.n	8001de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e150      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	42470000 	.word	0x42470000
 8001de4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de8:	4b88      	ldr	r3, [pc, #544]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ea      	bne.n	8001dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 8097 	beq.w	8001f30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e06:	4b81      	ldr	r3, [pc, #516]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10f      	bne.n	8001e32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	4b7d      	ldr	r3, [pc, #500]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e22:	4b7a      	ldr	r3, [pc, #488]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b77      	ldr	r3, [pc, #476]	@ (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b74      	ldr	r3, [pc, #464]	@ (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a73      	ldr	r2, [pc, #460]	@ (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fac9 	bl	80013e0 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff fac5 	bl	80013e0 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e10c      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b6a      	ldr	r3, [pc, #424]	@ (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x2ea>
 8001e78:	4b64      	ldr	r3, [pc, #400]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7c:	4a63      	ldr	r2, [pc, #396]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e84:	e01c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x324>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x30c>
 8001e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e92:	4a5e      	ldr	r2, [pc, #376]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e9a:	4b5c      	ldr	r3, [pc, #368]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9e:	4a5b      	ldr	r2, [pc, #364]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x324>
 8001ea8:	4b58      	ldr	r3, [pc, #352]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eac:	4a57      	ldr	r2, [pc, #348]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb4:	4b55      	ldr	r3, [pc, #340]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb8:	4a54      	ldr	r2, [pc, #336]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001eba:	f023 0304 	bic.w	r3, r3, #4
 8001ebe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d015      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff fa8a 	bl	80013e0 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fa86 	bl	80013e0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0cb      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee6:	4b49      	ldr	r3, [pc, #292]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0ee      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fa74 	bl	80013e0 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7ff fa70 	bl	80013e0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e0b5      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f12:	4b3e      	ldr	r3, [pc, #248]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ee      	bne.n	8001efc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f24:	4b39      	ldr	r3, [pc, #228]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	4a38      	ldr	r2, [pc, #224]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a1 	beq.w	800207c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f3a:	4b34      	ldr	r3, [pc, #208]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d05c      	beq.n	8002000 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d141      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <HAL_RCC_OscConfig+0x478>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fa44 	bl	80013e0 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff fa40 	bl	80013e0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e087      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	4b27      	ldr	r3, [pc, #156]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	019b      	lsls	r3, r3, #6
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	085b      	lsrs	r3, r3, #1
 8001f92:	3b01      	subs	r3, #1
 8001f94:	041b      	lsls	r3, r3, #16
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	491b      	ldr	r1, [pc, #108]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <HAL_RCC_OscConfig+0x478>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff fa19 	bl	80013e0 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff fa15 	bl	80013e0 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e05c      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x416>
 8001fd0:	e054      	b.n	800207c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <HAL_RCC_OscConfig+0x478>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fa02 	bl	80013e0 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7ff f9fe 	bl	80013e0 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e045      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_RCC_OscConfig+0x470>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x444>
 8001ffe:	e03d      	b.n	800207c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e038      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
 800200c:	40023800 	.word	0x40023800
 8002010:	40007000 	.word	0x40007000
 8002014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <HAL_RCC_OscConfig+0x4ec>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d028      	beq.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d121      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d11a      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800204e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002050:	4293      	cmp	r3, r2
 8002052:	d111      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	3b01      	subs	r3, #1
 8002062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800

0800208c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0cc      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4b68      	ldr	r3, [pc, #416]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d90c      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b65      	ldr	r3, [pc, #404]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b63      	ldr	r3, [pc, #396]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b8      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4b59      	ldr	r3, [pc, #356]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a58      	ldr	r2, [pc, #352]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f8:	4b53      	ldr	r3, [pc, #332]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a52      	ldr	r2, [pc, #328]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b50      	ldr	r3, [pc, #320]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	494d      	ldr	r1, [pc, #308]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d044      	beq.n	80021ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b47      	ldr	r3, [pc, #284]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d119      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e07f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d003      	beq.n	800214a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002146:	2b03      	cmp	r3, #3
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214a:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4b3b      	ldr	r3, [pc, #236]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e067      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4b37      	ldr	r3, [pc, #220]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4934      	ldr	r1, [pc, #208]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800217c:	f7ff f930 	bl	80013e0 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7ff f92c 	bl	80013e0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e04f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021ac:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d20c      	bcs.n	80021d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e032      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e0:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4916      	ldr	r1, [pc, #88]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021fe:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	490e      	ldr	r1, [pc, #56]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002212:	f000 f821 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002216:	4602      	mov	r2, r0
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	490a      	ldr	r1, [pc, #40]	@ (800224c <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <HAL_RCC_ClockConfig+0x1c8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff f890 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00
 8002248:	40023800 	.word	0x40023800
 800224c:	08004170 	.word	0x08004170
 8002250:	20000000 	.word	0x20000000
 8002254:	20000014 	.word	0x20000014

08002258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800225c:	b090      	sub	sp, #64	@ 0x40
 800225e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002270:	4b59      	ldr	r3, [pc, #356]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d00d      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x40>
 800227c:	2b08      	cmp	r3, #8
 800227e:	f200 80a1 	bhi.w	80023c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x34>
 8002286:	2b04      	cmp	r3, #4
 8002288:	d003      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0x3a>
 800228a:	e09b      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b53      	ldr	r3, [pc, #332]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x184>)
 800228e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002290:	e09b      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002292:	4b53      	ldr	r3, [pc, #332]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002294:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002296:	e098      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002298:	4b4f      	ldr	r3, [pc, #316]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a2:	4b4d      	ldr	r3, [pc, #308]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d028      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ae:	4b4a      	ldr	r3, [pc, #296]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	099b      	lsrs	r3, r3, #6
 80022b4:	2200      	movs	r2, #0
 80022b6:	623b      	str	r3, [r7, #32]
 80022b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022c0:	2100      	movs	r1, #0
 80022c2:	4b47      	ldr	r3, [pc, #284]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022c4:	fb03 f201 	mul.w	r2, r3, r1
 80022c8:	2300      	movs	r3, #0
 80022ca:	fb00 f303 	mul.w	r3, r0, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	4a43      	ldr	r2, [pc, #268]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022d2:	fba0 1202 	umull	r1, r2, r0, r2
 80022d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022d8:	460a      	mov	r2, r1
 80022da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80022dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022de:	4413      	add	r3, r2
 80022e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e4:	2200      	movs	r2, #0
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	61fa      	str	r2, [r7, #28]
 80022ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80022f2:	f7fd ffe5 	bl	80002c0 <__aeabi_uldivmod>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4613      	mov	r3, r2
 80022fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022fe:	e053      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002300:	4b35      	ldr	r3, [pc, #212]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	2200      	movs	r2, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	617a      	str	r2, [r7, #20]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002312:	f04f 0b00 	mov.w	fp, #0
 8002316:	4652      	mov	r2, sl
 8002318:	465b      	mov	r3, fp
 800231a:	f04f 0000 	mov.w	r0, #0
 800231e:	f04f 0100 	mov.w	r1, #0
 8002322:	0159      	lsls	r1, r3, #5
 8002324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002328:	0150      	lsls	r0, r2, #5
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	ebb2 080a 	subs.w	r8, r2, sl
 8002332:	eb63 090b 	sbc.w	r9, r3, fp
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002342:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002346:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800234a:	ebb2 0408 	subs.w	r4, r2, r8
 800234e:	eb63 0509 	sbc.w	r5, r3, r9
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	00eb      	lsls	r3, r5, #3
 800235c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002360:	00e2      	lsls	r2, r4, #3
 8002362:	4614      	mov	r4, r2
 8002364:	461d      	mov	r5, r3
 8002366:	eb14 030a 	adds.w	r3, r4, sl
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	eb45 030b 	adc.w	r3, r5, fp
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800237e:	4629      	mov	r1, r5
 8002380:	028b      	lsls	r3, r1, #10
 8002382:	4621      	mov	r1, r4
 8002384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002388:	4621      	mov	r1, r4
 800238a:	028a      	lsls	r2, r1, #10
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002392:	2200      	movs	r2, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	60fa      	str	r2, [r7, #12]
 8002398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800239c:	f7fd ff90 	bl	80002c0 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	3301      	adds	r3, #1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023c2:	e002      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x184>)
 80023c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3740      	adds	r7, #64	@ 0x40
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	00f42400 	.word	0x00f42400
 80023e0:	017d7840 	.word	0x017d7840

080023e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e8:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000

080023fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002400:	f7ff fff0 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0a9b      	lsrs	r3, r3, #10
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	@ (8002420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	08004180 	.word	0x08004180

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffdc 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0b5b      	lsrs	r3, r3, #13
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	@ (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	08004180 	.word	0x08004180

0800244c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e042      	b.n	80024e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fed4 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	@ 0x24
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800248e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fe5f 	bl	8003154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	@ 0x28
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b20      	cmp	r3, #32
 800250a:	d175      	bne.n	80025f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_UART_Transmit+0x2c>
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e06e      	b.n	80025fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2221      	movs	r2, #33	@ 0x21
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800252a:	f7fe ff59 	bl	80013e0 <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	88fa      	ldrh	r2, [r7, #6]
 800253a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002544:	d108      	bne.n	8002558 <HAL_UART_Transmit+0x6c>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d104      	bne.n	8002558 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e003      	b.n	8002560 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002560:	e02e      	b.n	80025c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2200      	movs	r2, #0
 800256a:	2180      	movs	r1, #128	@ 0x80
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fbc1 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e03a      	b.n	80025fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10b      	bne.n	80025a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002598:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	3302      	adds	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	e007      	b.n	80025b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	781a      	ldrb	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	3301      	adds	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1cb      	bne.n	8002562 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2200      	movs	r2, #0
 80025d2:	2140      	movs	r1, #64	@ 0x40
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fb8d 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e006      	b.n	80025fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e000      	b.n	80025fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80025f8:	2302      	movs	r3, #2
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b08a      	sub	sp, #40	@ 0x28
 8002606:	af02      	add	r7, sp, #8
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b20      	cmp	r3, #32
 8002620:	f040 8081 	bne.w	8002726 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_UART_Receive+0x2e>
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e079      	b.n	8002728 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2222      	movs	r2, #34	@ 0x22
 800263e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002648:	f7fe feca 	bl	80013e0 <HAL_GetTick>
 800264c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	88fa      	ldrh	r2, [r7, #6]
 8002652:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002662:	d108      	bne.n	8002676 <HAL_UART_Receive+0x74>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	e003      	b.n	800267e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800267e:	e047      	b.n	8002710 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2200      	movs	r2, #0
 8002688:	2120      	movs	r1, #32
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fb32 	bl	8002cf4 <UART_WaitOnFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e042      	b.n	8002728 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10c      	bne.n	80026c2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	3302      	adds	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	e01f      	b.n	8002702 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ca:	d007      	beq.n	80026dc <HAL_UART_Receive+0xda>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <HAL_UART_Receive+0xe8>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d106      	bne.n	80026ea <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e008      	b.n	80026fc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	3301      	adds	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1b2      	bne.n	8002680 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	4613      	mov	r3, r2
 800273c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	d112      	bne.n	8002770 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_UART_Receive_IT+0x26>
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e00b      	b.n	8002772 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	461a      	mov	r2, r3
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fb1d 	bl	8002da6 <UART_Start_Receive_IT>
 800276c:	4603      	mov	r3, r0
 800276e:	e000      	b.n	8002772 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b0ba      	sub	sp, #232	@ 0xe8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80027ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_UART_IRQHandler+0x66>
 80027ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fbfc 	bl	8002fd8 <UART_Receive_IT>
      return;
 80027e0:	e25b      	b.n	8002c9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 80de 	beq.w	80029a8 <HAL_UART_IRQHandler+0x22c>
 80027ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d106      	bne.n	8002806 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80d1 	beq.w	80029a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_UART_IRQHandler+0xae>
 8002812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800282a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_UART_IRQHandler+0xd2>
 8002836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	f043 0202 	orr.w	r2, r3, #2
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800284e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <HAL_UART_IRQHandler+0xf6>
 800285a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f043 0204 	orr.w	r2, r3, #4
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d011      	beq.n	80028a2 <HAL_UART_IRQHandler+0x126>
 800287e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800288a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f043 0208 	orr.w	r2, r3, #8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 81f2 	beq.w	8002c90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d008      	beq.n	80028ca <HAL_UART_IRQHandler+0x14e>
 80028b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fb87 	bl	8002fd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d4:	2b40      	cmp	r3, #64	@ 0x40
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <HAL_UART_IRQHandler+0x17a>
 80028ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d04f      	beq.n	8002996 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fa8f 	bl	8002e1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b40      	cmp	r3, #64	@ 0x40
 8002908:	d141      	bne.n	800298e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002928:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3314      	adds	r3, #20
 8002932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002936:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800293a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800294e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1d9      	bne.n	800290a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d013      	beq.n	8002986 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002962:	4a7e      	ldr	r2, [pc, #504]	@ (8002b5c <HAL_UART_IRQHandler+0x3e0>)
 8002964:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fec5 	bl	80016fa <HAL_DMA_Abort_IT>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002980:	4610      	mov	r0, r2
 8002982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002984:	e00e      	b.n	80029a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f99e 	bl	8002cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800298c:	e00a      	b.n	80029a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f99a 	bl	8002cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002994:	e006      	b.n	80029a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f996 	bl	8002cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80029a2:	e175      	b.n	8002c90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	bf00      	nop
    return;
 80029a6:	e173      	b.n	8002c90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	f040 814f 	bne.w	8002c50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8148 	beq.w	8002c50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8141 	beq.w	8002c50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ee:	2b40      	cmp	r3, #64	@ 0x40
 80029f0:	f040 80b6 	bne.w	8002b60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 8145 	beq.w	8002c94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a12:	429a      	cmp	r2, r3
 8002a14:	f080 813e 	bcs.w	8002c94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a2a:	f000 8088 	beq.w	8002b3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	330c      	adds	r3, #12
 8002a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	330c      	adds	r3, #12
 8002a56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002a5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a6a:	e841 2300 	strex	r3, r2, [r1]
 8002a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1d9      	bne.n	8002a2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3314      	adds	r3, #20
 8002a80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3314      	adds	r3, #20
 8002a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002aaa:	e841 2300 	strex	r3, r2, [r1]
 8002aae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e1      	bne.n	8002a7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3314      	adds	r3, #20
 8002abc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002acc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3314      	adds	r3, #20
 8002ad6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ada:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002adc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ae0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e3      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	330c      	adds	r3, #12
 8002b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b0e:	f023 0310 	bic.w	r3, r3, #16
 8002b12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	330c      	adds	r3, #12
 8002b1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e3      	bne.n	8002afc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fd6e 	bl	800161a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f8c1 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b5a:	e09b      	b.n	8002c94 <HAL_UART_IRQHandler+0x518>
 8002b5c:	08002ee1 	.word	0x08002ee1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 808e 	beq.w	8002c98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8089 	beq.w	8002c98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002baa:	647a      	str	r2, [r7, #68]	@ 0x44
 8002bac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bb2:	e841 2300 	strex	r3, r2, [r1]
 8002bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e3      	bne.n	8002b86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3314      	adds	r3, #20
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	e853 3f00 	ldrex	r3, [r3]
 8002bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002be2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bea:	e841 2300 	strex	r3, r2, [r1]
 8002bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1e3      	bne.n	8002bbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	330c      	adds	r3, #12
 8002c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	e853 3f00 	ldrex	r3, [r3]
 8002c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0310 	bic.w	r3, r3, #16
 8002c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c28:	61fa      	str	r2, [r7, #28]
 8002c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2c:	69b9      	ldr	r1, [r7, #24]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	e841 2300 	strex	r3, r2, [r1]
 8002c34:	617b      	str	r3, [r7, #20]
   return(result);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e3      	bne.n	8002c04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c46:	4619      	mov	r1, r3
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f847 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c4e:	e023      	b.n	8002c98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d009      	beq.n	8002c70 <HAL_UART_IRQHandler+0x4f4>
 8002c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f94d 	bl	8002f08 <UART_Transmit_IT>
    return;
 8002c6e:	e014      	b.n	8002c9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <HAL_UART_IRQHandler+0x51e>
 8002c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f98d 	bl	8002fa8 <UART_EndTransmit_IT>
    return;
 8002c8e:	e004      	b.n	8002c9a <HAL_UART_IRQHandler+0x51e>
    return;
 8002c90:	bf00      	nop
 8002c92:	e002      	b.n	8002c9a <HAL_UART_IRQHandler+0x51e>
      return;
 8002c94:	bf00      	nop
 8002c96:	e000      	b.n	8002c9a <HAL_UART_IRQHandler+0x51e>
      return;
 8002c98:	bf00      	nop
  }
}
 8002c9a:	37e8      	adds	r7, #232	@ 0xe8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d04:	e03b      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d0c:	d037      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0e:	f7fe fb67 	bl	80013e0 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	6a3a      	ldr	r2, [r7, #32]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e03a      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d023      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b80      	cmp	r3, #128	@ 0x80
 8002d3a:	d020      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b40      	cmp	r3, #64	@ 0x40
 8002d40:	d01d      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d116      	bne.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f857 	bl	8002e1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2208      	movs	r2, #8
 8002d70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00f      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d0b4      	beq.n	8002d06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	4613      	mov	r3, r2
 8002db2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2222      	movs	r2, #34	@ 0x22
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0220 	orr.w	r2, r2, #32
 8002e0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b095      	sub	sp, #84	@ 0x54
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	330c      	adds	r3, #12
 8002e28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e42:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e5      	bne.n	8002e22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3314      	adds	r3, #20
 8002e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	e853 3f00 	ldrex	r3, [r3]
 8002e64:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3314      	adds	r3, #20
 8002e74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e5      	bne.n	8002e56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d119      	bne.n	8002ec6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	330c      	adds	r3, #12
 8002e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f023 0310 	bic.w	r3, r3, #16
 8002ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eb2:	61ba      	str	r2, [r7, #24]
 8002eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	6979      	ldr	r1, [r7, #20]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	e841 2300 	strex	r3, r2, [r1]
 8002ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e5      	bne.n	8002e92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ed4:	bf00      	nop
 8002ed6:	3754      	adds	r7, #84	@ 0x54
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff fee4 	bl	8002cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b21      	cmp	r3, #33	@ 0x21
 8002f1a:	d13e      	bne.n	8002f9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f24:	d114      	bne.n	8002f50 <UART_Transmit_IT+0x48>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d110      	bne.n	8002f50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	1c9a      	adds	r2, r3, #2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	621a      	str	r2, [r3, #32]
 8002f4e:	e008      	b.n	8002f62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	1c59      	adds	r1, r3, #1
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6211      	str	r1, [r2, #32]
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10f      	bne.n	8002f96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	e000      	b.n	8002f9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f9a:	2302      	movs	r3, #2
  }
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fe69 	bl	8002ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	@ 0x30
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b22      	cmp	r3, #34	@ 0x22
 8002fea:	f040 80ae 	bne.w	800314a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff6:	d117      	bne.n	8003028 <UART_Receive_IT+0x50>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d113      	bne.n	8003028 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	b29b      	uxth	r3, r3
 8003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003016:	b29a      	uxth	r2, r3
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	1c9a      	adds	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	629a      	str	r2, [r3, #40]	@ 0x28
 8003026:	e026      	b.n	8003076 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800303a:	d007      	beq.n	800304c <UART_Receive_IT+0x74>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <UART_Receive_IT+0x82>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d106      	bne.n	800305a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e008      	b.n	800306c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003066:	b2da      	uxtb	r2, r3
 8003068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4619      	mov	r1, r3
 8003084:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003086:	2b00      	cmp	r3, #0
 8003088:	d15d      	bne.n	8003146 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0220 	bic.w	r2, r2, #32
 8003098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d135      	bne.n	800313c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	330c      	adds	r3, #12
 80030dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	613b      	str	r3, [r7, #16]
   return(result);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f023 0310 	bic.w	r3, r3, #16
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f6:	623a      	str	r2, [r7, #32]
 80030f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fa:	69f9      	ldr	r1, [r7, #28]
 80030fc:	6a3a      	ldr	r2, [r7, #32]
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	61bb      	str	r3, [r7, #24]
   return(result);
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e5      	bne.n	80030d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b10      	cmp	r3, #16
 8003116:	d10a      	bne.n	800312e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003132:	4619      	mov	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff fdd1 	bl	8002cdc <HAL_UARTEx_RxEventCallback>
 800313a:	e002      	b.n	8003142 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff fdb9 	bl	8002cb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e002      	b.n	800314c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800314a:	2302      	movs	r3, #2
  }
}
 800314c:	4618      	mov	r0, r3
 800314e:	3730      	adds	r7, #48	@ 0x30
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003158:	b0c0      	sub	sp, #256	@ 0x100
 800315a:	af00      	add	r7, sp, #0
 800315c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	68d9      	ldr	r1, [r3, #12]
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	ea40 0301 	orr.w	r3, r0, r1
 800317c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	431a      	orrs	r2, r3
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	431a      	orrs	r2, r3
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031ac:	f021 010c 	bic.w	r1, r1, #12
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031ba:	430b      	orrs	r3, r1
 80031bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ce:	6999      	ldr	r1, [r3, #24]
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	ea40 0301 	orr.w	r3, r0, r1
 80031da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003420 <UART_SetConfig+0x2cc>)
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d005      	beq.n	80031f4 <UART_SetConfig+0xa0>
 80031e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003424 <UART_SetConfig+0x2d0>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d104      	bne.n	80031fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031f4:	f7ff f916 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 80031f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031fc:	e003      	b.n	8003206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031fe:	f7ff f8fd 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8003202:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003210:	f040 810c 	bne.w	800342c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800321e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003226:	4622      	mov	r2, r4
 8003228:	462b      	mov	r3, r5
 800322a:	1891      	adds	r1, r2, r2
 800322c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800322e:	415b      	adcs	r3, r3
 8003230:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003236:	4621      	mov	r1, r4
 8003238:	eb12 0801 	adds.w	r8, r2, r1
 800323c:	4629      	mov	r1, r5
 800323e:	eb43 0901 	adc.w	r9, r3, r1
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800324e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003256:	4690      	mov	r8, r2
 8003258:	4699      	mov	r9, r3
 800325a:	4623      	mov	r3, r4
 800325c:	eb18 0303 	adds.w	r3, r8, r3
 8003260:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003264:	462b      	mov	r3, r5
 8003266:	eb49 0303 	adc.w	r3, r9, r3
 800326a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800327a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800327e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003282:	460b      	mov	r3, r1
 8003284:	18db      	adds	r3, r3, r3
 8003286:	653b      	str	r3, [r7, #80]	@ 0x50
 8003288:	4613      	mov	r3, r2
 800328a:	eb42 0303 	adc.w	r3, r2, r3
 800328e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003298:	f7fd f812 	bl	80002c0 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4b61      	ldr	r3, [pc, #388]	@ (8003428 <UART_SetConfig+0x2d4>)
 80032a2:	fba3 2302 	umull	r2, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	011c      	lsls	r4, r3, #4
 80032aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032bc:	4642      	mov	r2, r8
 80032be:	464b      	mov	r3, r9
 80032c0:	1891      	adds	r1, r2, r2
 80032c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032c4:	415b      	adcs	r3, r3
 80032c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032cc:	4641      	mov	r1, r8
 80032ce:	eb12 0a01 	adds.w	sl, r2, r1
 80032d2:	4649      	mov	r1, r9
 80032d4:	eb43 0b01 	adc.w	fp, r3, r1
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032ec:	4692      	mov	sl, r2
 80032ee:	469b      	mov	fp, r3
 80032f0:	4643      	mov	r3, r8
 80032f2:	eb1a 0303 	adds.w	r3, sl, r3
 80032f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032fa:	464b      	mov	r3, r9
 80032fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003300:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003310:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003318:	460b      	mov	r3, r1
 800331a:	18db      	adds	r3, r3, r3
 800331c:	643b      	str	r3, [r7, #64]	@ 0x40
 800331e:	4613      	mov	r3, r2
 8003320:	eb42 0303 	adc.w	r3, r2, r3
 8003324:	647b      	str	r3, [r7, #68]	@ 0x44
 8003326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800332a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800332e:	f7fc ffc7 	bl	80002c0 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4611      	mov	r1, r2
 8003338:	4b3b      	ldr	r3, [pc, #236]	@ (8003428 <UART_SetConfig+0x2d4>)
 800333a:	fba3 2301 	umull	r2, r3, r3, r1
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2264      	movs	r2, #100	@ 0x64
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	1acb      	subs	r3, r1, r3
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800334e:	4b36      	ldr	r3, [pc, #216]	@ (8003428 <UART_SetConfig+0x2d4>)
 8003350:	fba3 2302 	umull	r2, r3, r3, r2
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800335c:	441c      	add	r4, r3
 800335e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003368:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800336c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003370:	4642      	mov	r2, r8
 8003372:	464b      	mov	r3, r9
 8003374:	1891      	adds	r1, r2, r2
 8003376:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003378:	415b      	adcs	r3, r3
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800337c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003380:	4641      	mov	r1, r8
 8003382:	1851      	adds	r1, r2, r1
 8003384:	6339      	str	r1, [r7, #48]	@ 0x30
 8003386:	4649      	mov	r1, r9
 8003388:	414b      	adcs	r3, r1
 800338a:	637b      	str	r3, [r7, #52]	@ 0x34
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003398:	4659      	mov	r1, fp
 800339a:	00cb      	lsls	r3, r1, #3
 800339c:	4651      	mov	r1, sl
 800339e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a2:	4651      	mov	r1, sl
 80033a4:	00ca      	lsls	r2, r1, #3
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	4642      	mov	r2, r8
 80033ae:	189b      	adds	r3, r3, r2
 80033b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033b4:	464b      	mov	r3, r9
 80033b6:	460a      	mov	r2, r1
 80033b8:	eb42 0303 	adc.w	r3, r2, r3
 80033bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033d4:	460b      	mov	r3, r1
 80033d6:	18db      	adds	r3, r3, r3
 80033d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033da:	4613      	mov	r3, r2
 80033dc:	eb42 0303 	adc.w	r3, r2, r3
 80033e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033ea:	f7fc ff69 	bl	80002c0 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <UART_SetConfig+0x2d4>)
 80033f4:	fba3 1302 	umull	r1, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	2164      	movs	r1, #100	@ 0x64
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	3332      	adds	r3, #50	@ 0x32
 8003406:	4a08      	ldr	r2, [pc, #32]	@ (8003428 <UART_SetConfig+0x2d4>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	f003 0207 	and.w	r2, r3, #7
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4422      	add	r2, r4
 800341a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800341c:	e106      	b.n	800362c <UART_SetConfig+0x4d8>
 800341e:	bf00      	nop
 8003420:	40011000 	.word	0x40011000
 8003424:	40011400 	.word	0x40011400
 8003428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800342c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003430:	2200      	movs	r2, #0
 8003432:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003436:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800343a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800343e:	4642      	mov	r2, r8
 8003440:	464b      	mov	r3, r9
 8003442:	1891      	adds	r1, r2, r2
 8003444:	6239      	str	r1, [r7, #32]
 8003446:	415b      	adcs	r3, r3
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
 800344a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800344e:	4641      	mov	r1, r8
 8003450:	1854      	adds	r4, r2, r1
 8003452:	4649      	mov	r1, r9
 8003454:	eb43 0501 	adc.w	r5, r3, r1
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	00eb      	lsls	r3, r5, #3
 8003462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003466:	00e2      	lsls	r2, r4, #3
 8003468:	4614      	mov	r4, r2
 800346a:	461d      	mov	r5, r3
 800346c:	4643      	mov	r3, r8
 800346e:	18e3      	adds	r3, r4, r3
 8003470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003474:	464b      	mov	r3, r9
 8003476:	eb45 0303 	adc.w	r3, r5, r3
 800347a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800348a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800349a:	4629      	mov	r1, r5
 800349c:	008b      	lsls	r3, r1, #2
 800349e:	4621      	mov	r1, r4
 80034a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034a4:	4621      	mov	r1, r4
 80034a6:	008a      	lsls	r2, r1, #2
 80034a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034ac:	f7fc ff08 	bl	80002c0 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4b60      	ldr	r3, [pc, #384]	@ (8003638 <UART_SetConfig+0x4e4>)
 80034b6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	011c      	lsls	r4, r3, #4
 80034be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034d0:	4642      	mov	r2, r8
 80034d2:	464b      	mov	r3, r9
 80034d4:	1891      	adds	r1, r2, r2
 80034d6:	61b9      	str	r1, [r7, #24]
 80034d8:	415b      	adcs	r3, r3
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e0:	4641      	mov	r1, r8
 80034e2:	1851      	adds	r1, r2, r1
 80034e4:	6139      	str	r1, [r7, #16]
 80034e6:	4649      	mov	r1, r9
 80034e8:	414b      	adcs	r3, r1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034f8:	4659      	mov	r1, fp
 80034fa:	00cb      	lsls	r3, r1, #3
 80034fc:	4651      	mov	r1, sl
 80034fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003502:	4651      	mov	r1, sl
 8003504:	00ca      	lsls	r2, r1, #3
 8003506:	4610      	mov	r0, r2
 8003508:	4619      	mov	r1, r3
 800350a:	4603      	mov	r3, r0
 800350c:	4642      	mov	r2, r8
 800350e:	189b      	adds	r3, r3, r2
 8003510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003514:	464b      	mov	r3, r9
 8003516:	460a      	mov	r2, r1
 8003518:	eb42 0303 	adc.w	r3, r2, r3
 800351c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	67bb      	str	r3, [r7, #120]	@ 0x78
 800352a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003538:	4649      	mov	r1, r9
 800353a:	008b      	lsls	r3, r1, #2
 800353c:	4641      	mov	r1, r8
 800353e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003542:	4641      	mov	r1, r8
 8003544:	008a      	lsls	r2, r1, #2
 8003546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800354a:	f7fc feb9 	bl	80002c0 <__aeabi_uldivmod>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4611      	mov	r1, r2
 8003554:	4b38      	ldr	r3, [pc, #224]	@ (8003638 <UART_SetConfig+0x4e4>)
 8003556:	fba3 2301 	umull	r2, r3, r3, r1
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2264      	movs	r2, #100	@ 0x64
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	1acb      	subs	r3, r1, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	3332      	adds	r3, #50	@ 0x32
 8003568:	4a33      	ldr	r2, [pc, #204]	@ (8003638 <UART_SetConfig+0x4e4>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003574:	441c      	add	r4, r3
 8003576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357a:	2200      	movs	r2, #0
 800357c:	673b      	str	r3, [r7, #112]	@ 0x70
 800357e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003580:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	1891      	adds	r1, r2, r2
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	415b      	adcs	r3, r3
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003594:	4641      	mov	r1, r8
 8003596:	1851      	adds	r1, r2, r1
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	4649      	mov	r1, r9
 800359c:	414b      	adcs	r3, r1
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035ac:	4659      	mov	r1, fp
 80035ae:	00cb      	lsls	r3, r1, #3
 80035b0:	4651      	mov	r1, sl
 80035b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b6:	4651      	mov	r1, sl
 80035b8:	00ca      	lsls	r2, r1, #3
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	4642      	mov	r2, r8
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035c6:	464b      	mov	r3, r9
 80035c8:	460a      	mov	r2, r1
 80035ca:	eb42 0303 	adc.w	r3, r2, r3
 80035ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035da:	667a      	str	r2, [r7, #100]	@ 0x64
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035e8:	4649      	mov	r1, r9
 80035ea:	008b      	lsls	r3, r1, #2
 80035ec:	4641      	mov	r1, r8
 80035ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f2:	4641      	mov	r1, r8
 80035f4:	008a      	lsls	r2, r1, #2
 80035f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035fa:	f7fc fe61 	bl	80002c0 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4b0d      	ldr	r3, [pc, #52]	@ (8003638 <UART_SetConfig+0x4e4>)
 8003604:	fba3 1302 	umull	r1, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	2164      	movs	r1, #100	@ 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	3332      	adds	r3, #50	@ 0x32
 8003616:	4a08      	ldr	r2, [pc, #32]	@ (8003638 <UART_SetConfig+0x4e4>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	f003 020f 	and.w	r2, r3, #15
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4422      	add	r2, r4
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003632:	46bd      	mov	sp, r7
 8003634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003638:	51eb851f 	.word	0x51eb851f

0800363c <atoi>:
 800363c:	220a      	movs	r2, #10
 800363e:	2100      	movs	r1, #0
 8003640:	f000 b89a 	b.w	8003778 <strtol>

08003644 <siprintf>:
 8003644:	b40e      	push	{r1, r2, r3}
 8003646:	b500      	push	{lr}
 8003648:	b09c      	sub	sp, #112	@ 0x70
 800364a:	ab1d      	add	r3, sp, #116	@ 0x74
 800364c:	9002      	str	r0, [sp, #8]
 800364e:	9006      	str	r0, [sp, #24]
 8003650:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003654:	4809      	ldr	r0, [pc, #36]	@ (800367c <siprintf+0x38>)
 8003656:	9107      	str	r1, [sp, #28]
 8003658:	9104      	str	r1, [sp, #16]
 800365a:	4909      	ldr	r1, [pc, #36]	@ (8003680 <siprintf+0x3c>)
 800365c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003660:	9105      	str	r1, [sp, #20]
 8003662:	6800      	ldr	r0, [r0, #0]
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	a902      	add	r1, sp, #8
 8003668:	f000 f932 	bl	80038d0 <_svfiprintf_r>
 800366c:	9b02      	ldr	r3, [sp, #8]
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	b01c      	add	sp, #112	@ 0x70
 8003674:	f85d eb04 	ldr.w	lr, [sp], #4
 8003678:	b003      	add	sp, #12
 800367a:	4770      	bx	lr
 800367c:	2000001c 	.word	0x2000001c
 8003680:	ffff0208 	.word	0xffff0208

08003684 <_strtol_l.constprop.0>:
 8003684:	2b24      	cmp	r3, #36	@ 0x24
 8003686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800368a:	4686      	mov	lr, r0
 800368c:	4690      	mov	r8, r2
 800368e:	d801      	bhi.n	8003694 <_strtol_l.constprop.0+0x10>
 8003690:	2b01      	cmp	r3, #1
 8003692:	d106      	bne.n	80036a2 <_strtol_l.constprop.0+0x1e>
 8003694:	f000 f894 	bl	80037c0 <__errno>
 8003698:	2316      	movs	r3, #22
 800369a:	6003      	str	r3, [r0, #0]
 800369c:	2000      	movs	r0, #0
 800369e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a2:	4834      	ldr	r0, [pc, #208]	@ (8003774 <_strtol_l.constprop.0+0xf0>)
 80036a4:	460d      	mov	r5, r1
 80036a6:	462a      	mov	r2, r5
 80036a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036ac:	5d06      	ldrb	r6, [r0, r4]
 80036ae:	f016 0608 	ands.w	r6, r6, #8
 80036b2:	d1f8      	bne.n	80036a6 <_strtol_l.constprop.0+0x22>
 80036b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80036b6:	d12d      	bne.n	8003714 <_strtol_l.constprop.0+0x90>
 80036b8:	782c      	ldrb	r4, [r5, #0]
 80036ba:	2601      	movs	r6, #1
 80036bc:	1c95      	adds	r5, r2, #2
 80036be:	f033 0210 	bics.w	r2, r3, #16
 80036c2:	d109      	bne.n	80036d8 <_strtol_l.constprop.0+0x54>
 80036c4:	2c30      	cmp	r4, #48	@ 0x30
 80036c6:	d12a      	bne.n	800371e <_strtol_l.constprop.0+0x9a>
 80036c8:	782a      	ldrb	r2, [r5, #0]
 80036ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80036ce:	2a58      	cmp	r2, #88	@ 0x58
 80036d0:	d125      	bne.n	800371e <_strtol_l.constprop.0+0x9a>
 80036d2:	786c      	ldrb	r4, [r5, #1]
 80036d4:	2310      	movs	r3, #16
 80036d6:	3502      	adds	r5, #2
 80036d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80036dc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80036e0:	2200      	movs	r2, #0
 80036e2:	fbbc f9f3 	udiv	r9, ip, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80036ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80036f0:	2f09      	cmp	r7, #9
 80036f2:	d81b      	bhi.n	800372c <_strtol_l.constprop.0+0xa8>
 80036f4:	463c      	mov	r4, r7
 80036f6:	42a3      	cmp	r3, r4
 80036f8:	dd27      	ble.n	800374a <_strtol_l.constprop.0+0xc6>
 80036fa:	1c57      	adds	r7, r2, #1
 80036fc:	d007      	beq.n	800370e <_strtol_l.constprop.0+0x8a>
 80036fe:	4581      	cmp	r9, r0
 8003700:	d320      	bcc.n	8003744 <_strtol_l.constprop.0+0xc0>
 8003702:	d101      	bne.n	8003708 <_strtol_l.constprop.0+0x84>
 8003704:	45a2      	cmp	sl, r4
 8003706:	db1d      	blt.n	8003744 <_strtol_l.constprop.0+0xc0>
 8003708:	fb00 4003 	mla	r0, r0, r3, r4
 800370c:	2201      	movs	r2, #1
 800370e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003712:	e7eb      	b.n	80036ec <_strtol_l.constprop.0+0x68>
 8003714:	2c2b      	cmp	r4, #43	@ 0x2b
 8003716:	bf04      	itt	eq
 8003718:	782c      	ldrbeq	r4, [r5, #0]
 800371a:	1c95      	addeq	r5, r2, #2
 800371c:	e7cf      	b.n	80036be <_strtol_l.constprop.0+0x3a>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1da      	bne.n	80036d8 <_strtol_l.constprop.0+0x54>
 8003722:	2c30      	cmp	r4, #48	@ 0x30
 8003724:	bf0c      	ite	eq
 8003726:	2308      	moveq	r3, #8
 8003728:	230a      	movne	r3, #10
 800372a:	e7d5      	b.n	80036d8 <_strtol_l.constprop.0+0x54>
 800372c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003730:	2f19      	cmp	r7, #25
 8003732:	d801      	bhi.n	8003738 <_strtol_l.constprop.0+0xb4>
 8003734:	3c37      	subs	r4, #55	@ 0x37
 8003736:	e7de      	b.n	80036f6 <_strtol_l.constprop.0+0x72>
 8003738:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800373c:	2f19      	cmp	r7, #25
 800373e:	d804      	bhi.n	800374a <_strtol_l.constprop.0+0xc6>
 8003740:	3c57      	subs	r4, #87	@ 0x57
 8003742:	e7d8      	b.n	80036f6 <_strtol_l.constprop.0+0x72>
 8003744:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003748:	e7e1      	b.n	800370e <_strtol_l.constprop.0+0x8a>
 800374a:	1c53      	adds	r3, r2, #1
 800374c:	d108      	bne.n	8003760 <_strtol_l.constprop.0+0xdc>
 800374e:	2322      	movs	r3, #34	@ 0x22
 8003750:	f8ce 3000 	str.w	r3, [lr]
 8003754:	4660      	mov	r0, ip
 8003756:	f1b8 0f00 	cmp.w	r8, #0
 800375a:	d0a0      	beq.n	800369e <_strtol_l.constprop.0+0x1a>
 800375c:	1e69      	subs	r1, r5, #1
 800375e:	e006      	b.n	800376e <_strtol_l.constprop.0+0xea>
 8003760:	b106      	cbz	r6, 8003764 <_strtol_l.constprop.0+0xe0>
 8003762:	4240      	negs	r0, r0
 8003764:	f1b8 0f00 	cmp.w	r8, #0
 8003768:	d099      	beq.n	800369e <_strtol_l.constprop.0+0x1a>
 800376a:	2a00      	cmp	r2, #0
 800376c:	d1f6      	bne.n	800375c <_strtol_l.constprop.0+0xd8>
 800376e:	f8c8 1000 	str.w	r1, [r8]
 8003772:	e794      	b.n	800369e <_strtol_l.constprop.0+0x1a>
 8003774:	08004189 	.word	0x08004189

08003778 <strtol>:
 8003778:	4613      	mov	r3, r2
 800377a:	460a      	mov	r2, r1
 800377c:	4601      	mov	r1, r0
 800377e:	4802      	ldr	r0, [pc, #8]	@ (8003788 <strtol+0x10>)
 8003780:	6800      	ldr	r0, [r0, #0]
 8003782:	f7ff bf7f 	b.w	8003684 <_strtol_l.constprop.0>
 8003786:	bf00      	nop
 8003788:	2000001c 	.word	0x2000001c

0800378c <strncmp>:
 800378c:	b510      	push	{r4, lr}
 800378e:	b16a      	cbz	r2, 80037ac <strncmp+0x20>
 8003790:	3901      	subs	r1, #1
 8003792:	1884      	adds	r4, r0, r2
 8003794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003798:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800379c:	429a      	cmp	r2, r3
 800379e:	d103      	bne.n	80037a8 <strncmp+0x1c>
 80037a0:	42a0      	cmp	r0, r4
 80037a2:	d001      	beq.n	80037a8 <strncmp+0x1c>
 80037a4:	2a00      	cmp	r2, #0
 80037a6:	d1f5      	bne.n	8003794 <strncmp+0x8>
 80037a8:	1ad0      	subs	r0, r2, r3
 80037aa:	bd10      	pop	{r4, pc}
 80037ac:	4610      	mov	r0, r2
 80037ae:	e7fc      	b.n	80037aa <strncmp+0x1e>

080037b0 <memset>:
 80037b0:	4402      	add	r2, r0
 80037b2:	4603      	mov	r3, r0
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d100      	bne.n	80037ba <memset+0xa>
 80037b8:	4770      	bx	lr
 80037ba:	f803 1b01 	strb.w	r1, [r3], #1
 80037be:	e7f9      	b.n	80037b4 <memset+0x4>

080037c0 <__errno>:
 80037c0:	4b01      	ldr	r3, [pc, #4]	@ (80037c8 <__errno+0x8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	2000001c 	.word	0x2000001c

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003804 <__libc_init_array+0x38>)
 80037d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003808 <__libc_init_array+0x3c>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	2600      	movs	r6, #0
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	4d0b      	ldr	r5, [pc, #44]	@ (800380c <__libc_init_array+0x40>)
 80037de:	4c0c      	ldr	r4, [pc, #48]	@ (8003810 <__libc_init_array+0x44>)
 80037e0:	f000 fc66 	bl	80040b0 <_init>
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	2600      	movs	r6, #0
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	080042c4 	.word	0x080042c4
 8003808:	080042c4 	.word	0x080042c4
 800380c:	080042c4 	.word	0x080042c4
 8003810:	080042c8 	.word	0x080042c8

08003814 <__retarget_lock_acquire_recursive>:
 8003814:	4770      	bx	lr

08003816 <__retarget_lock_release_recursive>:
 8003816:	4770      	bx	lr

08003818 <__ssputs_r>:
 8003818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800381c:	688e      	ldr	r6, [r1, #8]
 800381e:	461f      	mov	r7, r3
 8003820:	42be      	cmp	r6, r7
 8003822:	680b      	ldr	r3, [r1, #0]
 8003824:	4682      	mov	sl, r0
 8003826:	460c      	mov	r4, r1
 8003828:	4690      	mov	r8, r2
 800382a:	d82d      	bhi.n	8003888 <__ssputs_r+0x70>
 800382c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003830:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003834:	d026      	beq.n	8003884 <__ssputs_r+0x6c>
 8003836:	6965      	ldr	r5, [r4, #20]
 8003838:	6909      	ldr	r1, [r1, #16]
 800383a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800383e:	eba3 0901 	sub.w	r9, r3, r1
 8003842:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003846:	1c7b      	adds	r3, r7, #1
 8003848:	444b      	add	r3, r9
 800384a:	106d      	asrs	r5, r5, #1
 800384c:	429d      	cmp	r5, r3
 800384e:	bf38      	it	cc
 8003850:	461d      	movcc	r5, r3
 8003852:	0553      	lsls	r3, r2, #21
 8003854:	d527      	bpl.n	80038a6 <__ssputs_r+0x8e>
 8003856:	4629      	mov	r1, r5
 8003858:	f000 f958 	bl	8003b0c <_malloc_r>
 800385c:	4606      	mov	r6, r0
 800385e:	b360      	cbz	r0, 80038ba <__ssputs_r+0xa2>
 8003860:	6921      	ldr	r1, [r4, #16]
 8003862:	464a      	mov	r2, r9
 8003864:	f000 fbc4 	bl	8003ff0 <memcpy>
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800386e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003872:	81a3      	strh	r3, [r4, #12]
 8003874:	6126      	str	r6, [r4, #16]
 8003876:	6165      	str	r5, [r4, #20]
 8003878:	444e      	add	r6, r9
 800387a:	eba5 0509 	sub.w	r5, r5, r9
 800387e:	6026      	str	r6, [r4, #0]
 8003880:	60a5      	str	r5, [r4, #8]
 8003882:	463e      	mov	r6, r7
 8003884:	42be      	cmp	r6, r7
 8003886:	d900      	bls.n	800388a <__ssputs_r+0x72>
 8003888:	463e      	mov	r6, r7
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	4632      	mov	r2, r6
 800388e:	4641      	mov	r1, r8
 8003890:	f000 fb84 	bl	8003f9c <memmove>
 8003894:	68a3      	ldr	r3, [r4, #8]
 8003896:	1b9b      	subs	r3, r3, r6
 8003898:	60a3      	str	r3, [r4, #8]
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	4433      	add	r3, r6
 800389e:	6023      	str	r3, [r4, #0]
 80038a0:	2000      	movs	r0, #0
 80038a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a6:	462a      	mov	r2, r5
 80038a8:	f000 fb4a 	bl	8003f40 <_realloc_r>
 80038ac:	4606      	mov	r6, r0
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d1e0      	bne.n	8003874 <__ssputs_r+0x5c>
 80038b2:	6921      	ldr	r1, [r4, #16]
 80038b4:	4650      	mov	r0, sl
 80038b6:	f000 fba9 	bl	800400c <_free_r>
 80038ba:	230c      	movs	r3, #12
 80038bc:	f8ca 3000 	str.w	r3, [sl]
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038c6:	81a3      	strh	r3, [r4, #12]
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038cc:	e7e9      	b.n	80038a2 <__ssputs_r+0x8a>
	...

080038d0 <_svfiprintf_r>:
 80038d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d4:	4698      	mov	r8, r3
 80038d6:	898b      	ldrh	r3, [r1, #12]
 80038d8:	061b      	lsls	r3, r3, #24
 80038da:	b09d      	sub	sp, #116	@ 0x74
 80038dc:	4607      	mov	r7, r0
 80038de:	460d      	mov	r5, r1
 80038e0:	4614      	mov	r4, r2
 80038e2:	d510      	bpl.n	8003906 <_svfiprintf_r+0x36>
 80038e4:	690b      	ldr	r3, [r1, #16]
 80038e6:	b973      	cbnz	r3, 8003906 <_svfiprintf_r+0x36>
 80038e8:	2140      	movs	r1, #64	@ 0x40
 80038ea:	f000 f90f 	bl	8003b0c <_malloc_r>
 80038ee:	6028      	str	r0, [r5, #0]
 80038f0:	6128      	str	r0, [r5, #16]
 80038f2:	b930      	cbnz	r0, 8003902 <_svfiprintf_r+0x32>
 80038f4:	230c      	movs	r3, #12
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038fc:	b01d      	add	sp, #116	@ 0x74
 80038fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003902:	2340      	movs	r3, #64	@ 0x40
 8003904:	616b      	str	r3, [r5, #20]
 8003906:	2300      	movs	r3, #0
 8003908:	9309      	str	r3, [sp, #36]	@ 0x24
 800390a:	2320      	movs	r3, #32
 800390c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003910:	f8cd 800c 	str.w	r8, [sp, #12]
 8003914:	2330      	movs	r3, #48	@ 0x30
 8003916:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ab4 <_svfiprintf_r+0x1e4>
 800391a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800391e:	f04f 0901 	mov.w	r9, #1
 8003922:	4623      	mov	r3, r4
 8003924:	469a      	mov	sl, r3
 8003926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800392a:	b10a      	cbz	r2, 8003930 <_svfiprintf_r+0x60>
 800392c:	2a25      	cmp	r2, #37	@ 0x25
 800392e:	d1f9      	bne.n	8003924 <_svfiprintf_r+0x54>
 8003930:	ebba 0b04 	subs.w	fp, sl, r4
 8003934:	d00b      	beq.n	800394e <_svfiprintf_r+0x7e>
 8003936:	465b      	mov	r3, fp
 8003938:	4622      	mov	r2, r4
 800393a:	4629      	mov	r1, r5
 800393c:	4638      	mov	r0, r7
 800393e:	f7ff ff6b 	bl	8003818 <__ssputs_r>
 8003942:	3001      	adds	r0, #1
 8003944:	f000 80a7 	beq.w	8003a96 <_svfiprintf_r+0x1c6>
 8003948:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800394a:	445a      	add	r2, fp
 800394c:	9209      	str	r2, [sp, #36]	@ 0x24
 800394e:	f89a 3000 	ldrb.w	r3, [sl]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 809f 	beq.w	8003a96 <_svfiprintf_r+0x1c6>
 8003958:	2300      	movs	r3, #0
 800395a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800395e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003962:	f10a 0a01 	add.w	sl, sl, #1
 8003966:	9304      	str	r3, [sp, #16]
 8003968:	9307      	str	r3, [sp, #28]
 800396a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800396e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003970:	4654      	mov	r4, sl
 8003972:	2205      	movs	r2, #5
 8003974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003978:	484e      	ldr	r0, [pc, #312]	@ (8003ab4 <_svfiprintf_r+0x1e4>)
 800397a:	f7fc fc51 	bl	8000220 <memchr>
 800397e:	9a04      	ldr	r2, [sp, #16]
 8003980:	b9d8      	cbnz	r0, 80039ba <_svfiprintf_r+0xea>
 8003982:	06d0      	lsls	r0, r2, #27
 8003984:	bf44      	itt	mi
 8003986:	2320      	movmi	r3, #32
 8003988:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800398c:	0711      	lsls	r1, r2, #28
 800398e:	bf44      	itt	mi
 8003990:	232b      	movmi	r3, #43	@ 0x2b
 8003992:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003996:	f89a 3000 	ldrb.w	r3, [sl]
 800399a:	2b2a      	cmp	r3, #42	@ 0x2a
 800399c:	d015      	beq.n	80039ca <_svfiprintf_r+0xfa>
 800399e:	9a07      	ldr	r2, [sp, #28]
 80039a0:	4654      	mov	r4, sl
 80039a2:	2000      	movs	r0, #0
 80039a4:	f04f 0c0a 	mov.w	ip, #10
 80039a8:	4621      	mov	r1, r4
 80039aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ae:	3b30      	subs	r3, #48	@ 0x30
 80039b0:	2b09      	cmp	r3, #9
 80039b2:	d94b      	bls.n	8003a4c <_svfiprintf_r+0x17c>
 80039b4:	b1b0      	cbz	r0, 80039e4 <_svfiprintf_r+0x114>
 80039b6:	9207      	str	r2, [sp, #28]
 80039b8:	e014      	b.n	80039e4 <_svfiprintf_r+0x114>
 80039ba:	eba0 0308 	sub.w	r3, r0, r8
 80039be:	fa09 f303 	lsl.w	r3, r9, r3
 80039c2:	4313      	orrs	r3, r2
 80039c4:	9304      	str	r3, [sp, #16]
 80039c6:	46a2      	mov	sl, r4
 80039c8:	e7d2      	b.n	8003970 <_svfiprintf_r+0xa0>
 80039ca:	9b03      	ldr	r3, [sp, #12]
 80039cc:	1d19      	adds	r1, r3, #4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	9103      	str	r1, [sp, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bfbb      	ittet	lt
 80039d6:	425b      	neglt	r3, r3
 80039d8:	f042 0202 	orrlt.w	r2, r2, #2
 80039dc:	9307      	strge	r3, [sp, #28]
 80039de:	9307      	strlt	r3, [sp, #28]
 80039e0:	bfb8      	it	lt
 80039e2:	9204      	strlt	r2, [sp, #16]
 80039e4:	7823      	ldrb	r3, [r4, #0]
 80039e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80039e8:	d10a      	bne.n	8003a00 <_svfiprintf_r+0x130>
 80039ea:	7863      	ldrb	r3, [r4, #1]
 80039ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80039ee:	d132      	bne.n	8003a56 <_svfiprintf_r+0x186>
 80039f0:	9b03      	ldr	r3, [sp, #12]
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	9203      	str	r2, [sp, #12]
 80039f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039fc:	3402      	adds	r4, #2
 80039fe:	9305      	str	r3, [sp, #20]
 8003a00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ac4 <_svfiprintf_r+0x1f4>
 8003a04:	7821      	ldrb	r1, [r4, #0]
 8003a06:	2203      	movs	r2, #3
 8003a08:	4650      	mov	r0, sl
 8003a0a:	f7fc fc09 	bl	8000220 <memchr>
 8003a0e:	b138      	cbz	r0, 8003a20 <_svfiprintf_r+0x150>
 8003a10:	9b04      	ldr	r3, [sp, #16]
 8003a12:	eba0 000a 	sub.w	r0, r0, sl
 8003a16:	2240      	movs	r2, #64	@ 0x40
 8003a18:	4082      	lsls	r2, r0
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	3401      	adds	r4, #1
 8003a1e:	9304      	str	r3, [sp, #16]
 8003a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a24:	4824      	ldr	r0, [pc, #144]	@ (8003ab8 <_svfiprintf_r+0x1e8>)
 8003a26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a2a:	2206      	movs	r2, #6
 8003a2c:	f7fc fbf8 	bl	8000220 <memchr>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d036      	beq.n	8003aa2 <_svfiprintf_r+0x1d2>
 8003a34:	4b21      	ldr	r3, [pc, #132]	@ (8003abc <_svfiprintf_r+0x1ec>)
 8003a36:	bb1b      	cbnz	r3, 8003a80 <_svfiprintf_r+0x1b0>
 8003a38:	9b03      	ldr	r3, [sp, #12]
 8003a3a:	3307      	adds	r3, #7
 8003a3c:	f023 0307 	bic.w	r3, r3, #7
 8003a40:	3308      	adds	r3, #8
 8003a42:	9303      	str	r3, [sp, #12]
 8003a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a46:	4433      	add	r3, r6
 8003a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a4a:	e76a      	b.n	8003922 <_svfiprintf_r+0x52>
 8003a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a50:	460c      	mov	r4, r1
 8003a52:	2001      	movs	r0, #1
 8003a54:	e7a8      	b.n	80039a8 <_svfiprintf_r+0xd8>
 8003a56:	2300      	movs	r3, #0
 8003a58:	3401      	adds	r4, #1
 8003a5a:	9305      	str	r3, [sp, #20]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f04f 0c0a 	mov.w	ip, #10
 8003a62:	4620      	mov	r0, r4
 8003a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a68:	3a30      	subs	r2, #48	@ 0x30
 8003a6a:	2a09      	cmp	r2, #9
 8003a6c:	d903      	bls.n	8003a76 <_svfiprintf_r+0x1a6>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0c6      	beq.n	8003a00 <_svfiprintf_r+0x130>
 8003a72:	9105      	str	r1, [sp, #20]
 8003a74:	e7c4      	b.n	8003a00 <_svfiprintf_r+0x130>
 8003a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e7f0      	b.n	8003a62 <_svfiprintf_r+0x192>
 8003a80:	ab03      	add	r3, sp, #12
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	462a      	mov	r2, r5
 8003a86:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac0 <_svfiprintf_r+0x1f0>)
 8003a88:	a904      	add	r1, sp, #16
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	f3af 8000 	nop.w
 8003a90:	1c42      	adds	r2, r0, #1
 8003a92:	4606      	mov	r6, r0
 8003a94:	d1d6      	bne.n	8003a44 <_svfiprintf_r+0x174>
 8003a96:	89ab      	ldrh	r3, [r5, #12]
 8003a98:	065b      	lsls	r3, r3, #25
 8003a9a:	f53f af2d 	bmi.w	80038f8 <_svfiprintf_r+0x28>
 8003a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003aa0:	e72c      	b.n	80038fc <_svfiprintf_r+0x2c>
 8003aa2:	ab03      	add	r3, sp, #12
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	462a      	mov	r2, r5
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <_svfiprintf_r+0x1f0>)
 8003aaa:	a904      	add	r1, sp, #16
 8003aac:	4638      	mov	r0, r7
 8003aae:	f000 f91b 	bl	8003ce8 <_printf_i>
 8003ab2:	e7ed      	b.n	8003a90 <_svfiprintf_r+0x1c0>
 8003ab4:	08004289 	.word	0x08004289
 8003ab8:	08004293 	.word	0x08004293
 8003abc:	00000000 	.word	0x00000000
 8003ac0:	08003819 	.word	0x08003819
 8003ac4:	0800428f 	.word	0x0800428f

08003ac8 <sbrk_aligned>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	4e0f      	ldr	r6, [pc, #60]	@ (8003b08 <sbrk_aligned+0x40>)
 8003acc:	460c      	mov	r4, r1
 8003ace:	6831      	ldr	r1, [r6, #0]
 8003ad0:	4605      	mov	r5, r0
 8003ad2:	b911      	cbnz	r1, 8003ada <sbrk_aligned+0x12>
 8003ad4:	f000 fa7c 	bl	8003fd0 <_sbrk_r>
 8003ad8:	6030      	str	r0, [r6, #0]
 8003ada:	4621      	mov	r1, r4
 8003adc:	4628      	mov	r0, r5
 8003ade:	f000 fa77 	bl	8003fd0 <_sbrk_r>
 8003ae2:	1c43      	adds	r3, r0, #1
 8003ae4:	d103      	bne.n	8003aee <sbrk_aligned+0x26>
 8003ae6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003aea:	4620      	mov	r0, r4
 8003aec:	bd70      	pop	{r4, r5, r6, pc}
 8003aee:	1cc4      	adds	r4, r0, #3
 8003af0:	f024 0403 	bic.w	r4, r4, #3
 8003af4:	42a0      	cmp	r0, r4
 8003af6:	d0f8      	beq.n	8003aea <sbrk_aligned+0x22>
 8003af8:	1a21      	subs	r1, r4, r0
 8003afa:	4628      	mov	r0, r5
 8003afc:	f000 fa68 	bl	8003fd0 <_sbrk_r>
 8003b00:	3001      	adds	r0, #1
 8003b02:	d1f2      	bne.n	8003aea <sbrk_aligned+0x22>
 8003b04:	e7ef      	b.n	8003ae6 <sbrk_aligned+0x1e>
 8003b06:	bf00      	nop
 8003b08:	20000344 	.word	0x20000344

08003b0c <_malloc_r>:
 8003b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b10:	1ccd      	adds	r5, r1, #3
 8003b12:	f025 0503 	bic.w	r5, r5, #3
 8003b16:	3508      	adds	r5, #8
 8003b18:	2d0c      	cmp	r5, #12
 8003b1a:	bf38      	it	cc
 8003b1c:	250c      	movcc	r5, #12
 8003b1e:	2d00      	cmp	r5, #0
 8003b20:	4606      	mov	r6, r0
 8003b22:	db01      	blt.n	8003b28 <_malloc_r+0x1c>
 8003b24:	42a9      	cmp	r1, r5
 8003b26:	d904      	bls.n	8003b32 <_malloc_r+0x26>
 8003b28:	230c      	movs	r3, #12
 8003b2a:	6033      	str	r3, [r6, #0]
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c08 <_malloc_r+0xfc>
 8003b36:	f000 f9f7 	bl	8003f28 <__malloc_lock>
 8003b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b3e:	461c      	mov	r4, r3
 8003b40:	bb44      	cbnz	r4, 8003b94 <_malloc_r+0x88>
 8003b42:	4629      	mov	r1, r5
 8003b44:	4630      	mov	r0, r6
 8003b46:	f7ff ffbf 	bl	8003ac8 <sbrk_aligned>
 8003b4a:	1c43      	adds	r3, r0, #1
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	d158      	bne.n	8003c02 <_malloc_r+0xf6>
 8003b50:	f8d8 4000 	ldr.w	r4, [r8]
 8003b54:	4627      	mov	r7, r4
 8003b56:	2f00      	cmp	r7, #0
 8003b58:	d143      	bne.n	8003be2 <_malloc_r+0xd6>
 8003b5a:	2c00      	cmp	r4, #0
 8003b5c:	d04b      	beq.n	8003bf6 <_malloc_r+0xea>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	4639      	mov	r1, r7
 8003b62:	4630      	mov	r0, r6
 8003b64:	eb04 0903 	add.w	r9, r4, r3
 8003b68:	f000 fa32 	bl	8003fd0 <_sbrk_r>
 8003b6c:	4581      	cmp	r9, r0
 8003b6e:	d142      	bne.n	8003bf6 <_malloc_r+0xea>
 8003b70:	6821      	ldr	r1, [r4, #0]
 8003b72:	1a6d      	subs	r5, r5, r1
 8003b74:	4629      	mov	r1, r5
 8003b76:	4630      	mov	r0, r6
 8003b78:	f7ff ffa6 	bl	8003ac8 <sbrk_aligned>
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d03a      	beq.n	8003bf6 <_malloc_r+0xea>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	442b      	add	r3, r5
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	f8d8 3000 	ldr.w	r3, [r8]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	bb62      	cbnz	r2, 8003be8 <_malloc_r+0xdc>
 8003b8e:	f8c8 7000 	str.w	r7, [r8]
 8003b92:	e00f      	b.n	8003bb4 <_malloc_r+0xa8>
 8003b94:	6822      	ldr	r2, [r4, #0]
 8003b96:	1b52      	subs	r2, r2, r5
 8003b98:	d420      	bmi.n	8003bdc <_malloc_r+0xd0>
 8003b9a:	2a0b      	cmp	r2, #11
 8003b9c:	d917      	bls.n	8003bce <_malloc_r+0xc2>
 8003b9e:	1961      	adds	r1, r4, r5
 8003ba0:	42a3      	cmp	r3, r4
 8003ba2:	6025      	str	r5, [r4, #0]
 8003ba4:	bf18      	it	ne
 8003ba6:	6059      	strne	r1, [r3, #4]
 8003ba8:	6863      	ldr	r3, [r4, #4]
 8003baa:	bf08      	it	eq
 8003bac:	f8c8 1000 	streq.w	r1, [r8]
 8003bb0:	5162      	str	r2, [r4, r5]
 8003bb2:	604b      	str	r3, [r1, #4]
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	f000 f9bd 	bl	8003f34 <__malloc_unlock>
 8003bba:	f104 000b 	add.w	r0, r4, #11
 8003bbe:	1d23      	adds	r3, r4, #4
 8003bc0:	f020 0007 	bic.w	r0, r0, #7
 8003bc4:	1ac2      	subs	r2, r0, r3
 8003bc6:	bf1c      	itt	ne
 8003bc8:	1a1b      	subne	r3, r3, r0
 8003bca:	50a3      	strne	r3, [r4, r2]
 8003bcc:	e7af      	b.n	8003b2e <_malloc_r+0x22>
 8003bce:	6862      	ldr	r2, [r4, #4]
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	bf0c      	ite	eq
 8003bd4:	f8c8 2000 	streq.w	r2, [r8]
 8003bd8:	605a      	strne	r2, [r3, #4]
 8003bda:	e7eb      	b.n	8003bb4 <_malloc_r+0xa8>
 8003bdc:	4623      	mov	r3, r4
 8003bde:	6864      	ldr	r4, [r4, #4]
 8003be0:	e7ae      	b.n	8003b40 <_malloc_r+0x34>
 8003be2:	463c      	mov	r4, r7
 8003be4:	687f      	ldr	r7, [r7, #4]
 8003be6:	e7b6      	b.n	8003b56 <_malloc_r+0x4a>
 8003be8:	461a      	mov	r2, r3
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	42a3      	cmp	r3, r4
 8003bee:	d1fb      	bne.n	8003be8 <_malloc_r+0xdc>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	6053      	str	r3, [r2, #4]
 8003bf4:	e7de      	b.n	8003bb4 <_malloc_r+0xa8>
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	6033      	str	r3, [r6, #0]
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f000 f99a 	bl	8003f34 <__malloc_unlock>
 8003c00:	e794      	b.n	8003b2c <_malloc_r+0x20>
 8003c02:	6005      	str	r5, [r0, #0]
 8003c04:	e7d6      	b.n	8003bb4 <_malloc_r+0xa8>
 8003c06:	bf00      	nop
 8003c08:	20000348 	.word	0x20000348

08003c0c <_printf_common>:
 8003c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	4616      	mov	r6, r2
 8003c12:	4698      	mov	r8, r3
 8003c14:	688a      	ldr	r2, [r1, #8]
 8003c16:	690b      	ldr	r3, [r1, #16]
 8003c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bfb8      	it	lt
 8003c20:	4613      	movlt	r3, r2
 8003c22:	6033      	str	r3, [r6, #0]
 8003c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c28:	4607      	mov	r7, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	b10a      	cbz	r2, 8003c32 <_printf_common+0x26>
 8003c2e:	3301      	adds	r3, #1
 8003c30:	6033      	str	r3, [r6, #0]
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	0699      	lsls	r1, r3, #26
 8003c36:	bf42      	ittt	mi
 8003c38:	6833      	ldrmi	r3, [r6, #0]
 8003c3a:	3302      	addmi	r3, #2
 8003c3c:	6033      	strmi	r3, [r6, #0]
 8003c3e:	6825      	ldr	r5, [r4, #0]
 8003c40:	f015 0506 	ands.w	r5, r5, #6
 8003c44:	d106      	bne.n	8003c54 <_printf_common+0x48>
 8003c46:	f104 0a19 	add.w	sl, r4, #25
 8003c4a:	68e3      	ldr	r3, [r4, #12]
 8003c4c:	6832      	ldr	r2, [r6, #0]
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	42ab      	cmp	r3, r5
 8003c52:	dc26      	bgt.n	8003ca2 <_printf_common+0x96>
 8003c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c58:	6822      	ldr	r2, [r4, #0]
 8003c5a:	3b00      	subs	r3, #0
 8003c5c:	bf18      	it	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	0692      	lsls	r2, r2, #26
 8003c62:	d42b      	bmi.n	8003cbc <_printf_common+0xb0>
 8003c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c68:	4641      	mov	r1, r8
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	47c8      	blx	r9
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d01e      	beq.n	8003cb0 <_printf_common+0xa4>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	6922      	ldr	r2, [r4, #16]
 8003c76:	f003 0306 	and.w	r3, r3, #6
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	bf02      	ittt	eq
 8003c7e:	68e5      	ldreq	r5, [r4, #12]
 8003c80:	6833      	ldreq	r3, [r6, #0]
 8003c82:	1aed      	subeq	r5, r5, r3
 8003c84:	68a3      	ldr	r3, [r4, #8]
 8003c86:	bf0c      	ite	eq
 8003c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c8c:	2500      	movne	r5, #0
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	bfc4      	itt	gt
 8003c92:	1a9b      	subgt	r3, r3, r2
 8003c94:	18ed      	addgt	r5, r5, r3
 8003c96:	2600      	movs	r6, #0
 8003c98:	341a      	adds	r4, #26
 8003c9a:	42b5      	cmp	r5, r6
 8003c9c:	d11a      	bne.n	8003cd4 <_printf_common+0xc8>
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	e008      	b.n	8003cb4 <_printf_common+0xa8>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4652      	mov	r2, sl
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	4638      	mov	r0, r7
 8003caa:	47c8      	blx	r9
 8003cac:	3001      	adds	r0, #1
 8003cae:	d103      	bne.n	8003cb8 <_printf_common+0xac>
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb8:	3501      	adds	r5, #1
 8003cba:	e7c6      	b.n	8003c4a <_printf_common+0x3e>
 8003cbc:	18e1      	adds	r1, r4, r3
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	2030      	movs	r0, #48	@ 0x30
 8003cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cc6:	4422      	add	r2, r4
 8003cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	e7c7      	b.n	8003c64 <_printf_common+0x58>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	4641      	mov	r1, r8
 8003cda:	4638      	mov	r0, r7
 8003cdc:	47c8      	blx	r9
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d0e6      	beq.n	8003cb0 <_printf_common+0xa4>
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	e7d9      	b.n	8003c9a <_printf_common+0x8e>
	...

08003ce8 <_printf_i>:
 8003ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cec:	7e0f      	ldrb	r7, [r1, #24]
 8003cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cf0:	2f78      	cmp	r7, #120	@ 0x78
 8003cf2:	4691      	mov	r9, r2
 8003cf4:	4680      	mov	r8, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	469a      	mov	sl, r3
 8003cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cfe:	d807      	bhi.n	8003d10 <_printf_i+0x28>
 8003d00:	2f62      	cmp	r7, #98	@ 0x62
 8003d02:	d80a      	bhi.n	8003d1a <_printf_i+0x32>
 8003d04:	2f00      	cmp	r7, #0
 8003d06:	f000 80d2 	beq.w	8003eae <_printf_i+0x1c6>
 8003d0a:	2f58      	cmp	r7, #88	@ 0x58
 8003d0c:	f000 80b9 	beq.w	8003e82 <_printf_i+0x19a>
 8003d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d18:	e03a      	b.n	8003d90 <_printf_i+0xa8>
 8003d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d1e:	2b15      	cmp	r3, #21
 8003d20:	d8f6      	bhi.n	8003d10 <_printf_i+0x28>
 8003d22:	a101      	add	r1, pc, #4	@ (adr r1, 8003d28 <_printf_i+0x40>)
 8003d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d28:	08003d81 	.word	0x08003d81
 8003d2c:	08003d95 	.word	0x08003d95
 8003d30:	08003d11 	.word	0x08003d11
 8003d34:	08003d11 	.word	0x08003d11
 8003d38:	08003d11 	.word	0x08003d11
 8003d3c:	08003d11 	.word	0x08003d11
 8003d40:	08003d95 	.word	0x08003d95
 8003d44:	08003d11 	.word	0x08003d11
 8003d48:	08003d11 	.word	0x08003d11
 8003d4c:	08003d11 	.word	0x08003d11
 8003d50:	08003d11 	.word	0x08003d11
 8003d54:	08003e95 	.word	0x08003e95
 8003d58:	08003dbf 	.word	0x08003dbf
 8003d5c:	08003e4f 	.word	0x08003e4f
 8003d60:	08003d11 	.word	0x08003d11
 8003d64:	08003d11 	.word	0x08003d11
 8003d68:	08003eb7 	.word	0x08003eb7
 8003d6c:	08003d11 	.word	0x08003d11
 8003d70:	08003dbf 	.word	0x08003dbf
 8003d74:	08003d11 	.word	0x08003d11
 8003d78:	08003d11 	.word	0x08003d11
 8003d7c:	08003e57 	.word	0x08003e57
 8003d80:	6833      	ldr	r3, [r6, #0]
 8003d82:	1d1a      	adds	r2, r3, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6032      	str	r2, [r6, #0]
 8003d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d90:	2301      	movs	r3, #1
 8003d92:	e09d      	b.n	8003ed0 <_printf_i+0x1e8>
 8003d94:	6833      	ldr	r3, [r6, #0]
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	1d19      	adds	r1, r3, #4
 8003d9a:	6031      	str	r1, [r6, #0]
 8003d9c:	0606      	lsls	r6, r0, #24
 8003d9e:	d501      	bpl.n	8003da4 <_printf_i+0xbc>
 8003da0:	681d      	ldr	r5, [r3, #0]
 8003da2:	e003      	b.n	8003dac <_printf_i+0xc4>
 8003da4:	0645      	lsls	r5, r0, #25
 8003da6:	d5fb      	bpl.n	8003da0 <_printf_i+0xb8>
 8003da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	da03      	bge.n	8003db8 <_printf_i+0xd0>
 8003db0:	232d      	movs	r3, #45	@ 0x2d
 8003db2:	426d      	negs	r5, r5
 8003db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db8:	4859      	ldr	r0, [pc, #356]	@ (8003f20 <_printf_i+0x238>)
 8003dba:	230a      	movs	r3, #10
 8003dbc:	e011      	b.n	8003de2 <_printf_i+0xfa>
 8003dbe:	6821      	ldr	r1, [r4, #0]
 8003dc0:	6833      	ldr	r3, [r6, #0]
 8003dc2:	0608      	lsls	r0, r1, #24
 8003dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dc8:	d402      	bmi.n	8003dd0 <_printf_i+0xe8>
 8003dca:	0649      	lsls	r1, r1, #25
 8003dcc:	bf48      	it	mi
 8003dce:	b2ad      	uxthmi	r5, r5
 8003dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dd2:	4853      	ldr	r0, [pc, #332]	@ (8003f20 <_printf_i+0x238>)
 8003dd4:	6033      	str	r3, [r6, #0]
 8003dd6:	bf14      	ite	ne
 8003dd8:	230a      	movne	r3, #10
 8003dda:	2308      	moveq	r3, #8
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003de2:	6866      	ldr	r6, [r4, #4]
 8003de4:	60a6      	str	r6, [r4, #8]
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	bfa2      	ittt	ge
 8003dea:	6821      	ldrge	r1, [r4, #0]
 8003dec:	f021 0104 	bicge.w	r1, r1, #4
 8003df0:	6021      	strge	r1, [r4, #0]
 8003df2:	b90d      	cbnz	r5, 8003df8 <_printf_i+0x110>
 8003df4:	2e00      	cmp	r6, #0
 8003df6:	d04b      	beq.n	8003e90 <_printf_i+0x1a8>
 8003df8:	4616      	mov	r6, r2
 8003dfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dfe:	fb03 5711 	mls	r7, r3, r1, r5
 8003e02:	5dc7      	ldrb	r7, [r0, r7]
 8003e04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e08:	462f      	mov	r7, r5
 8003e0a:	42bb      	cmp	r3, r7
 8003e0c:	460d      	mov	r5, r1
 8003e0e:	d9f4      	bls.n	8003dfa <_printf_i+0x112>
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d10b      	bne.n	8003e2c <_printf_i+0x144>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	07df      	lsls	r7, r3, #31
 8003e18:	d508      	bpl.n	8003e2c <_printf_i+0x144>
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	6861      	ldr	r1, [r4, #4]
 8003e1e:	4299      	cmp	r1, r3
 8003e20:	bfde      	ittt	le
 8003e22:	2330      	movle	r3, #48	@ 0x30
 8003e24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e28:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003e2c:	1b92      	subs	r2, r2, r6
 8003e2e:	6122      	str	r2, [r4, #16]
 8003e30:	f8cd a000 	str.w	sl, [sp]
 8003e34:	464b      	mov	r3, r9
 8003e36:	aa03      	add	r2, sp, #12
 8003e38:	4621      	mov	r1, r4
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	f7ff fee6 	bl	8003c0c <_printf_common>
 8003e40:	3001      	adds	r0, #1
 8003e42:	d14a      	bne.n	8003eda <_printf_i+0x1f2>
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e48:	b004      	add	sp, #16
 8003e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	f043 0320 	orr.w	r3, r3, #32
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	4833      	ldr	r0, [pc, #204]	@ (8003f24 <_printf_i+0x23c>)
 8003e58:	2778      	movs	r7, #120	@ 0x78
 8003e5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	6831      	ldr	r1, [r6, #0]
 8003e62:	061f      	lsls	r7, r3, #24
 8003e64:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e68:	d402      	bmi.n	8003e70 <_printf_i+0x188>
 8003e6a:	065f      	lsls	r7, r3, #25
 8003e6c:	bf48      	it	mi
 8003e6e:	b2ad      	uxthmi	r5, r5
 8003e70:	6031      	str	r1, [r6, #0]
 8003e72:	07d9      	lsls	r1, r3, #31
 8003e74:	bf44      	itt	mi
 8003e76:	f043 0320 	orrmi.w	r3, r3, #32
 8003e7a:	6023      	strmi	r3, [r4, #0]
 8003e7c:	b11d      	cbz	r5, 8003e86 <_printf_i+0x19e>
 8003e7e:	2310      	movs	r3, #16
 8003e80:	e7ac      	b.n	8003ddc <_printf_i+0xf4>
 8003e82:	4827      	ldr	r0, [pc, #156]	@ (8003f20 <_printf_i+0x238>)
 8003e84:	e7e9      	b.n	8003e5a <_printf_i+0x172>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f023 0320 	bic.w	r3, r3, #32
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	e7f6      	b.n	8003e7e <_printf_i+0x196>
 8003e90:	4616      	mov	r6, r2
 8003e92:	e7bd      	b.n	8003e10 <_printf_i+0x128>
 8003e94:	6833      	ldr	r3, [r6, #0]
 8003e96:	6825      	ldr	r5, [r4, #0]
 8003e98:	6961      	ldr	r1, [r4, #20]
 8003e9a:	1d18      	adds	r0, r3, #4
 8003e9c:	6030      	str	r0, [r6, #0]
 8003e9e:	062e      	lsls	r6, r5, #24
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	d501      	bpl.n	8003ea8 <_printf_i+0x1c0>
 8003ea4:	6019      	str	r1, [r3, #0]
 8003ea6:	e002      	b.n	8003eae <_printf_i+0x1c6>
 8003ea8:	0668      	lsls	r0, r5, #25
 8003eaa:	d5fb      	bpl.n	8003ea4 <_printf_i+0x1bc>
 8003eac:	8019      	strh	r1, [r3, #0]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6123      	str	r3, [r4, #16]
 8003eb2:	4616      	mov	r6, r2
 8003eb4:	e7bc      	b.n	8003e30 <_printf_i+0x148>
 8003eb6:	6833      	ldr	r3, [r6, #0]
 8003eb8:	1d1a      	adds	r2, r3, #4
 8003eba:	6032      	str	r2, [r6, #0]
 8003ebc:	681e      	ldr	r6, [r3, #0]
 8003ebe:	6862      	ldr	r2, [r4, #4]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	f7fc f9ac 	bl	8000220 <memchr>
 8003ec8:	b108      	cbz	r0, 8003ece <_printf_i+0x1e6>
 8003eca:	1b80      	subs	r0, r0, r6
 8003ecc:	6060      	str	r0, [r4, #4]
 8003ece:	6863      	ldr	r3, [r4, #4]
 8003ed0:	6123      	str	r3, [r4, #16]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ed8:	e7aa      	b.n	8003e30 <_printf_i+0x148>
 8003eda:	6923      	ldr	r3, [r4, #16]
 8003edc:	4632      	mov	r2, r6
 8003ede:	4649      	mov	r1, r9
 8003ee0:	4640      	mov	r0, r8
 8003ee2:	47d0      	blx	sl
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d0ad      	beq.n	8003e44 <_printf_i+0x15c>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	079b      	lsls	r3, r3, #30
 8003eec:	d413      	bmi.n	8003f16 <_printf_i+0x22e>
 8003eee:	68e0      	ldr	r0, [r4, #12]
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	4298      	cmp	r0, r3
 8003ef4:	bfb8      	it	lt
 8003ef6:	4618      	movlt	r0, r3
 8003ef8:	e7a6      	b.n	8003e48 <_printf_i+0x160>
 8003efa:	2301      	movs	r3, #1
 8003efc:	4632      	mov	r2, r6
 8003efe:	4649      	mov	r1, r9
 8003f00:	4640      	mov	r0, r8
 8003f02:	47d0      	blx	sl
 8003f04:	3001      	adds	r0, #1
 8003f06:	d09d      	beq.n	8003e44 <_printf_i+0x15c>
 8003f08:	3501      	adds	r5, #1
 8003f0a:	68e3      	ldr	r3, [r4, #12]
 8003f0c:	9903      	ldr	r1, [sp, #12]
 8003f0e:	1a5b      	subs	r3, r3, r1
 8003f10:	42ab      	cmp	r3, r5
 8003f12:	dcf2      	bgt.n	8003efa <_printf_i+0x212>
 8003f14:	e7eb      	b.n	8003eee <_printf_i+0x206>
 8003f16:	2500      	movs	r5, #0
 8003f18:	f104 0619 	add.w	r6, r4, #25
 8003f1c:	e7f5      	b.n	8003f0a <_printf_i+0x222>
 8003f1e:	bf00      	nop
 8003f20:	0800429a 	.word	0x0800429a
 8003f24:	080042ab 	.word	0x080042ab

08003f28 <__malloc_lock>:
 8003f28:	4801      	ldr	r0, [pc, #4]	@ (8003f30 <__malloc_lock+0x8>)
 8003f2a:	f7ff bc73 	b.w	8003814 <__retarget_lock_acquire_recursive>
 8003f2e:	bf00      	nop
 8003f30:	20000340 	.word	0x20000340

08003f34 <__malloc_unlock>:
 8003f34:	4801      	ldr	r0, [pc, #4]	@ (8003f3c <__malloc_unlock+0x8>)
 8003f36:	f7ff bc6e 	b.w	8003816 <__retarget_lock_release_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	20000340 	.word	0x20000340

08003f40 <_realloc_r>:
 8003f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f44:	4680      	mov	r8, r0
 8003f46:	4615      	mov	r5, r2
 8003f48:	460c      	mov	r4, r1
 8003f4a:	b921      	cbnz	r1, 8003f56 <_realloc_r+0x16>
 8003f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f50:	4611      	mov	r1, r2
 8003f52:	f7ff bddb 	b.w	8003b0c <_malloc_r>
 8003f56:	b92a      	cbnz	r2, 8003f64 <_realloc_r+0x24>
 8003f58:	f000 f858 	bl	800400c <_free_r>
 8003f5c:	2400      	movs	r4, #0
 8003f5e:	4620      	mov	r0, r4
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f64:	f000 f89c 	bl	80040a0 <_malloc_usable_size_r>
 8003f68:	4285      	cmp	r5, r0
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	d802      	bhi.n	8003f74 <_realloc_r+0x34>
 8003f6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f72:	d8f4      	bhi.n	8003f5e <_realloc_r+0x1e>
 8003f74:	4629      	mov	r1, r5
 8003f76:	4640      	mov	r0, r8
 8003f78:	f7ff fdc8 	bl	8003b0c <_malloc_r>
 8003f7c:	4607      	mov	r7, r0
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d0ec      	beq.n	8003f5c <_realloc_r+0x1c>
 8003f82:	42b5      	cmp	r5, r6
 8003f84:	462a      	mov	r2, r5
 8003f86:	4621      	mov	r1, r4
 8003f88:	bf28      	it	cs
 8003f8a:	4632      	movcs	r2, r6
 8003f8c:	f000 f830 	bl	8003ff0 <memcpy>
 8003f90:	4621      	mov	r1, r4
 8003f92:	4640      	mov	r0, r8
 8003f94:	f000 f83a 	bl	800400c <_free_r>
 8003f98:	463c      	mov	r4, r7
 8003f9a:	e7e0      	b.n	8003f5e <_realloc_r+0x1e>

08003f9c <memmove>:
 8003f9c:	4288      	cmp	r0, r1
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	eb01 0402 	add.w	r4, r1, r2
 8003fa4:	d902      	bls.n	8003fac <memmove+0x10>
 8003fa6:	4284      	cmp	r4, r0
 8003fa8:	4623      	mov	r3, r4
 8003faa:	d807      	bhi.n	8003fbc <memmove+0x20>
 8003fac:	1e43      	subs	r3, r0, #1
 8003fae:	42a1      	cmp	r1, r4
 8003fb0:	d008      	beq.n	8003fc4 <memmove+0x28>
 8003fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fba:	e7f8      	b.n	8003fae <memmove+0x12>
 8003fbc:	4402      	add	r2, r0
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	428a      	cmp	r2, r1
 8003fc2:	d100      	bne.n	8003fc6 <memmove+0x2a>
 8003fc4:	bd10      	pop	{r4, pc}
 8003fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fce:	e7f7      	b.n	8003fc0 <memmove+0x24>

08003fd0 <_sbrk_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4d06      	ldr	r5, [pc, #24]	@ (8003fec <_sbrk_r+0x1c>)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	602b      	str	r3, [r5, #0]
 8003fdc:	f7fc fc5a 	bl	8000894 <_sbrk>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_sbrk_r+0x1a>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_sbrk_r+0x1a>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	2000034c 	.word	0x2000034c

08003ff0 <memcpy>:
 8003ff0:	440a      	add	r2, r1
 8003ff2:	4291      	cmp	r1, r2
 8003ff4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003ff8:	d100      	bne.n	8003ffc <memcpy+0xc>
 8003ffa:	4770      	bx	lr
 8003ffc:	b510      	push	{r4, lr}
 8003ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004006:	4291      	cmp	r1, r2
 8004008:	d1f9      	bne.n	8003ffe <memcpy+0xe>
 800400a:	bd10      	pop	{r4, pc}

0800400c <_free_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4605      	mov	r5, r0
 8004010:	2900      	cmp	r1, #0
 8004012:	d041      	beq.n	8004098 <_free_r+0x8c>
 8004014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004018:	1f0c      	subs	r4, r1, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	bfb8      	it	lt
 800401e:	18e4      	addlt	r4, r4, r3
 8004020:	f7ff ff82 	bl	8003f28 <__malloc_lock>
 8004024:	4a1d      	ldr	r2, [pc, #116]	@ (800409c <_free_r+0x90>)
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	b933      	cbnz	r3, 8004038 <_free_r+0x2c>
 800402a:	6063      	str	r3, [r4, #4]
 800402c:	6014      	str	r4, [r2, #0]
 800402e:	4628      	mov	r0, r5
 8004030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004034:	f7ff bf7e 	b.w	8003f34 <__malloc_unlock>
 8004038:	42a3      	cmp	r3, r4
 800403a:	d908      	bls.n	800404e <_free_r+0x42>
 800403c:	6820      	ldr	r0, [r4, #0]
 800403e:	1821      	adds	r1, r4, r0
 8004040:	428b      	cmp	r3, r1
 8004042:	bf01      	itttt	eq
 8004044:	6819      	ldreq	r1, [r3, #0]
 8004046:	685b      	ldreq	r3, [r3, #4]
 8004048:	1809      	addeq	r1, r1, r0
 800404a:	6021      	streq	r1, [r4, #0]
 800404c:	e7ed      	b.n	800402a <_free_r+0x1e>
 800404e:	461a      	mov	r2, r3
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	b10b      	cbz	r3, 8004058 <_free_r+0x4c>
 8004054:	42a3      	cmp	r3, r4
 8004056:	d9fa      	bls.n	800404e <_free_r+0x42>
 8004058:	6811      	ldr	r1, [r2, #0]
 800405a:	1850      	adds	r0, r2, r1
 800405c:	42a0      	cmp	r0, r4
 800405e:	d10b      	bne.n	8004078 <_free_r+0x6c>
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	4401      	add	r1, r0
 8004064:	1850      	adds	r0, r2, r1
 8004066:	4283      	cmp	r3, r0
 8004068:	6011      	str	r1, [r2, #0]
 800406a:	d1e0      	bne.n	800402e <_free_r+0x22>
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	6053      	str	r3, [r2, #4]
 8004072:	4408      	add	r0, r1
 8004074:	6010      	str	r0, [r2, #0]
 8004076:	e7da      	b.n	800402e <_free_r+0x22>
 8004078:	d902      	bls.n	8004080 <_free_r+0x74>
 800407a:	230c      	movs	r3, #12
 800407c:	602b      	str	r3, [r5, #0]
 800407e:	e7d6      	b.n	800402e <_free_r+0x22>
 8004080:	6820      	ldr	r0, [r4, #0]
 8004082:	1821      	adds	r1, r4, r0
 8004084:	428b      	cmp	r3, r1
 8004086:	bf04      	itt	eq
 8004088:	6819      	ldreq	r1, [r3, #0]
 800408a:	685b      	ldreq	r3, [r3, #4]
 800408c:	6063      	str	r3, [r4, #4]
 800408e:	bf04      	itt	eq
 8004090:	1809      	addeq	r1, r1, r0
 8004092:	6021      	streq	r1, [r4, #0]
 8004094:	6054      	str	r4, [r2, #4]
 8004096:	e7ca      	b.n	800402e <_free_r+0x22>
 8004098:	bd38      	pop	{r3, r4, r5, pc}
 800409a:	bf00      	nop
 800409c:	20000348 	.word	0x20000348

080040a0 <_malloc_usable_size_r>:
 80040a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a4:	1f18      	subs	r0, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bfbc      	itt	lt
 80040aa:	580b      	ldrlt	r3, [r1, r0]
 80040ac:	18c0      	addlt	r0, r0, r3
 80040ae:	4770      	bx	lr

080040b0 <_init>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr

080040bc <_fini>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	bf00      	nop
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr
