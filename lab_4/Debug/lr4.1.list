
lr4.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab2c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800ace0  0800ace0  0000bce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1d4  0800b1d4  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1d4  0800b1d4  0000c1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1dc  0800b1dc  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1dc  0800b1dc  0000c1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1e0  0800b1e0  0000c1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800b1e4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1dc  2**0
                  CONTENTS
 10 .bss          00000270  200001dc  200001dc  0000d1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000044c  2000044c  0000d1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122ee  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e07  00000000  00000000  0001f4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00022308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000daa  00000000  00000000  00023490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256df  00000000  00000000  0002423a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001670a  00000000  00000000  00049919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dce97  00000000  00000000  00060023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ceba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ffc  00000000  00000000  0013cf00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00142efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800acc4 	.word	0x0800acc4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800acc4 	.word	0x0800acc4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <MX_USART6_UART_Init+0x4c>)
 800100a:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <MX_USART6_UART_Init+0x50>)
 800100c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57200;
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <MX_USART6_UART_Init+0x4c>)
 8001010:	f64d 7270 	movw	r2, #57200	@ 0xdf70
 8001014:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_USART6_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_USART6_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <MX_USART6_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_USART6_UART_Init+0x4c>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <MX_USART6_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_USART6_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_USART6_UART_Init+0x4c>)
 800103c:	f003 feda 	bl	8004df4 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001046:	f000 fd63 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001f8 	.word	0x200001f8
 8001054:	40011400 	.word	0x40011400

08001058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1d      	ldr	r2, [pc, #116]	@ (80010ec <HAL_UART_MspInit+0x94>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d133      	bne.n	80010e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <HAL_UART_MspInit+0x98>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <HAL_UART_MspInit+0x98>)
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	6453      	str	r3, [r2, #68]	@ 0x44
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <HAL_UART_MspInit+0x98>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_UART_MspInit+0x98>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a14      	ldr	r2, [pc, #80]	@ (80010f0 <HAL_UART_MspInit+0x98>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_UART_MspInit+0x98>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b2:	23c0      	movs	r3, #192	@ 0xc0
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010c2:	2308      	movs	r3, #8
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4809      	ldr	r0, [pc, #36]	@ (80010f4 <HAL_UART_MspInit+0x9c>)
 80010ce:	f001 fa21 	bl	8002514 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2047      	movs	r0, #71	@ 0x47
 80010d8:	f001 f953 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80010dc:	2047      	movs	r0, #71	@ 0x47
 80010de:	f001 f96c 	bl	80023ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40011400 	.word	0x40011400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020800 	.word	0x40020800

080010f8 <APP_UART_SendString>:
        // 2) вызываем ProcessChar
        ProcessChar(ch);
    }
}
void APP_UART_SendString(const char *str)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)str, strlen(str), 100);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff f8c5 	bl	8000290 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29a      	uxth	r2, r3
 800110a:	2364      	movs	r3, #100	@ 0x64
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4803      	ldr	r0, [pc, #12]	@ (800111c <APP_UART_SendString+0x24>)
 8001110:	f003 fec0 	bl	8004e94 <HAL_UART_Transmit>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001f8 	.word	0x200001f8

08001120 <calcNoteFreq>:
 * Формула:
 * freq = baseFreq[noteIndex] * 2^(octave - 5)
 * т.к. "первая октава" здесь соответствует octave=5 в классической нотации.
 */
static float calcNoteFreq(uint8_t noteIndex, uint8_t octave)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	460a      	mov	r2, r1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	4613      	mov	r3, r2
 800112e:	71bb      	strb	r3, [r7, #6]
    // octave=5 => множитель 2^0 = 1
    // octave=4 => 2^-1 = 0.5
    // octave=1 => 2^-4 = 1/16
    float mult = powf(2.0f, (float)(octave - 5));
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	3b05      	subs	r3, #5
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	eef0 0a67 	vmov.f32	s1, s15
 8001140:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001144:	f009 f9f6 	bl	800a534 <powf>
 8001148:	ed87 0a03 	vstr	s0, [r7, #12]
    return baseFreq[noteIndex] * mult;
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4a07      	ldr	r2, [pc, #28]	@ (800116c <calcNoteFreq+0x4c>)
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	ed93 7a00 	vldr	s14, [r3]
 8001158:	edd7 7a03 	vldr	s15, [r7, #12]
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	0800ad50 	.word	0x0800ad50

08001170 <startPWM>:

// ========== Функции управления PWM (TIM3_CH1) ==========

static void startPWM(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    // Запускаем PWM на канале 1
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001174:	2100      	movs	r1, #0
 8001176:	4802      	ldr	r0, [pc, #8]	@ (8001180 <startPWM+0x10>)
 8001178:	f003 f8f2 	bl	8004360 <HAL_TIM_PWM_Start>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200002b4 	.word	0x200002b4

08001184 <stopPWM>:

static void stopPWM(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    // Останавливаем
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001188:	2100      	movs	r1, #0
 800118a:	4802      	ldr	r0, [pc, #8]	@ (8001194 <stopPWM+0x10>)
 800118c:	f003 f9b0 	bl	80044f0 <HAL_TIM_PWM_Stop>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200002b4 	.word	0x200002b4

08001198 <BEEP_SetFrequency>:
 *   - оставим PSC = 0
 *   - ARR = TimerCLK / freq - 1
 * DutyCycle=50% => CCR1 = ARR/2
 */
void BEEP_SetFrequency(float freq)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (freq < 1.0f) freq = 1.0f;
 80011a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d502      	bpl.n	80011ba <BEEP_SetFrequency+0x22>
 80011b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011b8:	607b      	str	r3, [r7, #4]

    // Тактирование таймера (TIM3) = 120 MHz (при APB1 x2)
    float timerClock = 120e6f;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <BEEP_SetFrequency+0x8c>)
 80011bc:	60bb      	str	r3, [r7, #8]
    uint32_t period = (uint32_t)((timerClock / freq) + 0.5f) - 1;
 80011be:	edd7 6a02 	vldr	s13, [r7, #8]
 80011c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80011ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d6:	ee17 3a90 	vmov	r3, s15
 80011da:	3b01      	subs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
    if (period < 100) period = 100;     // ограничимся, чтобы не было слишком высокого звука
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b63      	cmp	r3, #99	@ 0x63
 80011e2:	d801      	bhi.n	80011e8 <BEEP_SetFrequency+0x50>
 80011e4:	2364      	movs	r3, #100	@ 0x64
 80011e6:	60fb      	str	r3, [r7, #12]
    if (period > 0xFFFF) period = 0xFFFF; // нельзя превысить 16 бит
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ee:	d302      	bcc.n	80011f6 <BEEP_SetFrequency+0x5e>
 80011f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011f4:	60fb      	str	r3, [r7, #12]

    // Обновляем регистры
    htim1.Instance->PSC = 0;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <BEEP_SetFrequency+0x90>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	@ 0x28
    htim1.Instance->ARR = period;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <BEEP_SetFrequency+0x90>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	62da      	str	r2, [r3, #44]	@ 0x2c
    // 50% duty:
    htim1.Instance->CCR1 = period/2;
 8001206:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <BEEP_SetFrequency+0x90>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	0852      	lsrs	r2, r2, #1
 800120e:	635a      	str	r2, [r3, #52]	@ 0x34
    htim1.Instance->EGR = TIM_EGR_UG; // принудительно обновим
 8001210:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <BEEP_SetFrequency+0x90>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2201      	movs	r2, #1
 8001216:	615a      	str	r2, [r3, #20]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	4ce4e1c0 	.word	0x4ce4e1c0
 8001228:	200002b4 	.word	0x200002b4

0800122c <BEEP_Init>:

// ========== Реализация интерфейса из beep.h ==========

void BEEP_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
    // Предполагаем, что TIM3 уже проинициализирован в MX_TIM_Init().
    // Сразу можем выключить, на всякий случай
    stopPWM();
 8001230:	f7ff ffa8 	bl	8001184 <stopPWM>
    beepActive = 0;
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <BEEP_Init+0x28>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
    playSequence = 0;
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <BEEP_Init+0x2c>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
    currentOctave = 1;
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <BEEP_Init+0x30>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
    noteDuration = 1.0f;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <BEEP_Init+0x34>)
 8001248:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000240 	.word	0x20000240
 8001258:	20000248 	.word	0x20000248
 800125c:	20000000 	.word	0x20000000
 8001260:	20000004 	.word	0x20000004

08001264 <BEEP_Update>:
 * Вызываем из main() постоянно.
 * Проверяем, не пора ли остановить текущую ноту,
 * либо перейти к следующей (если playSequence=1).
 */
void BEEP_Update(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 800126a:	f000 ff7f 	bl	800216c <HAL_GetTick>
 800126e:	6078      	str	r0, [r7, #4]
    if (beepActive)
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <BEEP_Update+0x68>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d024      	beq.n	80012c2 <BEEP_Update+0x5e>
    {
        if (now >= beepEndTimeMs)
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <BEEP_Update+0x6c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	d31f      	bcc.n	80012c2 <BEEP_Update+0x5e>
        {
            // Конец ноты
            BEEP_Off();
 8001282:	f000 f831 	bl	80012e8 <BEEP_Off>
            beepActive = 0;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <BEEP_Update+0x68>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]

            // Если была последовательность, переходим к следующей
            if (playSequence)
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <BEEP_Update+0x70>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d016      	beq.n	80012c2 <BEEP_Update+0x5e>
            {
                sequenceIndex++;
 8001294:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <BEEP_Update+0x74>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <BEEP_Update+0x74>)
 800129e:	701a      	strb	r2, [r3, #0]
                if (sequenceIndex < SEQUENCE_LEN)
 80012a0:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <BEEP_Update+0x74>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2207      	movs	r2, #7
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d205      	bcs.n	80012b6 <BEEP_Update+0x52>
                {
                    // играем следующую
                    BEEP_PlayNoteOnce(sequenceIndex);
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <BEEP_Update+0x74>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f87e 	bl	80013b0 <BEEP_PlayNoteOnce>
                    sequenceIndex = 0;
                }
            }
        }
    }
}
 80012b4:	e005      	b.n	80012c2 <BEEP_Update+0x5e>
                    playSequence = 0;
 80012b6:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <BEEP_Update+0x70>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
                    sequenceIndex = 0;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <BEEP_Update+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000240 	.word	0x20000240
 80012d0:	20000244 	.word	0x20000244
 80012d4:	20000248 	.word	0x20000248
 80012d8:	20000249 	.word	0x20000249

080012dc <BEEP_On>:

// Включить PWM
void BEEP_On(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
    startPWM();
 80012e0:	f7ff ff46 	bl	8001170 <startPWM>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <BEEP_Off>:

// Выключить PWM
void BEEP_Off(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
    stopPWM();
 80012ec:	f7ff ff4a 	bl	8001184 <stopPWM>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <BEEP_ChangeDuration>:

/* Изменение длительности */
void BEEP_ChangeDuration(float dSec)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float newDur = noteDuration + dSec;
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <BEEP_ChangeDuration+0x5c>)
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	ed97 7a01 	vldr	s14, [r7, #4]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	edc7 7a03 	vstr	s15, [r7, #12]
    if (newDur < 0.1f) newDur = 0.1f;
 8001310:	edd7 7a03 	vldr	s15, [r7, #12]
 8001314:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001354 <BEEP_ChangeDuration+0x60>
 8001318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	d501      	bpl.n	8001326 <BEEP_ChangeDuration+0x32>
 8001322:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <BEEP_ChangeDuration+0x64>)
 8001324:	60fb      	str	r3, [r7, #12]
    if (newDur > 5.0f) newDur = 5.0f;
 8001326:	edd7 7a03 	vldr	s15, [r7, #12]
 800132a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800132e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	dd01      	ble.n	800133c <BEEP_ChangeDuration+0x48>
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <BEEP_ChangeDuration+0x68>)
 800133a:	60fb      	str	r3, [r7, #12]
    noteDuration = newDur;
 800133c:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <BEEP_ChangeDuration+0x5c>)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6013      	str	r3, [r2, #0]
}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000004 	.word	0x20000004
 8001354:	3dcccccd 	.word	0x3dcccccd
 8001358:	3dcccccd 	.word	0x3dcccccd
 800135c:	40a00000 	.word	0x40a00000

08001360 <BEEP_IncreaseOctave>:
{
    return noteDuration;
}

void BEEP_IncreaseOctave(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
    if (currentOctave < 5) currentOctave++;
 8001364:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <BEEP_IncreaseOctave+0x24>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d805      	bhi.n	8001378 <BEEP_IncreaseOctave+0x18>
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <BEEP_IncreaseOctave+0x24>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3301      	adds	r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <BEEP_IncreaseOctave+0x24>)
 8001376:	701a      	strb	r2, [r3, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000

08001388 <BEEP_DecreaseOctave>:

void BEEP_DecreaseOctave(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
    if (currentOctave > 1) currentOctave--;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <BEEP_DecreaseOctave+0x24>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d905      	bls.n	80013a0 <BEEP_DecreaseOctave+0x18>
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <BEEP_DecreaseOctave+0x24>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <BEEP_DecreaseOctave+0x24>)
 800139e:	701a      	strb	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000

080013b0 <BEEP_PlayNoteOnce>:
/*
 * Проиграть одиночную ноту (noteIndex) - без блокировок.
 * Запускаем PWM на нужной freq, запоминаем время окончания.
 */
void BEEP_PlayNoteOnce(uint8_t noteIndex)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
    // Остановим, если что-то уже звучит
    BEEP_Off();
 80013ba:	f7ff ff95 	bl	80012e8 <BEEP_Off>
    beepActive = 1;
 80013be:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <BEEP_PlayNoteOnce+0x68>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]

    float freq = calcNoteFreq(noteIndex, currentOctave);
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <BEEP_PlayNoteOnce+0x6c>)
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fea7 	bl	8001120 <calcNoteFreq>
 80013d2:	ed87 0a03 	vstr	s0, [r7, #12]
    BEEP_SetFrequency(freq);
 80013d6:	ed97 0a03 	vldr	s0, [r7, #12]
 80013da:	f7ff fedd 	bl	8001198 <BEEP_SetFrequency>
    BEEP_On();
 80013de:	f7ff ff7d 	bl	80012dc <BEEP_On>

    uint32_t durMs = (uint32_t)(noteDuration * 1000.0f + 0.5f);
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <BEEP_PlayNoteOnce+0x70>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001424 <BEEP_PlayNoteOnce+0x74>
 80013ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80013f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013fc:	ee17 3a90 	vmov	r3, s15
 8001400:	60bb      	str	r3, [r7, #8]
    beepEndTimeMs = HAL_GetTick() + durMs;
 8001402:	f000 feb3 	bl	800216c <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <BEEP_PlayNoteOnce+0x78>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000240 	.word	0x20000240
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004
 8001424:	447a0000 	.word	0x447a0000
 8001428:	20000244 	.word	0x20000244

0800142c <BEEP_PlayAllNotesInOctave>:
 * Запускает воспроизведение всех нот 0..6 (до..си) подряд
 * текущей октавы, каждая noteDuration.
 * Запускаем первую ноту, а дальше BEEP_Update() само переключит.
 */
void BEEP_PlayAllNotesInOctave(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
    // Сбросим, если уже что-то играется
    beepActive = 0;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <BEEP_PlayAllNotesInOctave+0x20>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
    playSequence = 1;
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <BEEP_PlayAllNotesInOctave+0x24>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
    sequenceIndex = 0;
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <BEEP_PlayAllNotesInOctave+0x28>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]

    // Запускаем первую
    BEEP_PlayNoteOnce(0);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff ffb4 	bl	80013b0 <BEEP_PlayNoteOnce>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000240 	.word	0x20000240
 8001450:	20000248 	.word	0x20000248
 8001454:	20000249 	.word	0x20000249

08001458 <BEEP_HandleKey>:

void BEEP_HandleKey(uint8_t key)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
    switch (key)
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	3b01      	subs	r3, #1
 8001466:	2b0b      	cmp	r3, #11
 8001468:	d849      	bhi.n	80014fe <BEEP_HandleKey+0xa6>
 800146a:	a201      	add	r2, pc, #4	@ (adr r2, 8001470 <BEEP_HandleKey+0x18>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	080014a1 	.word	0x080014a1
 8001474:	080014a9 	.word	0x080014a9
 8001478:	080014b1 	.word	0x080014b1
 800147c:	080014b9 	.word	0x080014b9
 8001480:	080014c1 	.word	0x080014c1
 8001484:	080014c9 	.word	0x080014c9
 8001488:	080014d1 	.word	0x080014d1
 800148c:	080014d9 	.word	0x080014d9
 8001490:	080014df 	.word	0x080014df
 8001494:	080014e5 	.word	0x080014e5
 8001498:	080014ef 	.word	0x080014ef
 800149c:	080014f9 	.word	0x080014f9
    {
    case 1: // "до"
        BEEP_PlayNoteOnce(0);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff ff85 	bl	80013b0 <BEEP_PlayNoteOnce>
        break;
 80014a6:	e02b      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 2: // "ре"
        BEEP_PlayNoteOnce(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff ff81 	bl	80013b0 <BEEP_PlayNoteOnce>
        break;
 80014ae:	e027      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 3: // "ми"
        BEEP_PlayNoteOnce(2);
 80014b0:	2002      	movs	r0, #2
 80014b2:	f7ff ff7d 	bl	80013b0 <BEEP_PlayNoteOnce>
        break;
 80014b6:	e023      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 4: // "фа"
        BEEP_PlayNoteOnce(3);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f7ff ff79 	bl	80013b0 <BEEP_PlayNoteOnce>
        break;
 80014be:	e01f      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 5: // "соль"
        BEEP_PlayNoteOnce(4);
 80014c0:	2004      	movs	r0, #4
 80014c2:	f7ff ff75 	bl	80013b0 <BEEP_PlayNoteOnce>
        break;
 80014c6:	e01b      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 6: // "ля"
        BEEP_PlayNoteOnce(5);
 80014c8:	2005      	movs	r0, #5
 80014ca:	f7ff ff71 	bl	80013b0 <BEEP_PlayNoteOnce>
        break;
 80014ce:	e017      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 7: // "си"
        BEEP_PlayNoteOnce(6);
 80014d0:	2006      	movs	r0, #6
 80014d2:	f7ff ff6d 	bl	80013b0 <BEEP_PlayNoteOnce>
        break;
 80014d6:	e013      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 8: // octave++
        BEEP_IncreaseOctave();
 80014d8:	f7ff ff42 	bl	8001360 <BEEP_IncreaseOctave>
        break;
 80014dc:	e010      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 9: // octave--
        BEEP_DecreaseOctave();
 80014de:	f7ff ff53 	bl	8001388 <BEEP_DecreaseOctave>
        break;
 80014e2:	e00d      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 10: // duration++
        BEEP_ChangeDuration(+0.1f);
 80014e4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001508 <BEEP_HandleKey+0xb0>
 80014e8:	f7ff ff04 	bl	80012f4 <BEEP_ChangeDuration>
        break;
 80014ec:	e008      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 11: // duration--
        BEEP_ChangeDuration(-0.1f);
 80014ee:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800150c <BEEP_HandleKey+0xb4>
 80014f2:	f7ff feff 	bl	80012f4 <BEEP_ChangeDuration>
        break;
 80014f6:	e003      	b.n	8001500 <BEEP_HandleKey+0xa8>
    case 12: // playAll
        BEEP_PlayAllNotesInOctave();
 80014f8:	f7ff ff98 	bl	800142c <BEEP_PlayAllNotesInOctave>
        break;
 80014fc:	e000      	b.n	8001500 <BEEP_HandleKey+0xa8>
    default:
        // ignore
        break;
 80014fe:	bf00      	nop
    }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	3dcccccd 	.word	0x3dcccccd
 800150c:	bdcccccd 	.word	0xbdcccccd

08001510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	@ 0x30
 8001514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <MX_GPIO_Init+0x10c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a3b      	ldr	r2, [pc, #236]	@ (800161c <MX_GPIO_Init+0x10c>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b39      	ldr	r3, [pc, #228]	@ (800161c <MX_GPIO_Init+0x10c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	4b35      	ldr	r3, [pc, #212]	@ (800161c <MX_GPIO_Init+0x10c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a34      	ldr	r2, [pc, #208]	@ (800161c <MX_GPIO_Init+0x10c>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b32      	ldr	r3, [pc, #200]	@ (800161c <MX_GPIO_Init+0x10c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <MX_GPIO_Init+0x10c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a2d      	ldr	r2, [pc, #180]	@ (800161c <MX_GPIO_Init+0x10c>)
 8001568:	f043 0310 	orr.w	r3, r3, #16
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <MX_GPIO_Init+0x10c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b27      	ldr	r3, [pc, #156]	@ (800161c <MX_GPIO_Init+0x10c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a26      	ldr	r2, [pc, #152]	@ (800161c <MX_GPIO_Init+0x10c>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b24      	ldr	r3, [pc, #144]	@ (800161c <MX_GPIO_Init+0x10c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b20      	ldr	r3, [pc, #128]	@ (800161c <MX_GPIO_Init+0x10c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a1f      	ldr	r2, [pc, #124]	@ (800161c <MX_GPIO_Init+0x10c>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <MX_GPIO_Init+0x10c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b19      	ldr	r3, [pc, #100]	@ (800161c <MX_GPIO_Init+0x10c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a18      	ldr	r2, [pc, #96]	@ (800161c <MX_GPIO_Init+0x10c>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b16      	ldr	r3, [pc, #88]	@ (800161c <MX_GPIO_Init+0x10c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80015d4:	4812      	ldr	r0, [pc, #72]	@ (8001620 <MX_GPIO_Init+0x110>)
 80015d6:	f001 f961 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_BUTTON_Pin;
 80015da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MODE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	@ (8001624 <MX_GPIO_Init+0x114>)
 80015f0:	f000 ff90 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015f4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4804      	ldr	r0, [pc, #16]	@ (8001620 <MX_GPIO_Init+0x110>)
 800160e:	f000 ff81 	bl	8002514 <HAL_GPIO_Init>

}
 8001612:	bf00      	nop
 8001614:	3730      	adds	r7, #48	@ 0x30
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40020800 	.word	0x40020800

08001628 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <MX_I2C1_Init+0x74>)
 800162e:	4a1c      	ldr	r2, [pc, #112]	@ (80016a0 <MX_I2C1_Init+0x78>)
 8001630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_I2C1_Init+0x74>)
 8001634:	4a1b      	ldr	r2, [pc, #108]	@ (80016a4 <MX_I2C1_Init+0x7c>)
 8001636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001638:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800163e:	4b17      	ldr	r3, [pc, #92]	@ (800169c <MX_I2C1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001644:	4b15      	ldr	r3, [pc, #84]	@ (800169c <MX_I2C1_Init+0x74>)
 8001646:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800164a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <MX_I2C1_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <MX_I2C1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001658:	4b10      	ldr	r3, [pc, #64]	@ (800169c <MX_I2C1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <MX_I2C1_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001664:	480d      	ldr	r0, [pc, #52]	@ (800169c <MX_I2C1_Init+0x74>)
 8001666:	f001 f933 	bl	80028d0 <HAL_I2C_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001670:	f000 fa4e 	bl	8001b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	4809      	ldr	r0, [pc, #36]	@ (800169c <MX_I2C1_Init+0x74>)
 8001678:	f002 f94e 	bl	8003918 <HAL_I2CEx_ConfigAnalogFilter>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001682:	f000 fa45 	bl	8001b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <MX_I2C1_Init+0x74>)
 800168a:	f002 f981 	bl	8003990 <HAL_I2CEx_ConfigDigitalFilter>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001694:	f000 fa3c 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000024c 	.word	0x2000024c
 80016a0:	40005400 	.word	0x40005400
 80016a4:	00061a80 	.word	0x00061a80

080016a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	@ 0x28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a19      	ldr	r2, [pc, #100]	@ (800172c <HAL_I2C_MspInit+0x84>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d12c      	bne.n	8001724 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <HAL_I2C_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a17      	ldr	r2, [pc, #92]	@ (8001730 <HAL_I2C_MspInit+0x88>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_I2C_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ec:	2312      	movs	r3, #18
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f8:	2304      	movs	r3, #4
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	480c      	ldr	r0, [pc, #48]	@ (8001734 <HAL_I2C_MspInit+0x8c>)
 8001704:	f000 ff06 	bl	8002514 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_I2C_MspInit+0x88>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	4a07      	ldr	r2, [pc, #28]	@ (8001730 <HAL_I2C_MspInit+0x88>)
 8001712:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001716:	6413      	str	r3, [r2, #64]	@ 0x40
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_I2C_MspInit+0x88>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	@ 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40005400 	.word	0x40005400
 8001730:	40023800 	.word	0x40023800
 8001734:	40020400 	.word	0x40020400

08001738 <Keypad_Init>:
   Инициализация PCA9538:
   - Все линии = inputs,
   - За исключением момента, когда одну строку делаем output=0
   -----------------------------------------*/
void Keypad_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
    /* PCA9538 по умолчанию после сброса всё входы.
       Можно явно сконфигурировать,
       но иногда достаточно писать OutputReg = ...
       и ConfigReg = ...
    */
    PCA9538_Init(); // низкоуровневый (адрес, etc)
 800173c:	f000 f9ee 	bl	8001b1c <PCA9538_Init>
    stableKey = 0;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <Keypad_Init+0x30>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
    lastPressed = 0;
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <Keypad_Init+0x34>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
    prevScanCode = 0;
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <Keypad_Init+0x38>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
    consecutiveCount = 0;
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <Keypad_Init+0x3c>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
    lastScanTick = HAL_GetTick();
 8001758:	f000 fd08 	bl	800216c <HAL_GetTick>
 800175c:	4603      	mov	r3, r0
 800175e:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <Keypad_Init+0x40>)
 8001760:	6013      	str	r3, [r2, #0]
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002a0 	.word	0x200002a0
 800176c:	200002a1 	.word	0x200002a1
 8001770:	200002a2 	.word	0x200002a2
 8001774:	200002a8 	.word	0x200002a8
 8001778:	200002a4 	.word	0x200002a4

0800177c <Keypad_ScanRaw>:
   Читаем матрицу:
   Возвращаем "код" одной нажатой кнопки,
   или 0, если ничего/более одной/ошибка.
   -----------------------------------------*/
static uint8_t Keypad_ScanRaw(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
    uint8_t foundRow = 255, foundCol = 255;
 8001782:	23ff      	movs	r3, #255	@ 0xff
 8001784:	75fb      	strb	r3, [r7, #23]
 8001786:	23ff      	movs	r3, #255	@ 0xff
 8001788:	75bb      	strb	r3, [r7, #22]
    uint8_t pressCount = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	757b      	strb	r3, [r7, #21]

    for (int row = 0; row < 4; row++) {
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	e051      	b.n	8001838 <Keypad_ScanRaw+0xbc>
        //    Или можно "trюк": P_row=0 => config=0, output=0,
        //                      остальные rows => config=1 => input,
        //                      cols => config=1 => input
        //    P7 ? - пусть тоже input.

        uint8_t config = 0xFF;  // всё входы
 8001794:	23ff      	movs	r3, #255	@ 0xff
 8001796:	72fb      	strb	r3, [r7, #11]
        uint8_t output = 0xFF;  // всё "1"
 8001798:	23ff      	movs	r3, #255	@ 0xff
 800179a:	72bb      	strb	r3, [r7, #10]
        // row = i => P_i=0 => config[i] = 0, output[i] = 0
        config &= ~(1 << row);  // => bit row=0 => output mode
 800179c:	2201      	movs	r2, #1
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	b25a      	sxtb	r2, r3
 80017aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80017ae:	4013      	ands	r3, r2
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	72fb      	strb	r3, [r7, #11]
        output &= ~(1 << row);  // => bit row=0 => write 0
 80017b4:	2201      	movs	r2, #1
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80017c6:	4013      	ands	r3, r2
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	72bb      	strb	r3, [r7, #10]

        PCA9538_WriteConfigReg(config);
 80017cc:	7afb      	ldrb	r3, [r7, #11]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f9da 	bl	8001b88 <PCA9538_WriteConfigReg>
        PCA9538_WriteOutputReg(output);
 80017d4:	7abb      	ldrb	r3, [r7, #10]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f9ee 	bl	8001bb8 <PCA9538_WriteOutputReg>

        HAL_Delay(1); // Микропауза ~1 ms (или можно без задержек, но иногда лучше подождать)
 80017dc:	2001      	movs	r0, #1
 80017de:	f000 fcd1 	bl	8002184 <HAL_Delay>

        // 2) Считать вход
        uint8_t inputByte = PCA9538_ReadInputReg();
 80017e2:	f000 fa01 	bl	8001be8 <PCA9538_ReadInputReg>
 80017e6:	4603      	mov	r3, r0
 80017e8:	727b      	strb	r3, [r7, #9]
        // col => P4,P5,P6
        // "нажатая" => col_j=0

        for (int col = 0; col < 3; col++) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e01d      	b.n	800182c <Keypad_ScanRaw+0xb0>
            uint8_t colBit = (4 + col);  // P4..P6
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	3304      	adds	r3, #4
 80017f6:	723b      	strb	r3, [r7, #8]
            uint8_t val = (inputByte >> colBit) & 0x1;
 80017f8:	7a7a      	ldrb	r2, [r7, #9]
 80017fa:	7a3b      	ldrb	r3, [r7, #8]
 80017fc:	fa42 f303 	asr.w	r3, r2, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	71fb      	strb	r3, [r7, #7]
            if (val == 0) {
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10b      	bne.n	8001826 <Keypad_ScanRaw+0xaa>
                // кнопка row,col нажата
                pressCount++;
 800180e:	7d7b      	ldrb	r3, [r7, #21]
 8001810:	3301      	adds	r3, #1
 8001812:	757b      	strb	r3, [r7, #21]
                foundRow = row;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	75fb      	strb	r3, [r7, #23]
                foundCol = col;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	75bb      	strb	r3, [r7, #22]
                if (pressCount > 1) {
 800181c:	7d7b      	ldrb	r3, [r7, #21]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d901      	bls.n	8001826 <Keypad_ScanRaw+0xaa>
                    // более одной кнопки => возврат 0
                    return 0;
 8001822:	2300      	movs	r3, #0
 8001824:	e019      	b.n	800185a <Keypad_ScanRaw+0xde>
        for (int col = 0; col < 3; col++) {
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3301      	adds	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b02      	cmp	r3, #2
 8001830:	ddde      	ble.n	80017f0 <Keypad_ScanRaw+0x74>
    for (int row = 0; row < 4; row++) {
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	3301      	adds	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b03      	cmp	r3, #3
 800183c:	ddaa      	ble.n	8001794 <Keypad_ScanRaw+0x18>
                }
            }
        }
    }

    if (pressCount == 1) {
 800183e:	7d7b      	ldrb	r3, [r7, #21]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d109      	bne.n	8001858 <Keypad_ScanRaw+0xdc>
        return KeyMap[foundRow][foundCol];
 8001844:	7dfa      	ldrb	r2, [r7, #23]
 8001846:	7db9      	ldrb	r1, [r7, #22]
 8001848:	4806      	ldr	r0, [pc, #24]	@ (8001864 <Keypad_ScanRaw+0xe8>)
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	4403      	add	r3, r0
 8001852:	440b      	add	r3, r1
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	e000      	b.n	800185a <Keypad_ScanRaw+0xde>
    } else {
        // Либо 0 кнопок, либо >1
        return 0;
 8001858:	2300      	movs	r3, #0
    }
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	0800ad6c 	.word	0x0800ad6c

08001868 <Keypad_Update>:

void Keypad_Update(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 800186e:	f000 fc7d 	bl	800216c <HAL_GetTick>
 8001872:	6078      	str	r0, [r7, #4]
    if ((now - lastScanTick) < SCAN_INTERVAL_MS) {
 8001874:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <Keypad_Update+0x90>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b09      	cmp	r3, #9
 800187e:	d935      	bls.n	80018ec <Keypad_Update+0x84>
        return; // сканируем раз в 10 мс (пример)
    }
    lastScanTick = now;
 8001880:	4a1d      	ldr	r2, [pc, #116]	@ (80018f8 <Keypad_Update+0x90>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]

    // Сканируем
    uint8_t code = Keypad_ScanRaw();
 8001886:	f7ff ff79 	bl	800177c <Keypad_ScanRaw>
 800188a:	4603      	mov	r3, r0
 800188c:	70fb      	strb	r3, [r7, #3]

    // Дебаунс: ждём, чтобы code совпадало N раз подряд
    if (code == prevScanCode && code != stableKey) {
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <Keypad_Update+0x94>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	429a      	cmp	r2, r3
 8001896:	d11d      	bne.n	80018d4 <Keypad_Update+0x6c>
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <Keypad_Update+0x98>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d018      	beq.n	80018d4 <Keypad_Update+0x6c>
        consecutiveCount++;
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <Keypad_Update+0x9c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <Keypad_Update+0x9c>)
 80018ac:	701a      	strb	r2, [r3, #0]
        if (consecutiveCount >= DEBOUNCE_CYCLES) {
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <Keypad_Update+0x9c>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d91c      	bls.n	80018f0 <Keypad_Update+0x88>
            // Стабильное новое состояние
            stableKey = code;
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <Keypad_Update+0x98>)
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	7013      	strb	r3, [r2, #0]
            consecutiveCount = 0;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <Keypad_Update+0x9c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
            if (stableKey != 0) {
 80018c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <Keypad_Update+0x98>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d012      	beq.n	80018f0 <Keypad_Update+0x88>
                // событие: новая кнопка нажата
                lastPressed = stableKey;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <Keypad_Update+0x98>)
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <Keypad_Update+0xa0>)
 80018d0:	701a      	strb	r2, [r3, #0]
        if (consecutiveCount >= DEBOUNCE_CYCLES) {
 80018d2:	e00d      	b.n	80018f0 <Keypad_Update+0x88>
            }
        }
    } else if (code != prevScanCode) {
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <Keypad_Update+0x94>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d009      	beq.n	80018f2 <Keypad_Update+0x8a>
        // сброс
        consecutiveCount = 1;
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <Keypad_Update+0x9c>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
        prevScanCode = code;
 80018e4:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <Keypad_Update+0x94>)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	7013      	strb	r3, [r2, #0]
 80018ea:	e002      	b.n	80018f2 <Keypad_Update+0x8a>
        return; // сканируем раз в 10 мс (пример)
 80018ec:	bf00      	nop
 80018ee:	e000      	b.n	80018f2 <Keypad_Update+0x8a>
        if (consecutiveCount >= DEBOUNCE_CYCLES) {
 80018f0:	bf00      	nop
    }
}
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200002a4 	.word	0x200002a4
 80018fc:	200002a2 	.word	0x200002a2
 8001900:	200002a0 	.word	0x200002a0
 8001904:	200002a8 	.word	0x200002a8
 8001908:	200002a1 	.word	0x200002a1

0800190c <Keypad_GetLastPressed>:
   Возвращает код последней нажатой кнопки (1..12),
   или 0, если нет нового нажатия.
   Однократно.
-----------------------------------------*/
uint8_t Keypad_GetLastPressed(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
    uint8_t tmp = lastPressed;
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <Keypad_GetLastPressed+0x20>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
    lastPressed = 0;
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <Keypad_GetLastPressed+0x20>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
    return tmp;
 800191e:	79fb      	ldrb	r3, [r7, #7]
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	200002a1 	.word	0x200002a1

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b092      	sub	sp, #72	@ 0x48
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001936:	f000 fbb3 	bl	80020a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193a:	f000 f87d 	bl	8001a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193e:	f7ff fde7 	bl	8001510 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001942:	f7ff fe71 	bl	8001628 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001946:	f000 faa1 	bl	8001e8c <MX_TIM1_Init>
  MX_USART6_UART_Init();
 800194a:	f7ff fb5b 	bl	8001004 <MX_USART6_UART_Init>
  Keypad_Init();
 800194e:	f7ff fef3 	bl	8001738 <Keypad_Init>
  BEEP_Init();
 8001952:	f7ff fc6b 	bl	800122c <BEEP_Init>

  /* USER CODE BEGIN 2 */
  APP_UART_SendString("Lab4: I2C Keypad with PCA9538, two modes\r\n");
 8001956:	4814      	ldr	r0, [pc, #80]	@ (80019a8 <main+0x78>)
 8001958:	f7ff fbce 	bl	80010f8 <APP_UART_SendString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      CheckSideButton();
 800195c:	f000 f82a 	bl	80019b4 <CheckSideButton>
      Keypad_Update();
 8001960:	f7ff ff82 	bl	8001868 <Keypad_Update>

      uint8_t key = Keypad_GetLastPressed();
 8001964:	f7ff ffd2 	bl	800190c <Keypad_GetLastPressed>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      if (key != 0)
 800196e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001972:	2b00      	cmp	r3, #0
 8001974:	d014      	beq.n	80019a0 <main+0x70>
      {
          if (currentMode == MODE_TEST) {
 8001976:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <main+0x7c>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10b      	bne.n	8001996 <main+0x66>
              // Тестовый режим – просто вывести код
              char msg[64];
              snprintf(msg, sizeof(msg), "Key pressed: %d\r\n", key);
 800197e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001982:	1d38      	adds	r0, r7, #4
 8001984:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <main+0x80>)
 8001986:	2140      	movs	r1, #64	@ 0x40
 8001988:	f005 f8a2 	bl	8006ad0 <sniprintf>
              APP_UART_SendString(msg);
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fbb2 	bl	80010f8 <APP_UART_SendString>
 8001994:	e004      	b.n	80019a0 <main+0x70>
          } else {
              // Прикладной режим – музыкальная клавиатура
              // Допустим, сопоставим клавиши 1..7 -> ноты,
              // 8/9 -> octave +/- , 10/11 -> duration +/- , 12 -> play all
              BEEP_HandleKey(key);
 8001996:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fd5c 	bl	8001458 <BEEP_HandleKey>
          }
      }
      BEEP_Update();
 80019a0:	f7ff fc60 	bl	8001264 <BEEP_Update>
  {
 80019a4:	e7da      	b.n	800195c <main+0x2c>
 80019a6:	bf00      	nop
 80019a8:	0800ace0 	.word	0x0800ace0
 80019ac:	200002a9 	.word	0x200002a9
 80019b0:	0800ad0c 	.word	0x0800ad0c

080019b4 <CheckSideButton>:
  }
  /* USER CODE END 3 */
}
static void CheckSideButton(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
    uint8_t pinState = HAL_GPIO_ReadPin(MODE_BUTTON_GPIO_Port, MODE_BUTTON_Pin);
 80019ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019be:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <CheckSideButton+0x6c>)
 80019c0:	f000 ff54 	bl	800286c <HAL_GPIO_ReadPin>
 80019c4:	4603      	mov	r3, r0
 80019c6:	71fb      	strb	r3, [r7, #7]
    // Предположим, "нажатие" = pinState == 0
    if (pinState == 0 && lastButtonState == 1) {
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d120      	bne.n	8001a10 <CheckSideButton+0x5c>
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <CheckSideButton+0x70>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d11c      	bne.n	8001a10 <CheckSideButton+0x5c>
        // переход 1->0
        uint32_t now = HAL_GetTick();
 80019d6:	f000 fbc9 	bl	800216c <HAL_GetTick>
 80019da:	6038      	str	r0, [r7, #0]
        if ((now - lastModeToggleTime) > MODE_DEBOUNCE_MS) {
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <CheckSideButton+0x74>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	@ 0x64
 80019e6:	d913      	bls.n	8001a10 <CheckSideButton+0x5c>
            // переключим режим
            if (currentMode == MODE_TEST) {
 80019e8:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <CheckSideButton+0x78>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d106      	bne.n	80019fe <CheckSideButton+0x4a>
                currentMode = MODE_APP;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <CheckSideButton+0x78>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
                APP_UART_SendString("Switched to APP mode\r\n");
 80019f6:	480e      	ldr	r0, [pc, #56]	@ (8001a30 <CheckSideButton+0x7c>)
 80019f8:	f7ff fb7e 	bl	80010f8 <APP_UART_SendString>
 80019fc:	e005      	b.n	8001a0a <CheckSideButton+0x56>
            } else {
                currentMode = MODE_TEST;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <CheckSideButton+0x78>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
                APP_UART_SendString("Switched to TEST mode\r\n");
 8001a04:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <CheckSideButton+0x80>)
 8001a06:	f7ff fb77 	bl	80010f8 <APP_UART_SendString>
            }
            lastModeToggleTime = now;
 8001a0a:	4a07      	ldr	r2, [pc, #28]	@ (8001a28 <CheckSideButton+0x74>)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6013      	str	r3, [r2, #0]
        }
    }
    lastButtonState = pinState;
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <CheckSideButton+0x70>)
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	7013      	strb	r3, [r2, #0]
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020800 	.word	0x40020800
 8001a24:	200002aa 	.word	0x200002aa
 8001a28:	200002ac 	.word	0x200002ac
 8001a2c:	200002a9 	.word	0x200002a9
 8001a30:	0800ad20 	.word	0x0800ad20
 8001a34:	0800ad38 	.word	0x0800ad38

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b094      	sub	sp, #80	@ 0x50
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	2230      	movs	r2, #48	@ 0x30
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f005 fff0 	bl	8007a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <SystemClock_Config+0xd0>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	4a28      	ldr	r2, [pc, #160]	@ (8001b08 <SystemClock_Config+0xd0>)
 8001a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6c:	4b26      	ldr	r3, [pc, #152]	@ (8001b08 <SystemClock_Config+0xd0>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <SystemClock_Config+0xd4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a84:	4a21      	ldr	r2, [pc, #132]	@ (8001b0c <SystemClock_Config+0xd4>)
 8001a86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b0c <SystemClock_Config+0xd4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001aac:	230f      	movs	r3, #15
 8001aae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001ab0:	2390      	movs	r3, #144	@ 0x90
 8001ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abc:	f107 0320 	add.w	r3, r7, #32
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 ffa5 	bl	8003a10 <HAL_RCC_OscConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001acc:	f000 f820 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001adc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2103      	movs	r1, #3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fa06 	bl	8003f00 <HAL_RCC_ClockConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001afa:	f000 f809 	bl	8001b10 <Error_Handler>
  }
}
 8001afe:	bf00      	nop
 8001b00:	3750      	adds	r7, #80	@ 0x50
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <Error_Handler+0x8>

08001b1c <PCA9538_Init>:
#define REG_CONFIG    0x03

extern I2C_HandleTypeDef hi2c1;

void PCA9538_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af04      	add	r7, sp, #16
    // Можно, например, сбросить PolarityReg=0
    // и всё входы (Config=0xFF), Output=0xFF
    uint8_t tmp = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	71fb      	strb	r3, [r7, #7]
    tmp = 0x00; // Polarity
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, PCA9538_I2C_ADDR, REG_POLARITY, 1, &tmp, 1, 100);
 8001b2a:	2364      	movs	r3, #100	@ 0x64
 8001b2c:	9302      	str	r3, [sp, #8]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2301      	movs	r3, #1
 8001b38:	2202      	movs	r2, #2
 8001b3a:	21e2      	movs	r1, #226	@ 0xe2
 8001b3c:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <PCA9538_Init+0x68>)
 8001b3e:	f001 f80b 	bl	8002b58 <HAL_I2C_Mem_Write>

    tmp = 0xFF; // всё входы
 8001b42:	23ff      	movs	r3, #255	@ 0xff
 8001b44:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, PCA9538_I2C_ADDR, REG_CONFIG, 1, &tmp, 1, 100);
 8001b46:	2364      	movs	r3, #100	@ 0x64
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2301      	movs	r3, #1
 8001b54:	2203      	movs	r2, #3
 8001b56:	21e2      	movs	r1, #226	@ 0xe2
 8001b58:	480a      	ldr	r0, [pc, #40]	@ (8001b84 <PCA9538_Init+0x68>)
 8001b5a:	f000 fffd 	bl	8002b58 <HAL_I2C_Mem_Write>

    tmp = 0xFF; // output=1
 8001b5e:	23ff      	movs	r3, #255	@ 0xff
 8001b60:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, PCA9538_I2C_ADDR, REG_OUTPUT, 1, &tmp, 1, 100);
 8001b62:	2364      	movs	r3, #100	@ 0x64
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	2301      	movs	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	2201      	movs	r2, #1
 8001b72:	21e2      	movs	r1, #226	@ 0xe2
 8001b74:	4803      	ldr	r0, [pc, #12]	@ (8001b84 <PCA9538_Init+0x68>)
 8001b76:	f000 ffef 	bl	8002b58 <HAL_I2C_Mem_Write>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000024c 	.word	0x2000024c

08001b88 <PCA9538_WriteConfigReg>:

void PCA9538_WriteConfigReg(uint8_t config)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af04      	add	r7, sp, #16
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, PCA9538_I2C_ADDR, REG_CONFIG, 1, &config, 1, 100);
 8001b92:	2364      	movs	r3, #100	@ 0x64
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	2301      	movs	r3, #1
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	21e2      	movs	r1, #226	@ 0xe2
 8001ba4:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <PCA9538_WriteConfigReg+0x2c>)
 8001ba6:	f000 ffd7 	bl	8002b58 <HAL_I2C_Mem_Write>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000024c 	.word	0x2000024c

08001bb8 <PCA9538_WriteOutputReg>:
void PCA9538_WriteOutputReg(uint8_t output)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af04      	add	r7, sp, #16
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, PCA9538_I2C_ADDR, REG_OUTPUT, 1, &output, 1, 100);
 8001bc2:	2364      	movs	r3, #100	@ 0x64
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	21e2      	movs	r1, #226	@ 0xe2
 8001bd4:	4803      	ldr	r0, [pc, #12]	@ (8001be4 <PCA9538_WriteOutputReg+0x2c>)
 8001bd6:	f000 ffbf 	bl	8002b58 <HAL_I2C_Mem_Write>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000024c 	.word	0x2000024c

08001be8 <PCA9538_ReadInputReg>:
uint8_t PCA9538_ReadInputReg(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af04      	add	r7, sp, #16
    uint8_t val = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, PCA9538_I2C_ADDR, REG_INPUT, 1, &val, 1, 100);
 8001bf2:	2364      	movs	r3, #100	@ 0x64
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	2200      	movs	r2, #0
 8001c02:	21e2      	movs	r1, #226	@ 0xe2
 8001c04:	4803      	ldr	r0, [pc, #12]	@ (8001c14 <PCA9538_ReadInputReg+0x2c>)
 8001c06:	f001 f8a1 	bl	8002d4c <HAL_I2C_Mem_Read>
    return val;
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000024c 	.word	0x2000024c

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	4a0f      	ldr	r2, [pc, #60]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a08      	ldr	r2, [pc, #32]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <NMI_Handler+0x4>

08001c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <MemManage_Handler+0x4>

08001c80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbe:	f000 fa41 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ccc:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <USART6_IRQHandler+0x10>)
 8001cce:	f003 f96d 	bl	8004fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200001f8 	.word	0x200001f8

08001cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_kill>:

int _kill(int pid, int sig)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cf6:	f005 fea5 	bl	8007a44 <__errno>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2216      	movs	r2, #22
 8001cfe:	601a      	str	r2, [r3, #0]
  return -1;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_exit>:

void _exit (int status)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ffe7 	bl	8001cec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d1e:	bf00      	nop
 8001d20:	e7fd      	b.n	8001d1e <_exit+0x12>

08001d22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e00a      	b.n	8001d4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d34:	f3af 8000 	nop.w
 8001d38:	4601      	mov	r1, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	60ba      	str	r2, [r7, #8]
 8001d40:	b2ca      	uxtb	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbf0      	blt.n	8001d34 <_read+0x12>
  }

  return len;
 8001d52:	687b      	ldr	r3, [r7, #4]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e009      	b.n	8001d82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	60ba      	str	r2, [r7, #8]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dbf1      	blt.n	8001d6e <_write+0x12>
  }
  return len;
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_close>:

int _close(int file)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dbc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_isatty>:

int _isatty(int file)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e04:	4a14      	ldr	r2, [pc, #80]	@ (8001e58 <_sbrk+0x5c>)
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <_sbrk+0x60>)
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e10:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <_sbrk+0x64>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <_sbrk+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d207      	bcs.n	8001e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e2c:	f005 fe0a 	bl	8007a44 <__errno>
 8001e30:	4603      	mov	r3, r0
 8001e32:	220c      	movs	r2, #12
 8001e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e3a:	e009      	b.n	8001e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <_sbrk+0x64>)
 8001e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20030000 	.word	0x20030000
 8001e5c:	00000400 	.word	0x00000400
 8001e60:	200002b0 	.word	0x200002b0
 8001e64:	20000450 	.word	0x20000450

08001e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <SystemInit+0x20>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <SystemInit+0x20>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b092      	sub	sp, #72	@ 0x48
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e92:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
 8001eac:	615a      	str	r2, [r3, #20]
 8001eae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f005 fdb8 	bl	8007a2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ebc:	4b33      	ldr	r3, [pc, #204]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001ebe:	4a34      	ldr	r2, [pc, #208]	@ (8001f90 <MX_TIM1_Init+0x104>)
 8001ec0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ec2:	4b32      	ldr	r3, [pc, #200]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec8:	4b30      	ldr	r3, [pc, #192]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ece:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ed4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ee8:	4828      	ldr	r0, [pc, #160]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001eea:	f002 f9e9 	bl	80042c0 <HAL_TIM_PWM_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001ef4:	f7ff fe0c 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f00:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f04:	4619      	mov	r1, r3
 8001f06:	4821      	ldr	r0, [pc, #132]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001f08:	f002 fea6 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001f12:	f7ff fdfd 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f16:	2360      	movs	r3, #96	@ 0x60
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f22:	2300      	movs	r3, #0
 8001f24:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f36:	2200      	movs	r2, #0
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4814      	ldr	r0, [pc, #80]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001f3c:	f002 fb48 	bl	80045d0 <HAL_TIM_PWM_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001f46:	f7ff fde3 	bl	8001b10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4807      	ldr	r0, [pc, #28]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001f6e:	f002 feef 	bl	8004d50 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001f78:	f7ff fdca 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f7c:	4803      	ldr	r0, [pc, #12]	@ (8001f8c <MX_TIM1_Init+0x100>)
 8001f7e:	f000 f82b 	bl	8001fd8 <HAL_TIM_MspPostInit>

}
 8001f82:	bf00      	nop
 8001f84:	3748      	adds	r7, #72	@ 0x48
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200002b4 	.word	0x200002b4
 8001f90:	40010000 	.word	0x40010000

08001f94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	4a09      	ldr	r2, [pc, #36]	@ (8001fd4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb6:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a12      	ldr	r2, [pc, #72]	@ (8002040 <HAL_TIM_MspPostInit+0x68>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d11e      	bne.n	8002038 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <HAL_TIM_MspPostInit+0x6c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a10      	ldr	r2, [pc, #64]	@ (8002044 <HAL_TIM_MspPostInit+0x6c>)
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <HAL_TIM_MspPostInit+0x6c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800201a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002028:	2301      	movs	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4619      	mov	r1, r3
 8002032:	4805      	ldr	r0, [pc, #20]	@ (8002048 <HAL_TIM_MspPostInit+0x70>)
 8002034:	f000 fa6e 	bl	8002514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002038:	bf00      	nop
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40010000 	.word	0x40010000
 8002044:	40023800 	.word	0x40023800
 8002048:	40021000 	.word	0x40021000

0800204c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800204c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002084 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002050:	f7ff ff0a 	bl	8001e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002054:	480c      	ldr	r0, [pc, #48]	@ (8002088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002056:	490d      	ldr	r1, [pc, #52]	@ (800208c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002058:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800206c:	4c0a      	ldr	r4, [pc, #40]	@ (8002098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800207a:	f005 fce9 	bl	8007a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207e:	f7ff fc57 	bl	8001930 <main>
  bx  lr    
 8002082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002084:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800208c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002090:	0800b1e4 	.word	0x0800b1e4
  ldr r2, =_sbss
 8002094:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002098:	2000044c 	.word	0x2000044c

0800209c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC_IRQHandler>
	...

080020a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a4:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <HAL_Init+0x40>)
 80020aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <HAL_Init+0x40>)
 80020b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <HAL_Init+0x40>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f000 f94f 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ce:	200f      	movs	r0, #15
 80020d0:	f000 f808 	bl	80020e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d4:	f7ff fda0 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00

080020e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_InitTick+0x54>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_InitTick+0x58>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f967 	bl	80023d6 <HAL_SYSTICK_Config>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00e      	b.n	8002130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d80a      	bhi.n	800212e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002118:	2200      	movs	r2, #0
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002120:	f000 f92f 	bl	8002382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002124:	4a06      	ldr	r2, [pc, #24]	@ (8002140 <HAL_InitTick+0x5c>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000008 	.word	0x20000008
 800213c:	20000010 	.word	0x20000010
 8002140:	2000000c 	.word	0x2000000c

08002144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_IncTick+0x20>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_IncTick+0x24>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_IncTick+0x24>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000010 	.word	0x20000010
 8002168:	200002fc 	.word	0x200002fc

0800216c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return uwTick;
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_GetTick+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	200002fc 	.word	0x200002fc

08002184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff ffee 	bl	800216c <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800219c:	d005      	beq.n	80021aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_Delay+0x44>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021aa:	bf00      	nop
 80021ac:	f7ff ffde 	bl	800216c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d8f7      	bhi.n	80021ac <HAL_Delay+0x28>
  {
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000010 	.word	0x20000010

080021cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021e8:	4013      	ands	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fe:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	60d3      	str	r3, [r2, #12]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002218:	4b04      	ldr	r3, [pc, #16]	@ (800222c <__NVIC_GetPriorityGrouping+0x18>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	f003 0307 	and.w	r3, r3, #7
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0b      	blt.n	800225a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4907      	ldr	r1, [pc, #28]	@ (8002268 <__NVIC_EnableIRQ+0x38>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2001      	movs	r0, #1
 8002252:	fa00 f202 	lsl.w	r2, r0, r2
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	@ (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	@ (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	@ 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	@ 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff29 	bl	80021cc <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002394:	f7ff ff3e 	bl	8002214 <__NVIC_GetPriorityGrouping>
 8002398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7ff ff8e 	bl	80022c0 <NVIC_EncodePriority>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff5d 	bl	800226c <__NVIC_SetPriority>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff31 	bl	8002230 <__NVIC_EnableIRQ>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffa2 	bl	8002328 <SysTick_Config>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff feb6 	bl	800216c <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d008      	beq.n	8002420 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e052      	b.n	80024c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0216 	bic.w	r2, r2, #22
 800242e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800243e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <HAL_DMA_Abort+0x62>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0208 	bic.w	r2, r2, #8
 800245e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002470:	e013      	b.n	800249a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002472:	f7ff fe7b 	bl	800216c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b05      	cmp	r3, #5
 800247e:	d90c      	bls.n	800249a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2203      	movs	r2, #3
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e015      	b.n	80024c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e4      	bne.n	8002472 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	223f      	movs	r2, #63	@ 0x3f
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d004      	beq.n	80024ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2280      	movs	r2, #128	@ 0x80
 80024e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e00c      	b.n	8002506 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2205      	movs	r2, #5
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	@ 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e177      	b.n	8002820 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	f040 8166 	bne.w	800281a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d005      	beq.n	8002566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002562:	2b02      	cmp	r3, #2
 8002564:	d130      	bne.n	80025c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800259c:	2201      	movs	r2, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 0201 	and.w	r2, r3, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d017      	beq.n	8002604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d123      	bne.n	8002658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	220f      	movs	r2, #15
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	08da      	lsrs	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3208      	adds	r2, #8
 8002652:	69b9      	ldr	r1, [r7, #24]
 8002654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0203 	and.w	r2, r3, #3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 80c0 	beq.w	800281a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b66      	ldr	r3, [pc, #408]	@ (8002838 <HAL_GPIO_Init+0x324>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	4a65      	ldr	r2, [pc, #404]	@ (8002838 <HAL_GPIO_Init+0x324>)
 80026a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026aa:	4b63      	ldr	r3, [pc, #396]	@ (8002838 <HAL_GPIO_Init+0x324>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026b6:	4a61      	ldr	r2, [pc, #388]	@ (800283c <HAL_GPIO_Init+0x328>)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	089b      	lsrs	r3, r3, #2
 80026bc:	3302      	adds	r3, #2
 80026be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	220f      	movs	r2, #15
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a58      	ldr	r2, [pc, #352]	@ (8002840 <HAL_GPIO_Init+0x32c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d037      	beq.n	8002752 <HAL_GPIO_Init+0x23e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a57      	ldr	r2, [pc, #348]	@ (8002844 <HAL_GPIO_Init+0x330>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d031      	beq.n	800274e <HAL_GPIO_Init+0x23a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a56      	ldr	r2, [pc, #344]	@ (8002848 <HAL_GPIO_Init+0x334>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02b      	beq.n	800274a <HAL_GPIO_Init+0x236>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a55      	ldr	r2, [pc, #340]	@ (800284c <HAL_GPIO_Init+0x338>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d025      	beq.n	8002746 <HAL_GPIO_Init+0x232>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a54      	ldr	r2, [pc, #336]	@ (8002850 <HAL_GPIO_Init+0x33c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01f      	beq.n	8002742 <HAL_GPIO_Init+0x22e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a53      	ldr	r2, [pc, #332]	@ (8002854 <HAL_GPIO_Init+0x340>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d019      	beq.n	800273e <HAL_GPIO_Init+0x22a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a52      	ldr	r2, [pc, #328]	@ (8002858 <HAL_GPIO_Init+0x344>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_GPIO_Init+0x226>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a51      	ldr	r2, [pc, #324]	@ (800285c <HAL_GPIO_Init+0x348>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00d      	beq.n	8002736 <HAL_GPIO_Init+0x222>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a50      	ldr	r2, [pc, #320]	@ (8002860 <HAL_GPIO_Init+0x34c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d007      	beq.n	8002732 <HAL_GPIO_Init+0x21e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4f      	ldr	r2, [pc, #316]	@ (8002864 <HAL_GPIO_Init+0x350>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_GPIO_Init+0x21a>
 800272a:	2309      	movs	r3, #9
 800272c:	e012      	b.n	8002754 <HAL_GPIO_Init+0x240>
 800272e:	230a      	movs	r3, #10
 8002730:	e010      	b.n	8002754 <HAL_GPIO_Init+0x240>
 8002732:	2308      	movs	r3, #8
 8002734:	e00e      	b.n	8002754 <HAL_GPIO_Init+0x240>
 8002736:	2307      	movs	r3, #7
 8002738:	e00c      	b.n	8002754 <HAL_GPIO_Init+0x240>
 800273a:	2306      	movs	r3, #6
 800273c:	e00a      	b.n	8002754 <HAL_GPIO_Init+0x240>
 800273e:	2305      	movs	r3, #5
 8002740:	e008      	b.n	8002754 <HAL_GPIO_Init+0x240>
 8002742:	2304      	movs	r3, #4
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x240>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x240>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x240>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x240>
 8002752:	2300      	movs	r3, #0
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	f002 0203 	and.w	r2, r2, #3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002764:	4935      	ldr	r1, [pc, #212]	@ (800283c <HAL_GPIO_Init+0x328>)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002772:	4b3d      	ldr	r3, [pc, #244]	@ (8002868 <HAL_GPIO_Init+0x354>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002796:	4a34      	ldr	r2, [pc, #208]	@ (8002868 <HAL_GPIO_Init+0x354>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800279c:	4b32      	ldr	r3, [pc, #200]	@ (8002868 <HAL_GPIO_Init+0x354>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c0:	4a29      	ldr	r2, [pc, #164]	@ (8002868 <HAL_GPIO_Init+0x354>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027c6:	4b28      	ldr	r3, [pc, #160]	@ (8002868 <HAL_GPIO_Init+0x354>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002868 <HAL_GPIO_Init+0x354>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002868 <HAL_GPIO_Init+0x354>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002814:	4a14      	ldr	r2, [pc, #80]	@ (8002868 <HAL_GPIO_Init+0x354>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	f67f ae84 	bls.w	8002530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3724      	adds	r7, #36	@ 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	40013800 	.word	0x40013800
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400
 8002848:	40020800 	.word	0x40020800
 800284c:	40020c00 	.word	0x40020c00
 8002850:	40021000 	.word	0x40021000
 8002854:	40021400 	.word	0x40021400
 8002858:	40021800 	.word	0x40021800
 800285c:	40021c00 	.word	0x40021c00
 8002860:	40022000 	.word	0x40022000
 8002864:	40022400 	.word	0x40022400
 8002868:	40013c00 	.word	0x40013c00

0800286c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	887b      	ldrh	r3, [r7, #2]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e001      	b.n	800288e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
 80028a8:	4613      	mov	r3, r2
 80028aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ac:	787b      	ldrb	r3, [r7, #1]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b8:	e003      	b.n	80028c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ba:	887b      	ldrh	r3, [r7, #2]
 80028bc:	041a      	lsls	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	619a      	str	r2, [r3, #24]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e12b      	b.n	8002b3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fed6 	bl	80016a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	@ 0x24
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002934:	f001 fc9c 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 8002938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a81      	ldr	r2, [pc, #516]	@ (8002b44 <HAL_I2C_Init+0x274>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d807      	bhi.n	8002954 <HAL_I2C_Init+0x84>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a80      	ldr	r2, [pc, #512]	@ (8002b48 <HAL_I2C_Init+0x278>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e006      	b.n	8002962 <HAL_I2C_Init+0x92>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a7d      	ldr	r2, [pc, #500]	@ (8002b4c <HAL_I2C_Init+0x27c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	bf94      	ite	ls
 800295c:	2301      	movls	r3, #1
 800295e:	2300      	movhi	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e0e7      	b.n	8002b3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a78      	ldr	r2, [pc, #480]	@ (8002b50 <HAL_I2C_Init+0x280>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0c9b      	lsrs	r3, r3, #18
 8002974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a6a      	ldr	r2, [pc, #424]	@ (8002b44 <HAL_I2C_Init+0x274>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d802      	bhi.n	80029a4 <HAL_I2C_Init+0xd4>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	3301      	adds	r3, #1
 80029a2:	e009      	b.n	80029b8 <HAL_I2C_Init+0xe8>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a69      	ldr	r2, [pc, #420]	@ (8002b54 <HAL_I2C_Init+0x284>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	3301      	adds	r3, #1
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	495c      	ldr	r1, [pc, #368]	@ (8002b44 <HAL_I2C_Init+0x274>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d819      	bhi.n	8002a0c <HAL_I2C_Init+0x13c>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e59      	subs	r1, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e6:	1c59      	adds	r1, r3, #1
 80029e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029ec:	400b      	ands	r3, r1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_I2C_Init+0x138>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1e59      	subs	r1, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	e051      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	e04f      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d111      	bne.n	8002a38 <HAL_I2C_Init+0x168>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e58      	subs	r0, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	440b      	add	r3, r1
 8002a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e012      	b.n	8002a5e <HAL_I2C_Init+0x18e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e58      	subs	r0, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	0099      	lsls	r1, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Init+0x196>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e022      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10e      	bne.n	8002a8c <HAL_I2C_Init+0x1bc>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1e58      	subs	r0, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	460b      	mov	r3, r1
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	440b      	add	r3, r1
 8002a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a8a:	e00f      	b.n	8002aac <HAL_I2C_Init+0x1dc>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	0099      	lsls	r1, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	6809      	ldr	r1, [r1, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69da      	ldr	r2, [r3, #28]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ada:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6911      	ldr	r1, [r2, #16]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68d2      	ldr	r2, [r2, #12]
 8002ae6:	4311      	orrs	r1, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	000186a0 	.word	0x000186a0
 8002b48:	001e847f 	.word	0x001e847f
 8002b4c:	003d08ff 	.word	0x003d08ff
 8002b50:	431bde83 	.word	0x431bde83
 8002b54:	10624dd3 	.word	0x10624dd3

08002b58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	817b      	strh	r3, [r7, #10]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	813b      	strh	r3, [r7, #8]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b72:	f7ff fafb 	bl	800216c <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	f040 80d9 	bne.w	8002d38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2319      	movs	r3, #25
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	496d      	ldr	r1, [pc, #436]	@ (8002d44 <HAL_I2C_Mem_Write+0x1ec>)
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fc8b 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e0cc      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_I2C_Mem_Write+0x56>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0c5      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d007      	beq.n	8002bd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002be2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2221      	movs	r2, #33	@ 0x21
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2240      	movs	r2, #64	@ 0x40
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a3a      	ldr	r2, [r7, #32]
 8002bfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a4d      	ldr	r2, [pc, #308]	@ (8002d48 <HAL_I2C_Mem_Write+0x1f0>)
 8002c14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c16:	88f8      	ldrh	r0, [r7, #6]
 8002c18:	893a      	ldrh	r2, [r7, #8]
 8002c1a:	8979      	ldrh	r1, [r7, #10]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	4603      	mov	r3, r0
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fac2 	bl	80031b0 <I2C_RequestMemoryWrite>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d052      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e081      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fd50 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d107      	bne.n	8002c5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e06b      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_I2C_Mem_Write+0x180>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	781a      	ldrb	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1aa      	bne.n	8002c36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fd43 	bl	8003770 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d107      	bne.n	8002d08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e016      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e000      	b.n	8002d3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	00100002 	.word	0x00100002
 8002d48:	ffff0000 	.word	0xffff0000

08002d4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	@ 0x30
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	813b      	strh	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d66:	f7ff fa01 	bl	800216c <HAL_GetTick>
 8002d6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	f040 8214 	bne.w	80031a2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	2319      	movs	r3, #25
 8002d80:	2201      	movs	r2, #1
 8002d82:	497b      	ldr	r1, [pc, #492]	@ (8002f70 <HAL_I2C_Mem_Read+0x224>)
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fb91 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
 8002d92:	e207      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Mem_Read+0x56>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e200      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d007      	beq.n	8002dc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2222      	movs	r2, #34	@ 0x22
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2240      	movs	r2, #64	@ 0x40
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002df2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a5b      	ldr	r2, [pc, #364]	@ (8002f74 <HAL_I2C_Mem_Read+0x228>)
 8002e08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e0a:	88f8      	ldrh	r0, [r7, #6]
 8002e0c:	893a      	ldrh	r2, [r7, #8]
 8002e0e:	8979      	ldrh	r1, [r7, #10]
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4603      	mov	r3, r0
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fa5e 	bl	80032dc <I2C_RequestMemoryRead>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e1bc      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d113      	bne.n	8002e5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	623b      	str	r3, [r7, #32]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	623b      	str	r3, [r7, #32]
 8002e46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	e190      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d11b      	bne.n	8002e9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	e170      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d11b      	bne.n	8002eda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	e150      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ef0:	e144      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	f200 80f1 	bhi.w	80030de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d123      	bne.n	8002f4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fc79 	bl	8003800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e145      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f4a:	e117      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d14e      	bne.n	8002ff2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4906      	ldr	r1, [pc, #24]	@ (8002f78 <HAL_I2C_Mem_Read+0x22c>)
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 faa4 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e11a      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
 8002f6e:	bf00      	nop
 8002f70:	00100002 	.word	0x00100002
 8002f74:	ffff0000 	.word	0xffff0000
 8002f78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ff0:	e0c4      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	496c      	ldr	r1, [pc, #432]	@ (80031ac <HAL_I2C_Mem_Read+0x460>)
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fa55 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0cb      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800301a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003054:	2200      	movs	r2, #0
 8003056:	4955      	ldr	r1, [pc, #340]	@ (80031ac <HAL_I2C_Mem_Read+0x460>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fa27 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e09d      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030dc:	e04e      	b.n	800317c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fb8c 	bl	8003800 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e058      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d124      	bne.n	800317c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003136:	2b03      	cmp	r3, #3
 8003138:	d107      	bne.n	800314a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003148:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	f47f aeb6 	bne.w	8002ef2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031a2:	2302      	movs	r3, #2
  }
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3728      	adds	r7, #40	@ 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	00010004 	.word	0x00010004

080031b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	4608      	mov	r0, r1
 80031ba:	4611      	mov	r1, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	817b      	strh	r3, [r7, #10]
 80031c2:	460b      	mov	r3, r1
 80031c4:	813b      	strh	r3, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f960 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003200:	d103      	bne.n	800320a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003208:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e05f      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800321c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	492d      	ldr	r1, [pc, #180]	@ (80032d8 <I2C_RequestMemoryWrite+0x128>)
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f9bb 	bl	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e04c      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324c:	6a39      	ldr	r1, [r7, #32]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fa46 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	2b04      	cmp	r3, #4
 8003260:	d107      	bne.n	8003272 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003270:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e02b      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d105      	bne.n	8003288 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800327c:	893b      	ldrh	r3, [r7, #8]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	e021      	b.n	80032cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003288:	893b      	ldrh	r3, [r7, #8]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	b29b      	uxth	r3, r3
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003298:	6a39      	ldr	r1, [r7, #32]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fa20 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d107      	bne.n	80032be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e005      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c2:	893b      	ldrh	r3, [r7, #8]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	00010002 	.word	0x00010002

080032dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	4608      	mov	r0, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	461a      	mov	r2, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	817b      	strh	r3, [r7, #10]
 80032ee:	460b      	mov	r3, r1
 80032f0:	813b      	strh	r3, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003304:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003314:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	2200      	movs	r2, #0
 800331e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f8c2 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800333c:	d103      	bne.n	8003346 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0aa      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003358:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	6a3a      	ldr	r2, [r7, #32]
 800335e:	4952      	ldr	r1, [pc, #328]	@ (80034a8 <I2C_RequestMemoryRead+0x1cc>)
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f91d 	bl	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e097      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003388:	6a39      	ldr	r1, [r7, #32]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f9a8 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b04      	cmp	r3, #4
 800339c:	d107      	bne.n	80033ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e076      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d105      	bne.n	80033c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b8:	893b      	ldrh	r3, [r7, #8]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	611a      	str	r2, [r3, #16]
 80033c2:	e021      	b.n	8003408 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033c4:	893b      	ldrh	r3, [r7, #8]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d4:	6a39      	ldr	r1, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f982 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d107      	bne.n	80033fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e050      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033fe:	893b      	ldrh	r3, [r7, #8]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340a:	6a39      	ldr	r1, [r7, #32]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f967 	bl	80036e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	2b04      	cmp	r3, #4
 800341e:	d107      	bne.n	8003430 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e035      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003442:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	2200      	movs	r2, #0
 800344c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f82b 	bl	80034ac <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346a:	d103      	bne.n	8003474 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e013      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003478:	897b      	ldrh	r3, [r7, #10]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	6a3a      	ldr	r2, [r7, #32]
 800348c:	4906      	ldr	r1, [pc, #24]	@ (80034a8 <I2C_RequestMemoryRead+0x1cc>)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f886 	bl	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	00010002 	.word	0x00010002

080034ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034bc:	e048      	b.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034c4:	d044      	beq.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7fe fe51 	bl	800216c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d302      	bcc.n	80034dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d139      	bne.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d10d      	bne.n	8003502 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	e00c      	b.n	800351c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	43da      	mvns	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4013      	ands	r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	429a      	cmp	r2, r3
 8003520:	d116      	bne.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e023      	b.n	8003598 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10d      	bne.n	8003576 <I2C_WaitOnFlagUntilTimeout+0xca>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	e00c      	b.n	8003590 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d093      	beq.n	80034be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ae:	e071      	b.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035be:	d123      	bne.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e067      	b.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800360e:	d041      	beq.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fe fdac 	bl	800216c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d136      	bne.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d10c      	bne.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4013      	ands	r3, r2
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	bf14      	ite	ne
 8003642:	2301      	movne	r3, #1
 8003644:	2300      	moveq	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e00b      	b.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e021      	b.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	0c1b      	lsrs	r3, r3, #16
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10c      	bne.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	43da      	mvns	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4013      	ands	r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e00b      	b.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	43da      	mvns	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4013      	ands	r3, r2
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bf14      	ite	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	2300      	moveq	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f47f af6d 	bne.w	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036ec:	e034      	b.n	8003758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f8e3 	bl	80038ba <I2C_IsAcknowledgeFailed>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e034      	b.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003704:	d028      	beq.n	8003758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fe fd31 	bl	800216c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d11d      	bne.n	8003758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003726:	2b80      	cmp	r3, #128	@ 0x80
 8003728:	d016      	beq.n	8003758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e007      	b.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003762:	2b80      	cmp	r3, #128	@ 0x80
 8003764:	d1c3      	bne.n	80036ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800377c:	e034      	b.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f89b 	bl	80038ba <I2C_IsAcknowledgeFailed>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e034      	b.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003794:	d028      	beq.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fe fce9 	bl	800216c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d11d      	bne.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d016      	beq.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d1c3      	bne.n	800377e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800380c:	e049      	b.n	80038a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b10      	cmp	r3, #16
 800381a:	d119      	bne.n	8003850 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0210 	mvn.w	r2, #16
 8003824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e030      	b.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003850:	f7fe fc8c 	bl	800216c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d11d      	bne.n	80038a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	2b40      	cmp	r3, #64	@ 0x40
 8003872:	d016      	beq.n	80038a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e007      	b.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ac:	2b40      	cmp	r3, #64	@ 0x40
 80038ae:	d1ae      	bne.n	800380e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d0:	d11b      	bne.n	800390a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	f043 0204 	orr.w	r2, r3, #4
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b20      	cmp	r3, #32
 800392c:	d129      	bne.n	8003982 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2224      	movs	r2, #36	@ 0x24
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0210 	bic.w	r2, r2, #16
 8003954:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003982:	2302      	movs	r3, #2
  }
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d12a      	bne.n	8003a00 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2224      	movs	r2, #36	@ 0x24
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0201 	bic.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80039ca:	89fb      	ldrh	r3, [r7, #14]
 80039cc:	f023 030f 	bic.w	r3, r3, #15
 80039d0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	89fb      	ldrh	r3, [r7, #14]
 80039d8:	4313      	orrs	r3, r2
 80039da:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	89fa      	ldrh	r2, [r7, #14]
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e267      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d075      	beq.n	8003b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a2e:	4b88      	ldr	r3, [pc, #544]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d00c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3a:	4b85      	ldr	r3, [pc, #532]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d112      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a46:	4b82      	ldr	r3, [pc, #520]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a52:	d10b      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a54:	4b7e      	ldr	r3, [pc, #504]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05b      	beq.n	8003b18 <HAL_RCC_OscConfig+0x108>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d157      	bne.n	8003b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e242      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x74>
 8003a76:	4b76      	ldr	r3, [pc, #472]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a75      	ldr	r2, [pc, #468]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x98>
 8003a8e:	4b70      	ldr	r3, [pc, #448]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6f      	ldr	r2, [pc, #444]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6c      	ldr	r2, [pc, #432]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xb0>
 8003aa8:	4b69      	ldr	r3, [pc, #420]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a68      	ldr	r2, [pc, #416]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b66      	ldr	r3, [pc, #408]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a65      	ldr	r2, [pc, #404]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fb50 	bl	800216c <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fe fb4c 	bl	800216c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	@ 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e207      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xc0>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7fe fb3c 	bl	800216c <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe fb38 	bl	800216c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	@ 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e1f3      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b51      	ldr	r3, [pc, #324]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0xe8>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d063      	beq.n	8003bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b26:	4b4a      	ldr	r3, [pc, #296]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b47      	ldr	r3, [pc, #284]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d11c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3e:	4b44      	ldr	r3, [pc, #272]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	4b41      	ldr	r3, [pc, #260]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1c7      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b62:	4b3b      	ldr	r3, [pc, #236]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4937      	ldr	r1, [pc, #220]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	e03a      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b80:	4b34      	ldr	r3, [pc, #208]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fe faf1 	bl	800216c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7fe faed 	bl	800216c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1a8      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bac:	4b28      	ldr	r3, [pc, #160]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4925      	ldr	r1, [pc, #148]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]
 8003bc0:	e015      	b.n	8003bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc2:	4b24      	ldr	r3, [pc, #144]	@ (8003c54 <HAL_RCC_OscConfig+0x244>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fad0 	bl	800216c <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fe facc 	bl	800216c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e187      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d036      	beq.n	8003c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c02:	4b15      	ldr	r3, [pc, #84]	@ (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fe fab0 	bl	800216c <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c10:	f7fe faac 	bl	800216c <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e167      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c22:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_RCC_OscConfig+0x240>)
 8003c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x200>
 8003c2e:	e01b      	b.n	8003c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c30:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_RCC_OscConfig+0x248>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c36:	f7fe fa99 	bl	800216c <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	e00e      	b.n	8003c5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fe fa95 	bl	800216c <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d907      	bls.n	8003c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e150      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	42470000 	.word	0x42470000
 8003c58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	4b88      	ldr	r3, [pc, #544]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1ea      	bne.n	8003c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8097 	beq.w	8003da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c7a:	4b81      	ldr	r3, [pc, #516]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10f      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c96:	4b7a      	ldr	r3, [pc, #488]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca6:	4b77      	ldr	r3, [pc, #476]	@ (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d118      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cb2:	4b74      	ldr	r3, [pc, #464]	@ (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a73      	ldr	r2, [pc, #460]	@ (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fa55 	bl	800216c <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc6:	f7fe fa51 	bl	800216c <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e10c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003e84 <HAL_RCC_OscConfig+0x474>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_OscConfig+0x2ea>
 8003cec:	4b64      	ldr	r3, [pc, #400]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf0:	4a63      	ldr	r2, [pc, #396]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf8:	e01c      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x30c>
 8003d02:	4b5f      	ldr	r3, [pc, #380]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d06:	4a5e      	ldr	r2, [pc, #376]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d08:	f043 0304 	orr.w	r3, r3, #4
 8003d0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d12:	4a5b      	ldr	r2, [pc, #364]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0x324>
 8003d1c:	4b58      	ldr	r3, [pc, #352]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d20:	4a57      	ldr	r2, [pc, #348]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d28:	4b55      	ldr	r3, [pc, #340]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2c:	4a54      	ldr	r2, [pc, #336]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f023 0304 	bic.w	r3, r3, #4
 8003d32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3c:	f7fe fa16 	bl	800216c <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7fe fa12 	bl	800216c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0cb      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5a:	4b49      	ldr	r3, [pc, #292]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0ee      	beq.n	8003d44 <HAL_RCC_OscConfig+0x334>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d68:	f7fe fa00 	bl	800216c <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f7fe f9fc 	bl	800216c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0b5      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d86:	4b3e      	ldr	r3, [pc, #248]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1ee      	bne.n	8003d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d98:	4b39      	ldr	r3, [pc, #228]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	4a38      	ldr	r2, [pc, #224]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a1 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dae:	4b34      	ldr	r3, [pc, #208]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d05c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d141      	bne.n	8003e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b31      	ldr	r3, [pc, #196]	@ (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fe f9d0 	bl	800216c <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fe f9cc 	bl	800216c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e087      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	4b27      	ldr	r3, [pc, #156]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	491b      	ldr	r1, [pc, #108]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e18:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fe f9a5 	bl	800216c <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fe f9a1 	bl	800216c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e05c      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	4b11      	ldr	r3, [pc, #68]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x416>
 8003e44:	e054      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	@ (8003e88 <HAL_RCC_OscConfig+0x478>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe f98e 	bl	800216c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe f98a 	bl	800216c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e045      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <HAL_RCC_OscConfig+0x470>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x444>
 8003e72:	e03d      	b.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e038      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003efc <HAL_RCC_OscConfig+0x4ec>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d028      	beq.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d121      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d11a      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d111      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800

08003f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cc      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f14:	4b68      	ldr	r3, [pc, #416]	@ (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d90c      	bls.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f22:	4b65      	ldr	r3, [pc, #404]	@ (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2a:	4b63      	ldr	r3, [pc, #396]	@ (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0b8      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d020      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f54:	4b59      	ldr	r3, [pc, #356]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a58      	ldr	r2, [pc, #352]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f6c:	4b53      	ldr	r3, [pc, #332]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	4a52      	ldr	r2, [pc, #328]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f78:	4b50      	ldr	r3, [pc, #320]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	494d      	ldr	r1, [pc, #308]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d044      	beq.n	8004020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	4b47      	ldr	r3, [pc, #284]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d119      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fce:	4b3b      	ldr	r3, [pc, #236]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e067      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fde:	4b37      	ldr	r3, [pc, #220]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f023 0203 	bic.w	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4934      	ldr	r1, [pc, #208]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff0:	f7fe f8bc 	bl	800216c <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff8:	f7fe f8b8 	bl	800216c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e04f      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 020c 	and.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	429a      	cmp	r2, r3
 800401e:	d1eb      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004020:	4b25      	ldr	r3, [pc, #148]	@ (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d20c      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b22      	ldr	r3, [pc, #136]	@ (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b20      	ldr	r3, [pc, #128]	@ (80040b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e032      	b.n	80040ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004054:	4b19      	ldr	r3, [pc, #100]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4916      	ldr	r1, [pc, #88]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004072:	4b12      	ldr	r3, [pc, #72]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	490e      	ldr	r1, [pc, #56]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004086:	f000 f821 	bl	80040cc <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	490a      	ldr	r1, [pc, #40]	@ (80040c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	4a09      	ldr	r2, [pc, #36]	@ (80040c4 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040a2:	4b09      	ldr	r3, [pc, #36]	@ (80040c8 <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe f81c 	bl	80020e4 <HAL_InitTick>

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00
 80040bc:	40023800 	.word	0x40023800
 80040c0:	0800ad78 	.word	0x0800ad78
 80040c4:	20000008 	.word	0x20000008
 80040c8:	2000000c 	.word	0x2000000c

080040cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b090      	sub	sp, #64	@ 0x40
 80040d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e4:	4b59      	ldr	r3, [pc, #356]	@ (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d00d      	beq.n	800410c <HAL_RCC_GetSysClockFreq+0x40>
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	f200 80a1 	bhi.w	8004238 <HAL_RCC_GetSysClockFreq+0x16c>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x34>
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d003      	beq.n	8004106 <HAL_RCC_GetSysClockFreq+0x3a>
 80040fe:	e09b      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004100:	4b53      	ldr	r3, [pc, #332]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x184>)
 8004102:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004104:	e09b      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004106:	4b53      	ldr	r3, [pc, #332]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x188>)
 8004108:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800410a:	e098      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800410c:	4b4f      	ldr	r3, [pc, #316]	@ (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004114:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004116:	4b4d      	ldr	r3, [pc, #308]	@ (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d028      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004122:	4b4a      	ldr	r3, [pc, #296]	@ (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	2200      	movs	r2, #0
 800412a:	623b      	str	r3, [r7, #32]
 800412c:	627a      	str	r2, [r7, #36]	@ 0x24
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004134:	2100      	movs	r1, #0
 8004136:	4b47      	ldr	r3, [pc, #284]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x188>)
 8004138:	fb03 f201 	mul.w	r2, r3, r1
 800413c:	2300      	movs	r3, #0
 800413e:	fb00 f303 	mul.w	r3, r0, r3
 8004142:	4413      	add	r3, r2
 8004144:	4a43      	ldr	r2, [pc, #268]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x188>)
 8004146:	fba0 1202 	umull	r1, r2, r0, r2
 800414a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800414c:	460a      	mov	r2, r1
 800414e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004152:	4413      	add	r3, r2
 8004154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004158:	2200      	movs	r2, #0
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	61fa      	str	r2, [r7, #28]
 800415e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004162:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004166:	f7fc fd9f 	bl	8000ca8 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4613      	mov	r3, r2
 8004170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004172:	e053      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004174:	4b35      	ldr	r3, [pc, #212]	@ (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	2200      	movs	r2, #0
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	617a      	str	r2, [r7, #20]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004186:	f04f 0b00 	mov.w	fp, #0
 800418a:	4652      	mov	r2, sl
 800418c:	465b      	mov	r3, fp
 800418e:	f04f 0000 	mov.w	r0, #0
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	0159      	lsls	r1, r3, #5
 8004198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800419c:	0150      	lsls	r0, r2, #5
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	ebb2 080a 	subs.w	r8, r2, sl
 80041a6:	eb63 090b 	sbc.w	r9, r3, fp
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041be:	ebb2 0408 	subs.w	r4, r2, r8
 80041c2:	eb63 0509 	sbc.w	r5, r3, r9
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	00eb      	lsls	r3, r5, #3
 80041d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d4:	00e2      	lsls	r2, r4, #3
 80041d6:	4614      	mov	r4, r2
 80041d8:	461d      	mov	r5, r3
 80041da:	eb14 030a 	adds.w	r3, r4, sl
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	eb45 030b 	adc.w	r3, r5, fp
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041f2:	4629      	mov	r1, r5
 80041f4:	028b      	lsls	r3, r1, #10
 80041f6:	4621      	mov	r1, r4
 80041f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041fc:	4621      	mov	r1, r4
 80041fe:	028a      	lsls	r2, r1, #10
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004206:	2200      	movs	r2, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	60fa      	str	r2, [r7, #12]
 800420c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004210:	f7fc fd4a 	bl	8000ca8 <__aeabi_uldivmod>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4613      	mov	r3, r2
 800421a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800421c:	4b0b      	ldr	r3, [pc, #44]	@ (800424c <HAL_RCC_GetSysClockFreq+0x180>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	3301      	adds	r3, #1
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800422c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800422e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004236:	e002      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x184>)
 800423a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800423c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004240:	4618      	mov	r0, r3
 8004242:	3740      	adds	r7, #64	@ 0x40
 8004244:	46bd      	mov	sp, r7
 8004246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
 8004250:	00f42400 	.word	0x00f42400
 8004254:	017d7840 	.word	0x017d7840

08004258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800425c:	4b03      	ldr	r3, [pc, #12]	@ (800426c <HAL_RCC_GetHCLKFreq+0x14>)
 800425e:	681b      	ldr	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000008 	.word	0x20000008

08004270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004274:	f7ff fff0 	bl	8004258 <HAL_RCC_GetHCLKFreq>
 8004278:	4602      	mov	r2, r0
 800427a:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	0a9b      	lsrs	r3, r3, #10
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	4903      	ldr	r1, [pc, #12]	@ (8004294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	0800ad88 	.word	0x0800ad88

08004298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800429c:	f7ff ffdc 	bl	8004258 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0b5b      	lsrs	r3, r3, #13
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4903      	ldr	r1, [pc, #12]	@ (80042bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	0800ad88 	.word	0x0800ad88

080042c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e041      	b.n	8004356 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd fe54 	bl	8001f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f000 fa28 	bl	8004754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_TIM_PWM_Start+0x24>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	e022      	b.n	80043ca <HAL_TIM_PWM_Start+0x6a>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d109      	bne.n	800439e <HAL_TIM_PWM_Start+0x3e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	e015      	b.n	80043ca <HAL_TIM_PWM_Start+0x6a>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d109      	bne.n	80043b8 <HAL_TIM_PWM_Start+0x58>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e008      	b.n	80043ca <HAL_TIM_PWM_Start+0x6a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e07c      	b.n	80044cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_PWM_Start+0x82>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e0:	e013      	b.n	800440a <HAL_TIM_PWM_Start+0xaa>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d104      	bne.n	80043f2 <HAL_TIM_PWM_Start+0x92>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f0:	e00b      	b.n	800440a <HAL_TIM_PWM_Start+0xaa>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d104      	bne.n	8004402 <HAL_TIM_PWM_Start+0xa2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004400:	e003      	b.n	800440a <HAL_TIM_PWM_Start+0xaa>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2201      	movs	r2, #1
 8004410:	6839      	ldr	r1, [r7, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fbfa 	bl	8004c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2d      	ldr	r2, [pc, #180]	@ (80044d4 <HAL_TIM_PWM_Start+0x174>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_TIM_PWM_Start+0xcc>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2c      	ldr	r2, [pc, #176]	@ (80044d8 <HAL_TIM_PWM_Start+0x178>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d101      	bne.n	8004430 <HAL_TIM_PWM_Start+0xd0>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_TIM_PWM_Start+0xd2>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004444:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a22      	ldr	r2, [pc, #136]	@ (80044d4 <HAL_TIM_PWM_Start+0x174>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d022      	beq.n	8004496 <HAL_TIM_PWM_Start+0x136>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004458:	d01d      	beq.n	8004496 <HAL_TIM_PWM_Start+0x136>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a1f      	ldr	r2, [pc, #124]	@ (80044dc <HAL_TIM_PWM_Start+0x17c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d018      	beq.n	8004496 <HAL_TIM_PWM_Start+0x136>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1d      	ldr	r2, [pc, #116]	@ (80044e0 <HAL_TIM_PWM_Start+0x180>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_TIM_PWM_Start+0x136>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1c      	ldr	r2, [pc, #112]	@ (80044e4 <HAL_TIM_PWM_Start+0x184>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_TIM_PWM_Start+0x136>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a16      	ldr	r2, [pc, #88]	@ (80044d8 <HAL_TIM_PWM_Start+0x178>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d009      	beq.n	8004496 <HAL_TIM_PWM_Start+0x136>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a18      	ldr	r2, [pc, #96]	@ (80044e8 <HAL_TIM_PWM_Start+0x188>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_TIM_PWM_Start+0x136>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a16      	ldr	r2, [pc, #88]	@ (80044ec <HAL_TIM_PWM_Start+0x18c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d111      	bne.n	80044ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b06      	cmp	r3, #6
 80044a6:	d010      	beq.n	80044ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b8:	e007      	b.n	80044ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40010000 	.word	0x40010000
 80044d8:	40010400 	.word	0x40010400
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40000c00 	.word	0x40000c00
 80044e8:	40014000 	.word	0x40014000
 80044ec:	40001800 	.word	0x40001800

080044f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fb82 	bl	8004c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2e      	ldr	r2, [pc, #184]	@ (80045c8 <HAL_TIM_PWM_Stop+0xd8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_TIM_PWM_Stop+0x2c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2d      	ldr	r2, [pc, #180]	@ (80045cc <HAL_TIM_PWM_Stop+0xdc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <HAL_TIM_PWM_Stop+0x30>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <HAL_TIM_PWM_Stop+0x32>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d017      	beq.n	8004556 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a1a      	ldr	r2, [r3, #32]
 800452c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004530:	4013      	ands	r3, r2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <HAL_TIM_PWM_Stop+0x66>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004540:	4013      	ands	r3, r2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d107      	bne.n	8004556 <HAL_TIM_PWM_Stop+0x66>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004554:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <HAL_TIM_PWM_Stop+0x96>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d107      	bne.n	8004586 <HAL_TIM_PWM_Stop+0x96>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <HAL_TIM_PWM_Stop+0xa6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004594:	e013      	b.n	80045be <HAL_TIM_PWM_Stop+0xce>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b04      	cmp	r3, #4
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_PWM_Stop+0xb6>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045a4:	e00b      	b.n	80045be <HAL_TIM_PWM_Stop+0xce>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_PWM_Stop+0xc6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b4:	e003      	b.n	80045be <HAL_TIM_PWM_Stop+0xce>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40010400 	.word	0x40010400

080045d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e0ae      	b.n	800474c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b0c      	cmp	r3, #12
 80045fa:	f200 809f 	bhi.w	800473c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004639 	.word	0x08004639
 8004608:	0800473d 	.word	0x0800473d
 800460c:	0800473d 	.word	0x0800473d
 8004610:	0800473d 	.word	0x0800473d
 8004614:	08004679 	.word	0x08004679
 8004618:	0800473d 	.word	0x0800473d
 800461c:	0800473d 	.word	0x0800473d
 8004620:	0800473d 	.word	0x0800473d
 8004624:	080046bb 	.word	0x080046bb
 8004628:	0800473d 	.word	0x0800473d
 800462c:	0800473d 	.word	0x0800473d
 8004630:	0800473d 	.word	0x0800473d
 8004634:	080046fb 	.word	0x080046fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f934 	bl	80048ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0208 	orr.w	r2, r2, #8
 8004652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0204 	bic.w	r2, r2, #4
 8004662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6999      	ldr	r1, [r3, #24]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	619a      	str	r2, [r3, #24]
      break;
 8004676:	e064      	b.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f984 	bl	800498c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6999      	ldr	r1, [r3, #24]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	021a      	lsls	r2, r3, #8
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	619a      	str	r2, [r3, #24]
      break;
 80046b8:	e043      	b.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f9d9 	bl	8004a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0208 	orr.w	r2, r2, #8
 80046d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0204 	bic.w	r2, r2, #4
 80046e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69d9      	ldr	r1, [r3, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	61da      	str	r2, [r3, #28]
      break;
 80046f8:	e023      	b.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68b9      	ldr	r1, [r7, #8]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fa2d 	bl	8004b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69d9      	ldr	r1, [r3, #28]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	021a      	lsls	r2, r3, #8
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	61da      	str	r2, [r3, #28]
      break;
 800473a:	e002      	b.n	8004742 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	75fb      	strb	r3, [r7, #23]
      break;
 8004740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800474a:	7dfb      	ldrb	r3, [r7, #23]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a46      	ldr	r2, [pc, #280]	@ (8004880 <TIM_Base_SetConfig+0x12c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004772:	d00f      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a43      	ldr	r2, [pc, #268]	@ (8004884 <TIM_Base_SetConfig+0x130>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00b      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a42      	ldr	r2, [pc, #264]	@ (8004888 <TIM_Base_SetConfig+0x134>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a41      	ldr	r2, [pc, #260]	@ (800488c <TIM_Base_SetConfig+0x138>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_Base_SetConfig+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a40      	ldr	r2, [pc, #256]	@ (8004890 <TIM_Base_SetConfig+0x13c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800479a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a35      	ldr	r2, [pc, #212]	@ (8004880 <TIM_Base_SetConfig+0x12c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d02b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b4:	d027      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a32      	ldr	r2, [pc, #200]	@ (8004884 <TIM_Base_SetConfig+0x130>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d023      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a31      	ldr	r2, [pc, #196]	@ (8004888 <TIM_Base_SetConfig+0x134>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01f      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a30      	ldr	r2, [pc, #192]	@ (800488c <TIM_Base_SetConfig+0x138>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004890 <TIM_Base_SetConfig+0x13c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d017      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004894 <TIM_Base_SetConfig+0x140>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004898 <TIM_Base_SetConfig+0x144>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00f      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2c      	ldr	r2, [pc, #176]	@ (800489c <TIM_Base_SetConfig+0x148>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00b      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2b      	ldr	r2, [pc, #172]	@ (80048a0 <TIM_Base_SetConfig+0x14c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2a      	ldr	r2, [pc, #168]	@ (80048a4 <TIM_Base_SetConfig+0x150>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a29      	ldr	r2, [pc, #164]	@ (80048a8 <TIM_Base_SetConfig+0x154>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d108      	bne.n	8004818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800480c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a10      	ldr	r2, [pc, #64]	@ (8004880 <TIM_Base_SetConfig+0x12c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_Base_SetConfig+0xf8>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a12      	ldr	r2, [pc, #72]	@ (8004890 <TIM_Base_SetConfig+0x13c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d103      	bne.n	8004854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d105      	bne.n	8004872 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	611a      	str	r2, [r3, #16]
  }
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40010400 	.word	0x40010400
 8004894:	40014000 	.word	0x40014000
 8004898:	40014400 	.word	0x40014400
 800489c:	40014800 	.word	0x40014800
 80048a0:	40001800 	.word	0x40001800
 80048a4:	40001c00 	.word	0x40001c00
 80048a8:	40002000 	.word	0x40002000

080048ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f023 0201 	bic.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f023 0302 	bic.w	r3, r3, #2
 80048f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a20      	ldr	r2, [pc, #128]	@ (8004984 <TIM_OC1_SetConfig+0xd8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_OC1_SetConfig+0x64>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <TIM_OC1_SetConfig+0xdc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10c      	bne.n	800492a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0308 	bic.w	r3, r3, #8
 8004916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a15      	ldr	r2, [pc, #84]	@ (8004984 <TIM_OC1_SetConfig+0xd8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_OC1_SetConfig+0x8e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a14      	ldr	r2, [pc, #80]	@ (8004988 <TIM_OC1_SetConfig+0xdc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d111      	bne.n	800495e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	621a      	str	r2, [r3, #32]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40010000 	.word	0x40010000
 8004988:	40010400 	.word	0x40010400

0800498c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f023 0210 	bic.w	r2, r3, #16
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0320 	bic.w	r3, r3, #32
 80049d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a22      	ldr	r2, [pc, #136]	@ (8004a70 <TIM_OC2_SetConfig+0xe4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d003      	beq.n	80049f4 <TIM_OC2_SetConfig+0x68>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a21      	ldr	r2, [pc, #132]	@ (8004a74 <TIM_OC2_SetConfig+0xe8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10d      	bne.n	8004a10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a17      	ldr	r2, [pc, #92]	@ (8004a70 <TIM_OC2_SetConfig+0xe4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_OC2_SetConfig+0x94>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	@ (8004a74 <TIM_OC2_SetConfig+0xe8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d113      	bne.n	8004a48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40010400 	.word	0x40010400

08004a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a21      	ldr	r2, [pc, #132]	@ (8004b58 <TIM_OC3_SetConfig+0xe0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_OC3_SetConfig+0x66>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	@ (8004b5c <TIM_OC3_SetConfig+0xe4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10d      	bne.n	8004afa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a16      	ldr	r2, [pc, #88]	@ (8004b58 <TIM_OC3_SetConfig+0xe0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d003      	beq.n	8004b0a <TIM_OC3_SetConfig+0x92>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <TIM_OC3_SetConfig+0xe4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d113      	bne.n	8004b32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40010400 	.word	0x40010400

08004b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	031b      	lsls	r3, r3, #12
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a12      	ldr	r2, [pc, #72]	@ (8004c04 <TIM_OC4_SetConfig+0xa4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_OC4_SetConfig+0x68>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a11      	ldr	r2, [pc, #68]	@ (8004c08 <TIM_OC4_SetConfig+0xa8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d109      	bne.n	8004bdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	019b      	lsls	r3, r3, #6
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40010400 	.word	0x40010400

08004c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2201      	movs	r2, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1a      	ldr	r2, [r3, #32]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	401a      	ands	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1a      	ldr	r2, [r3, #32]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	431a      	orrs	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e05a      	b.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a21      	ldr	r2, [pc, #132]	@ (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d022      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbc:	d01d      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d018      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00e      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a18      	ldr	r2, [pc, #96]	@ (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a17      	ldr	r2, [pc, #92]	@ (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a15      	ldr	r2, [pc, #84]	@ (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d10c      	bne.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40001800 	.word	0x40001800

08004d50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e03d      	b.n	8004de8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e042      	b.n	8004e8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fc f91c 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2224      	movs	r2, #36	@ 0x24
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fd69 	bl	8005910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	@ 0x28
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d175      	bne.n	8004fa0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_UART_Transmit+0x2c>
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e06e      	b.n	8004fa2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2221      	movs	r2, #33	@ 0x21
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ed2:	f7fd f94b 	bl	800216c <HAL_GetTick>
 8004ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	88fa      	ldrh	r2, [r7, #6]
 8004ee2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eec:	d108      	bne.n	8004f00 <HAL_UART_Transmit+0x6c>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d104      	bne.n	8004f00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	e003      	b.n	8004f08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f08:	e02e      	b.n	8004f68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	@ 0x80
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 fb05 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e03a      	b.n	8004fa2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	3302      	adds	r3, #2
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	e007      	b.n	8004f5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	781a      	ldrb	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	3301      	adds	r3, #1
 8004f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1cb      	bne.n	8004f0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2140      	movs	r1, #64	@ 0x40
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fad1 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e006      	b.n	8004fa2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e000      	b.n	8004fa2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
  }
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b0ba      	sub	sp, #232	@ 0xe8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <HAL_UART_IRQHandler+0x66>
 8004ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fbc2 	bl	8005794 <UART_Receive_IT>
      return;
 8005010:	e25b      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80de 	beq.w	80051d8 <HAL_UART_IRQHandler+0x22c>
 800501c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80d1 	beq.w	80051d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <HAL_UART_IRQHandler+0xae>
 8005042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005052:	f043 0201 	orr.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800505a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <HAL_UART_IRQHandler+0xd2>
 8005066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f043 0202 	orr.w	r2, r3, #2
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800507e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <HAL_UART_IRQHandler+0xf6>
 800508a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f043 0204 	orr.w	r2, r3, #4
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d011      	beq.n	80050d2 <HAL_UART_IRQHandler+0x126>
 80050ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f043 0208 	orr.w	r2, r3, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 81f2 	beq.w	80054c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_UART_IRQHandler+0x14e>
 80050e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fb4d 	bl	8005794 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005104:	2b40      	cmp	r3, #64	@ 0x40
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <HAL_UART_IRQHandler+0x17a>
 800511e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d04f      	beq.n	80051c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa55 	bl	80055d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005136:	2b40      	cmp	r3, #64	@ 0x40
 8005138:	d141      	bne.n	80051be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005150:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3314      	adds	r3, #20
 8005162:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005166:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800516a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005172:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800517e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1d9      	bne.n	800513a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d013      	beq.n	80051b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005192:	4a7e      	ldr	r2, [pc, #504]	@ (800538c <HAL_UART_IRQHandler+0x3e0>)
 8005194:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519a:	4618      	mov	r0, r3
 800519c:	f7fd f997 	bl	80024ce <HAL_DMA_Abort_IT>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d016      	beq.n	80051d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051b0:	4610      	mov	r0, r2
 80051b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	e00e      	b.n	80051d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f99e 	bl	80054f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051bc:	e00a      	b.n	80051d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f99a 	bl	80054f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c4:	e006      	b.n	80051d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f996 	bl	80054f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051d2:	e175      	b.n	80054c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	bf00      	nop
    return;
 80051d6:	e173      	b.n	80054c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 814f 	bne.w	8005480 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8148 	beq.w	8005480 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8141 	beq.w	8005480 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521e:	2b40      	cmp	r3, #64	@ 0x40
 8005220:	f040 80b6 	bne.w	8005390 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005230:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8145 	beq.w	80054c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800523e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005242:	429a      	cmp	r2, r3
 8005244:	f080 813e 	bcs.w	80054c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800524e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800525a:	f000 8088 	beq.w	800536e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800527c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800528a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800528e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005296:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1d9      	bne.n	800525e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3314      	adds	r3, #20
 80052b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3314      	adds	r3, #20
 80052ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e1      	bne.n	80052aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3314      	adds	r3, #20
 80052ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3314      	adds	r3, #20
 8005306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800530a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800530c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005310:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e3      	bne.n	80052e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800533c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533e:	f023 0310 	bic.w	r3, r3, #16
 8005342:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005350:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005352:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800535e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e3      	bne.n	800532c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005368:	4618      	mov	r0, r3
 800536a:	f7fd f840 	bl	80023ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800537c:	b29b      	uxth	r3, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	b29b      	uxth	r3, r3
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f8c1 	bl	800550c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800538a:	e09b      	b.n	80054c4 <HAL_UART_IRQHandler+0x518>
 800538c:	0800569d 	.word	0x0800569d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005398:	b29b      	uxth	r3, r3
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 808e 	beq.w	80054c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8089 	beq.w	80054c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053da:	647a      	str	r2, [r7, #68]	@ 0x44
 80053dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e3      	bne.n	80053b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3314      	adds	r3, #20
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	623b      	str	r3, [r7, #32]
   return(result);
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	f023 0301 	bic.w	r3, r3, #1
 8005404:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3314      	adds	r3, #20
 800540e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005412:	633a      	str	r2, [r7, #48]	@ 0x30
 8005414:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e3      	bne.n	80053ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	60fb      	str	r3, [r7, #12]
   return(result);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0310 	bic.w	r3, r3, #16
 800544a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005458:	61fa      	str	r2, [r7, #28]
 800545a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	617b      	str	r3, [r7, #20]
   return(result);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e3      	bne.n	8005434 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005472:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f847 	bl	800550c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800547e:	e023      	b.n	80054c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <HAL_UART_IRQHandler+0x4f4>
 800548c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f913 	bl	80056c4 <UART_Transmit_IT>
    return;
 800549e:	e014      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00e      	beq.n	80054ca <HAL_UART_IRQHandler+0x51e>
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f953 	bl	8005764 <UART_EndTransmit_IT>
    return;
 80054be:	e004      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
    return;
 80054c0:	bf00      	nop
 80054c2:	e002      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
      return;
 80054c4:	bf00      	nop
 80054c6:	e000      	b.n	80054ca <HAL_UART_IRQHandler+0x51e>
      return;
 80054c8:	bf00      	nop
  }
}
 80054ca:	37e8      	adds	r7, #232	@ 0xe8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005534:	e03b      	b.n	80055ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800553c:	d037      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fc fe15 	bl	800216c <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	6a3a      	ldr	r2, [r7, #32]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <UART_WaitOnFlagUntilTimeout+0x30>
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e03a      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d023      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b80      	cmp	r3, #128	@ 0x80
 800556a:	d020      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b40      	cmp	r3, #64	@ 0x40
 8005570:	d01d      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b08      	cmp	r3, #8
 800557e:	d116      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f81d 	bl	80055d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2208      	movs	r2, #8
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e00f      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d0b4      	beq.n	8005536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b095      	sub	sp, #84	@ 0x54
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	330c      	adds	r3, #12
 80055fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8005600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005604:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e5      	bne.n	80055de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3314      	adds	r3, #20
 8005618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	61fb      	str	r3, [r7, #28]
   return(result);
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3314      	adds	r3, #20
 8005630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005632:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005634:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005638:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e5      	bne.n	8005612 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	2b01      	cmp	r3, #1
 800564c:	d119      	bne.n	8005682 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	60bb      	str	r3, [r7, #8]
   return(result);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f023 0310 	bic.w	r3, r3, #16
 8005664:	647b      	str	r3, [r7, #68]	@ 0x44
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800566e:	61ba      	str	r2, [r7, #24]
 8005670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6979      	ldr	r1, [r7, #20]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	613b      	str	r3, [r7, #16]
   return(result);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e5      	bne.n	800564e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005690:	bf00      	nop
 8005692:	3754      	adds	r7, #84	@ 0x54
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff ff1e 	bl	80054f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b21      	cmp	r3, #33	@ 0x21
 80056d6:	d13e      	bne.n	8005756 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e0:	d114      	bne.n	800570c <UART_Transmit_IT+0x48>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d110      	bne.n	800570c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	1c9a      	adds	r2, r3, #2
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]
 800570a:	e008      	b.n	800571e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	1c59      	adds	r1, r3, #1
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6211      	str	r1, [r2, #32]
 8005716:	781a      	ldrb	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29b      	uxth	r3, r3
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	4619      	mov	r1, r3
 800572c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10f      	bne.n	8005752 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005740:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005750:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	e000      	b.n	8005758 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005756:	2302      	movs	r3, #2
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800577a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff fea3 	bl	80054d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08c      	sub	sp, #48	@ 0x30
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b22      	cmp	r3, #34	@ 0x22
 80057a6:	f040 80ae 	bne.w	8005906 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b2:	d117      	bne.n	80057e4 <UART_Receive_IT+0x50>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d113      	bne.n	80057e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	1c9a      	adds	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80057e2:	e026      	b.n	8005832 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f6:	d007      	beq.n	8005808 <UART_Receive_IT+0x74>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <UART_Receive_IT+0x82>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d106      	bne.n	8005816 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	e008      	b.n	8005828 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005822:	b2da      	uxtb	r2, r3
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005826:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29b      	uxth	r3, r3
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4619      	mov	r1, r3
 8005840:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005842:	2b00      	cmp	r3, #0
 8005844:	d15d      	bne.n	8005902 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0220 	bic.w	r2, r2, #32
 8005854:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005888:	2b01      	cmp	r3, #1
 800588a:	d135      	bne.n	80058f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	330c      	adds	r3, #12
 8005898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	613b      	str	r3, [r7, #16]
   return(result);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f023 0310 	bic.w	r3, r3, #16
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	330c      	adds	r3, #12
 80058b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b2:	623a      	str	r2, [r7, #32]
 80058b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	69f9      	ldr	r1, [r7, #28]
 80058b8:	6a3a      	ldr	r2, [r7, #32]
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e5      	bne.n	8005892 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b10      	cmp	r3, #16
 80058d2:	d10a      	bne.n	80058ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fe0b 	bl	800550c <HAL_UARTEx_RxEventCallback>
 80058f6:	e002      	b.n	80058fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff fdf3 	bl	80054e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	e002      	b.n	8005908 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e000      	b.n	8005908 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005906:	2302      	movs	r3, #2
  }
}
 8005908:	4618      	mov	r0, r3
 800590a:	3730      	adds	r7, #48	@ 0x30
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005914:	b0c0      	sub	sp, #256	@ 0x100
 8005916:	af00      	add	r7, sp, #0
 8005918:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800591c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	68d9      	ldr	r1, [r3, #12]
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	ea40 0301 	orr.w	r3, r0, r1
 8005938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	431a      	orrs	r2, r3
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	431a      	orrs	r2, r3
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005968:	f021 010c 	bic.w	r1, r1, #12
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005976:	430b      	orrs	r3, r1
 8005978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598a:	6999      	ldr	r1, [r3, #24]
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	ea40 0301 	orr.w	r3, r0, r1
 8005996:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b8f      	ldr	r3, [pc, #572]	@ (8005bdc <UART_SetConfig+0x2cc>)
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d005      	beq.n	80059b0 <UART_SetConfig+0xa0>
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4b8d      	ldr	r3, [pc, #564]	@ (8005be0 <UART_SetConfig+0x2d0>)
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d104      	bne.n	80059ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059b0:	f7fe fc72 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 80059b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059b8:	e003      	b.n	80059c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059ba:	f7fe fc59 	bl	8004270 <HAL_RCC_GetPCLK1Freq>
 80059be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059cc:	f040 810c 	bne.w	8005be8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059e2:	4622      	mov	r2, r4
 80059e4:	462b      	mov	r3, r5
 80059e6:	1891      	adds	r1, r2, r2
 80059e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059ea:	415b      	adcs	r3, r3
 80059ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059f2:	4621      	mov	r1, r4
 80059f4:	eb12 0801 	adds.w	r8, r2, r1
 80059f8:	4629      	mov	r1, r5
 80059fa:	eb43 0901 	adc.w	r9, r3, r1
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a12:	4690      	mov	r8, r2
 8005a14:	4699      	mov	r9, r3
 8005a16:	4623      	mov	r3, r4
 8005a18:	eb18 0303 	adds.w	r3, r8, r3
 8005a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a20:	462b      	mov	r3, r5
 8005a22:	eb49 0303 	adc.w	r3, r9, r3
 8005a26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a3e:	460b      	mov	r3, r1
 8005a40:	18db      	adds	r3, r3, r3
 8005a42:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a44:	4613      	mov	r3, r2
 8005a46:	eb42 0303 	adc.w	r3, r2, r3
 8005a4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a54:	f7fb f928 	bl	8000ca8 <__aeabi_uldivmod>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4b61      	ldr	r3, [pc, #388]	@ (8005be4 <UART_SetConfig+0x2d4>)
 8005a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	011c      	lsls	r4, r3, #4
 8005a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a78:	4642      	mov	r2, r8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	1891      	adds	r1, r2, r2
 8005a7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a80:	415b      	adcs	r3, r3
 8005a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a88:	4641      	mov	r1, r8
 8005a8a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a8e:	4649      	mov	r1, r9
 8005a90:	eb43 0b01 	adc.w	fp, r3, r1
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aa8:	4692      	mov	sl, r2
 8005aaa:	469b      	mov	fp, r3
 8005aac:	4643      	mov	r3, r8
 8005aae:	eb1a 0303 	adds.w	r3, sl, r3
 8005ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8005abc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005acc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	18db      	adds	r3, r3, r3
 8005ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ada:	4613      	mov	r3, r2
 8005adc:	eb42 0303 	adc.w	r3, r2, r3
 8005ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005aea:	f7fb f8dd 	bl	8000ca8 <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4611      	mov	r1, r2
 8005af4:	4b3b      	ldr	r3, [pc, #236]	@ (8005be4 <UART_SetConfig+0x2d4>)
 8005af6:	fba3 2301 	umull	r2, r3, r3, r1
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	2264      	movs	r2, #100	@ 0x64
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	1acb      	subs	r3, r1, r3
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b0a:	4b36      	ldr	r3, [pc, #216]	@ (8005be4 <UART_SetConfig+0x2d4>)
 8005b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b18:	441c      	add	r4, r3
 8005b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	464b      	mov	r3, r9
 8005b30:	1891      	adds	r1, r2, r2
 8005b32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b34:	415b      	adcs	r3, r3
 8005b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	1851      	adds	r1, r2, r1
 8005b40:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b42:	4649      	mov	r1, r9
 8005b44:	414b      	adcs	r3, r1
 8005b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b54:	4659      	mov	r1, fp
 8005b56:	00cb      	lsls	r3, r1, #3
 8005b58:	4651      	mov	r1, sl
 8005b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b5e:	4651      	mov	r1, sl
 8005b60:	00ca      	lsls	r2, r1, #3
 8005b62:	4610      	mov	r0, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	4642      	mov	r2, r8
 8005b6a:	189b      	adds	r3, r3, r2
 8005b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b70:	464b      	mov	r3, r9
 8005b72:	460a      	mov	r2, r1
 8005b74:	eb42 0303 	adc.w	r3, r2, r3
 8005b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b90:	460b      	mov	r3, r1
 8005b92:	18db      	adds	r3, r3, r3
 8005b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b96:	4613      	mov	r3, r2
 8005b98:	eb42 0303 	adc.w	r3, r2, r3
 8005b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ba2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ba6:	f7fb f87f 	bl	8000ca8 <__aeabi_uldivmod>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4b0d      	ldr	r3, [pc, #52]	@ (8005be4 <UART_SetConfig+0x2d4>)
 8005bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	2164      	movs	r1, #100	@ 0x64
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	3332      	adds	r3, #50	@ 0x32
 8005bc2:	4a08      	ldr	r2, [pc, #32]	@ (8005be4 <UART_SetConfig+0x2d4>)
 8005bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	f003 0207 	and.w	r2, r3, #7
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4422      	add	r2, r4
 8005bd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bd8:	e106      	b.n	8005de8 <UART_SetConfig+0x4d8>
 8005bda:	bf00      	nop
 8005bdc:	40011000 	.word	0x40011000
 8005be0:	40011400 	.word	0x40011400
 8005be4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bf2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bfa:	4642      	mov	r2, r8
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	1891      	adds	r1, r2, r2
 8005c00:	6239      	str	r1, [r7, #32]
 8005c02:	415b      	adcs	r3, r3
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	1854      	adds	r4, r2, r1
 8005c0e:	4649      	mov	r1, r9
 8005c10:	eb43 0501 	adc.w	r5, r3, r1
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	00eb      	lsls	r3, r5, #3
 8005c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c22:	00e2      	lsls	r2, r4, #3
 8005c24:	4614      	mov	r4, r2
 8005c26:	461d      	mov	r5, r3
 8005c28:	4643      	mov	r3, r8
 8005c2a:	18e3      	adds	r3, r4, r3
 8005c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c30:	464b      	mov	r3, r9
 8005c32:	eb45 0303 	adc.w	r3, r5, r3
 8005c36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c56:	4629      	mov	r1, r5
 8005c58:	008b      	lsls	r3, r1, #2
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c60:	4621      	mov	r1, r4
 8005c62:	008a      	lsls	r2, r1, #2
 8005c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c68:	f7fb f81e 	bl	8000ca8 <__aeabi_uldivmod>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4b60      	ldr	r3, [pc, #384]	@ (8005df4 <UART_SetConfig+0x4e4>)
 8005c72:	fba3 2302 	umull	r2, r3, r3, r2
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	011c      	lsls	r4, r3, #4
 8005c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c8c:	4642      	mov	r2, r8
 8005c8e:	464b      	mov	r3, r9
 8005c90:	1891      	adds	r1, r2, r2
 8005c92:	61b9      	str	r1, [r7, #24]
 8005c94:	415b      	adcs	r3, r3
 8005c96:	61fb      	str	r3, [r7, #28]
 8005c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c9c:	4641      	mov	r1, r8
 8005c9e:	1851      	adds	r1, r2, r1
 8005ca0:	6139      	str	r1, [r7, #16]
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	414b      	adcs	r3, r1
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cb4:	4659      	mov	r1, fp
 8005cb6:	00cb      	lsls	r3, r1, #3
 8005cb8:	4651      	mov	r1, sl
 8005cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cbe:	4651      	mov	r1, sl
 8005cc0:	00ca      	lsls	r2, r1, #3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	4642      	mov	r2, r8
 8005cca:	189b      	adds	r3, r3, r2
 8005ccc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	460a      	mov	r2, r1
 8005cd4:	eb42 0303 	adc.w	r3, r2, r3
 8005cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ce6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	008b      	lsls	r3, r1, #2
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cfe:	4641      	mov	r1, r8
 8005d00:	008a      	lsls	r2, r1, #2
 8005d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d06:	f7fa ffcf 	bl	8000ca8 <__aeabi_uldivmod>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4b38      	ldr	r3, [pc, #224]	@ (8005df4 <UART_SetConfig+0x4e4>)
 8005d12:	fba3 2301 	umull	r2, r3, r3, r1
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	2264      	movs	r2, #100	@ 0x64
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	1acb      	subs	r3, r1, r3
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	3332      	adds	r3, #50	@ 0x32
 8005d24:	4a33      	ldr	r2, [pc, #204]	@ (8005df4 <UART_SetConfig+0x4e4>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d30:	441c      	add	r4, r3
 8005d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d36:	2200      	movs	r2, #0
 8005d38:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d40:	4642      	mov	r2, r8
 8005d42:	464b      	mov	r3, r9
 8005d44:	1891      	adds	r1, r2, r2
 8005d46:	60b9      	str	r1, [r7, #8]
 8005d48:	415b      	adcs	r3, r3
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d50:	4641      	mov	r1, r8
 8005d52:	1851      	adds	r1, r2, r1
 8005d54:	6039      	str	r1, [r7, #0]
 8005d56:	4649      	mov	r1, r9
 8005d58:	414b      	adcs	r3, r1
 8005d5a:	607b      	str	r3, [r7, #4]
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d68:	4659      	mov	r1, fp
 8005d6a:	00cb      	lsls	r3, r1, #3
 8005d6c:	4651      	mov	r1, sl
 8005d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d72:	4651      	mov	r1, sl
 8005d74:	00ca      	lsls	r2, r1, #3
 8005d76:	4610      	mov	r0, r2
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	189b      	adds	r3, r3, r2
 8005d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d82:	464b      	mov	r3, r9
 8005d84:	460a      	mov	r2, r1
 8005d86:	eb42 0303 	adc.w	r3, r2, r3
 8005d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d96:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	f04f 0300 	mov.w	r3, #0
 8005da0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005da4:	4649      	mov	r1, r9
 8005da6:	008b      	lsls	r3, r1, #2
 8005da8:	4641      	mov	r1, r8
 8005daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dae:	4641      	mov	r1, r8
 8005db0:	008a      	lsls	r2, r1, #2
 8005db2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005db6:	f7fa ff77 	bl	8000ca8 <__aeabi_uldivmod>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005df4 <UART_SetConfig+0x4e4>)
 8005dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	2164      	movs	r1, #100	@ 0x64
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	3332      	adds	r3, #50	@ 0x32
 8005dd2:	4a08      	ldr	r2, [pc, #32]	@ (8005df4 <UART_SetConfig+0x4e4>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	f003 020f 	and.w	r2, r3, #15
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4422      	add	r2, r4
 8005de6:	609a      	str	r2, [r3, #8]
}
 8005de8:	bf00      	nop
 8005dea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005dee:	46bd      	mov	sp, r7
 8005df0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005df4:	51eb851f 	.word	0x51eb851f

08005df8 <__cvt>:
 8005df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	ec57 6b10 	vmov	r6, r7, d0
 8005e00:	2f00      	cmp	r7, #0
 8005e02:	460c      	mov	r4, r1
 8005e04:	4619      	mov	r1, r3
 8005e06:	463b      	mov	r3, r7
 8005e08:	bfbb      	ittet	lt
 8005e0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e0e:	461f      	movlt	r7, r3
 8005e10:	2300      	movge	r3, #0
 8005e12:	232d      	movlt	r3, #45	@ 0x2d
 8005e14:	700b      	strb	r3, [r1, #0]
 8005e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e1c:	4691      	mov	r9, r2
 8005e1e:	f023 0820 	bic.w	r8, r3, #32
 8005e22:	bfbc      	itt	lt
 8005e24:	4632      	movlt	r2, r6
 8005e26:	4616      	movlt	r6, r2
 8005e28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e2c:	d005      	beq.n	8005e3a <__cvt+0x42>
 8005e2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e32:	d100      	bne.n	8005e36 <__cvt+0x3e>
 8005e34:	3401      	adds	r4, #1
 8005e36:	2102      	movs	r1, #2
 8005e38:	e000      	b.n	8005e3c <__cvt+0x44>
 8005e3a:	2103      	movs	r1, #3
 8005e3c:	ab03      	add	r3, sp, #12
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	ab02      	add	r3, sp, #8
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	ec47 6b10 	vmov	d0, r6, r7
 8005e48:	4653      	mov	r3, sl
 8005e4a:	4622      	mov	r2, r4
 8005e4c:	f001 fed0 	bl	8007bf0 <_dtoa_r>
 8005e50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e54:	4605      	mov	r5, r0
 8005e56:	d119      	bne.n	8005e8c <__cvt+0x94>
 8005e58:	f019 0f01 	tst.w	r9, #1
 8005e5c:	d00e      	beq.n	8005e7c <__cvt+0x84>
 8005e5e:	eb00 0904 	add.w	r9, r0, r4
 8005e62:	2200      	movs	r2, #0
 8005e64:	2300      	movs	r3, #0
 8005e66:	4630      	mov	r0, r6
 8005e68:	4639      	mov	r1, r7
 8005e6a:	f7fa fe3d 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e6e:	b108      	cbz	r0, 8005e74 <__cvt+0x7c>
 8005e70:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e74:	2230      	movs	r2, #48	@ 0x30
 8005e76:	9b03      	ldr	r3, [sp, #12]
 8005e78:	454b      	cmp	r3, r9
 8005e7a:	d31e      	bcc.n	8005eba <__cvt+0xc2>
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e80:	1b5b      	subs	r3, r3, r5
 8005e82:	4628      	mov	r0, r5
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	b004      	add	sp, #16
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e90:	eb00 0904 	add.w	r9, r0, r4
 8005e94:	d1e5      	bne.n	8005e62 <__cvt+0x6a>
 8005e96:	7803      	ldrb	r3, [r0, #0]
 8005e98:	2b30      	cmp	r3, #48	@ 0x30
 8005e9a:	d10a      	bne.n	8005eb2 <__cvt+0xba>
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	f7fa fe20 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ea8:	b918      	cbnz	r0, 8005eb2 <__cvt+0xba>
 8005eaa:	f1c4 0401 	rsb	r4, r4, #1
 8005eae:	f8ca 4000 	str.w	r4, [sl]
 8005eb2:	f8da 3000 	ldr.w	r3, [sl]
 8005eb6:	4499      	add	r9, r3
 8005eb8:	e7d3      	b.n	8005e62 <__cvt+0x6a>
 8005eba:	1c59      	adds	r1, r3, #1
 8005ebc:	9103      	str	r1, [sp, #12]
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	e7d9      	b.n	8005e76 <__cvt+0x7e>

08005ec2 <__exponent>:
 8005ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	bfba      	itte	lt
 8005ec8:	4249      	neglt	r1, r1
 8005eca:	232d      	movlt	r3, #45	@ 0x2d
 8005ecc:	232b      	movge	r3, #43	@ 0x2b
 8005ece:	2909      	cmp	r1, #9
 8005ed0:	7002      	strb	r2, [r0, #0]
 8005ed2:	7043      	strb	r3, [r0, #1]
 8005ed4:	dd29      	ble.n	8005f2a <__exponent+0x68>
 8005ed6:	f10d 0307 	add.w	r3, sp, #7
 8005eda:	461d      	mov	r5, r3
 8005edc:	270a      	movs	r7, #10
 8005ede:	461a      	mov	r2, r3
 8005ee0:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ee4:	fb07 1416 	mls	r4, r7, r6, r1
 8005ee8:	3430      	adds	r4, #48	@ 0x30
 8005eea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005eee:	460c      	mov	r4, r1
 8005ef0:	2c63      	cmp	r4, #99	@ 0x63
 8005ef2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	dcf1      	bgt.n	8005ede <__exponent+0x1c>
 8005efa:	3130      	adds	r1, #48	@ 0x30
 8005efc:	1e94      	subs	r4, r2, #2
 8005efe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f02:	1c41      	adds	r1, r0, #1
 8005f04:	4623      	mov	r3, r4
 8005f06:	42ab      	cmp	r3, r5
 8005f08:	d30a      	bcc.n	8005f20 <__exponent+0x5e>
 8005f0a:	f10d 0309 	add.w	r3, sp, #9
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	42ac      	cmp	r4, r5
 8005f12:	bf88      	it	hi
 8005f14:	2300      	movhi	r3, #0
 8005f16:	3302      	adds	r3, #2
 8005f18:	4403      	add	r3, r0
 8005f1a:	1a18      	subs	r0, r3, r0
 8005f1c:	b003      	add	sp, #12
 8005f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f28:	e7ed      	b.n	8005f06 <__exponent+0x44>
 8005f2a:	2330      	movs	r3, #48	@ 0x30
 8005f2c:	3130      	adds	r1, #48	@ 0x30
 8005f2e:	7083      	strb	r3, [r0, #2]
 8005f30:	70c1      	strb	r1, [r0, #3]
 8005f32:	1d03      	adds	r3, r0, #4
 8005f34:	e7f1      	b.n	8005f1a <__exponent+0x58>
	...

08005f38 <_printf_float>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	b08d      	sub	sp, #52	@ 0x34
 8005f3e:	460c      	mov	r4, r1
 8005f40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f44:	4616      	mov	r6, r2
 8005f46:	461f      	mov	r7, r3
 8005f48:	4605      	mov	r5, r0
 8005f4a:	f001 fd77 	bl	8007a3c <_localeconv_r>
 8005f4e:	6803      	ldr	r3, [r0, #0]
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fa f99c 	bl	8000290 <strlen>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f60:	9005      	str	r0, [sp, #20]
 8005f62:	3307      	adds	r3, #7
 8005f64:	f023 0307 	bic.w	r3, r3, #7
 8005f68:	f103 0208 	add.w	r2, r3, #8
 8005f6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f70:	f8d4 b000 	ldr.w	fp, [r4]
 8005f74:	f8c8 2000 	str.w	r2, [r8]
 8005f78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f80:	9307      	str	r3, [sp, #28]
 8005f82:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f8e:	4b9c      	ldr	r3, [pc, #624]	@ (8006200 <_printf_float+0x2c8>)
 8005f90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f94:	f7fa fdda 	bl	8000b4c <__aeabi_dcmpun>
 8005f98:	bb70      	cbnz	r0, 8005ff8 <_printf_float+0xc0>
 8005f9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f9e:	4b98      	ldr	r3, [pc, #608]	@ (8006200 <_printf_float+0x2c8>)
 8005fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fa4:	f7fa fdb4 	bl	8000b10 <__aeabi_dcmple>
 8005fa8:	bb30      	cbnz	r0, 8005ff8 <_printf_float+0xc0>
 8005faa:	2200      	movs	r2, #0
 8005fac:	2300      	movs	r3, #0
 8005fae:	4640      	mov	r0, r8
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	f7fa fda3 	bl	8000afc <__aeabi_dcmplt>
 8005fb6:	b110      	cbz	r0, 8005fbe <_printf_float+0x86>
 8005fb8:	232d      	movs	r3, #45	@ 0x2d
 8005fba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fbe:	4a91      	ldr	r2, [pc, #580]	@ (8006204 <_printf_float+0x2cc>)
 8005fc0:	4b91      	ldr	r3, [pc, #580]	@ (8006208 <_printf_float+0x2d0>)
 8005fc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fc6:	bf94      	ite	ls
 8005fc8:	4690      	movls	r8, r2
 8005fca:	4698      	movhi	r8, r3
 8005fcc:	2303      	movs	r3, #3
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	f02b 0304 	bic.w	r3, fp, #4
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	f04f 0900 	mov.w	r9, #0
 8005fda:	9700      	str	r7, [sp, #0]
 8005fdc:	4633      	mov	r3, r6
 8005fde:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f000 f9d2 	bl	800638c <_printf_common>
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f040 808d 	bne.w	8006108 <_printf_float+0x1d0>
 8005fee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ff2:	b00d      	add	sp, #52	@ 0x34
 8005ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4649      	mov	r1, r9
 8006000:	f7fa fda4 	bl	8000b4c <__aeabi_dcmpun>
 8006004:	b140      	cbz	r0, 8006018 <_printf_float+0xe0>
 8006006:	464b      	mov	r3, r9
 8006008:	2b00      	cmp	r3, #0
 800600a:	bfbc      	itt	lt
 800600c:	232d      	movlt	r3, #45	@ 0x2d
 800600e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006012:	4a7e      	ldr	r2, [pc, #504]	@ (800620c <_printf_float+0x2d4>)
 8006014:	4b7e      	ldr	r3, [pc, #504]	@ (8006210 <_printf_float+0x2d8>)
 8006016:	e7d4      	b.n	8005fc2 <_printf_float+0x8a>
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800601e:	9206      	str	r2, [sp, #24]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	d13b      	bne.n	800609c <_printf_float+0x164>
 8006024:	2306      	movs	r3, #6
 8006026:	6063      	str	r3, [r4, #4]
 8006028:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800602c:	2300      	movs	r3, #0
 800602e:	6022      	str	r2, [r4, #0]
 8006030:	9303      	str	r3, [sp, #12]
 8006032:	ab0a      	add	r3, sp, #40	@ 0x28
 8006034:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006038:	ab09      	add	r3, sp, #36	@ 0x24
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	6861      	ldr	r1, [r4, #4]
 800603e:	ec49 8b10 	vmov	d0, r8, r9
 8006042:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006046:	4628      	mov	r0, r5
 8006048:	f7ff fed6 	bl	8005df8 <__cvt>
 800604c:	9b06      	ldr	r3, [sp, #24]
 800604e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006050:	2b47      	cmp	r3, #71	@ 0x47
 8006052:	4680      	mov	r8, r0
 8006054:	d129      	bne.n	80060aa <_printf_float+0x172>
 8006056:	1cc8      	adds	r0, r1, #3
 8006058:	db02      	blt.n	8006060 <_printf_float+0x128>
 800605a:	6863      	ldr	r3, [r4, #4]
 800605c:	4299      	cmp	r1, r3
 800605e:	dd41      	ble.n	80060e4 <_printf_float+0x1ac>
 8006060:	f1aa 0a02 	sub.w	sl, sl, #2
 8006064:	fa5f fa8a 	uxtb.w	sl, sl
 8006068:	3901      	subs	r1, #1
 800606a:	4652      	mov	r2, sl
 800606c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006070:	9109      	str	r1, [sp, #36]	@ 0x24
 8006072:	f7ff ff26 	bl	8005ec2 <__exponent>
 8006076:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006078:	1813      	adds	r3, r2, r0
 800607a:	2a01      	cmp	r2, #1
 800607c:	4681      	mov	r9, r0
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	dc02      	bgt.n	8006088 <_printf_float+0x150>
 8006082:	6822      	ldr	r2, [r4, #0]
 8006084:	07d2      	lsls	r2, r2, #31
 8006086:	d501      	bpl.n	800608c <_printf_float+0x154>
 8006088:	3301      	adds	r3, #1
 800608a:	6123      	str	r3, [r4, #16]
 800608c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0a2      	beq.n	8005fda <_printf_float+0xa2>
 8006094:	232d      	movs	r3, #45	@ 0x2d
 8006096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800609a:	e79e      	b.n	8005fda <_printf_float+0xa2>
 800609c:	9a06      	ldr	r2, [sp, #24]
 800609e:	2a47      	cmp	r2, #71	@ 0x47
 80060a0:	d1c2      	bne.n	8006028 <_printf_float+0xf0>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1c0      	bne.n	8006028 <_printf_float+0xf0>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e7bd      	b.n	8006026 <_printf_float+0xee>
 80060aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060ae:	d9db      	bls.n	8006068 <_printf_float+0x130>
 80060b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060b4:	d118      	bne.n	80060e8 <_printf_float+0x1b0>
 80060b6:	2900      	cmp	r1, #0
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	dd0b      	ble.n	80060d4 <_printf_float+0x19c>
 80060bc:	6121      	str	r1, [r4, #16]
 80060be:	b913      	cbnz	r3, 80060c6 <_printf_float+0x18e>
 80060c0:	6822      	ldr	r2, [r4, #0]
 80060c2:	07d0      	lsls	r0, r2, #31
 80060c4:	d502      	bpl.n	80060cc <_printf_float+0x194>
 80060c6:	3301      	adds	r3, #1
 80060c8:	440b      	add	r3, r1
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060ce:	f04f 0900 	mov.w	r9, #0
 80060d2:	e7db      	b.n	800608c <_printf_float+0x154>
 80060d4:	b913      	cbnz	r3, 80060dc <_printf_float+0x1a4>
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	07d2      	lsls	r2, r2, #31
 80060da:	d501      	bpl.n	80060e0 <_printf_float+0x1a8>
 80060dc:	3302      	adds	r3, #2
 80060de:	e7f4      	b.n	80060ca <_printf_float+0x192>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e7f2      	b.n	80060ca <_printf_float+0x192>
 80060e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ea:	4299      	cmp	r1, r3
 80060ec:	db05      	blt.n	80060fa <_printf_float+0x1c2>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6121      	str	r1, [r4, #16]
 80060f2:	07d8      	lsls	r0, r3, #31
 80060f4:	d5ea      	bpl.n	80060cc <_printf_float+0x194>
 80060f6:	1c4b      	adds	r3, r1, #1
 80060f8:	e7e7      	b.n	80060ca <_printf_float+0x192>
 80060fa:	2900      	cmp	r1, #0
 80060fc:	bfd4      	ite	le
 80060fe:	f1c1 0202 	rsble	r2, r1, #2
 8006102:	2201      	movgt	r2, #1
 8006104:	4413      	add	r3, r2
 8006106:	e7e0      	b.n	80060ca <_printf_float+0x192>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	055a      	lsls	r2, r3, #21
 800610c:	d407      	bmi.n	800611e <_printf_float+0x1e6>
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	4642      	mov	r2, r8
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	d12b      	bne.n	8006174 <_printf_float+0x23c>
 800611c:	e767      	b.n	8005fee <_printf_float+0xb6>
 800611e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006122:	f240 80dd 	bls.w	80062e0 <_printf_float+0x3a8>
 8006126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800612a:	2200      	movs	r2, #0
 800612c:	2300      	movs	r3, #0
 800612e:	f7fa fcdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8006132:	2800      	cmp	r0, #0
 8006134:	d033      	beq.n	800619e <_printf_float+0x266>
 8006136:	4a37      	ldr	r2, [pc, #220]	@ (8006214 <_printf_float+0x2dc>)
 8006138:	2301      	movs	r3, #1
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	f43f af54 	beq.w	8005fee <_printf_float+0xb6>
 8006146:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800614a:	4543      	cmp	r3, r8
 800614c:	db02      	blt.n	8006154 <_printf_float+0x21c>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	07d8      	lsls	r0, r3, #31
 8006152:	d50f      	bpl.n	8006174 <_printf_float+0x23c>
 8006154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006158:	4631      	mov	r1, r6
 800615a:	4628      	mov	r0, r5
 800615c:	47b8      	blx	r7
 800615e:	3001      	adds	r0, #1
 8006160:	f43f af45 	beq.w	8005fee <_printf_float+0xb6>
 8006164:	f04f 0900 	mov.w	r9, #0
 8006168:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800616c:	f104 0a1a 	add.w	sl, r4, #26
 8006170:	45c8      	cmp	r8, r9
 8006172:	dc09      	bgt.n	8006188 <_printf_float+0x250>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	079b      	lsls	r3, r3, #30
 8006178:	f100 8103 	bmi.w	8006382 <_printf_float+0x44a>
 800617c:	68e0      	ldr	r0, [r4, #12]
 800617e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006180:	4298      	cmp	r0, r3
 8006182:	bfb8      	it	lt
 8006184:	4618      	movlt	r0, r3
 8006186:	e734      	b.n	8005ff2 <_printf_float+0xba>
 8006188:	2301      	movs	r3, #1
 800618a:	4652      	mov	r2, sl
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	47b8      	blx	r7
 8006192:	3001      	adds	r0, #1
 8006194:	f43f af2b 	beq.w	8005fee <_printf_float+0xb6>
 8006198:	f109 0901 	add.w	r9, r9, #1
 800619c:	e7e8      	b.n	8006170 <_printf_float+0x238>
 800619e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	dc39      	bgt.n	8006218 <_printf_float+0x2e0>
 80061a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006214 <_printf_float+0x2dc>)
 80061a6:	2301      	movs	r3, #1
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	f43f af1d 	beq.w	8005fee <_printf_float+0xb6>
 80061b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061b8:	ea59 0303 	orrs.w	r3, r9, r3
 80061bc:	d102      	bne.n	80061c4 <_printf_float+0x28c>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	07d9      	lsls	r1, r3, #31
 80061c2:	d5d7      	bpl.n	8006174 <_printf_float+0x23c>
 80061c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061c8:	4631      	mov	r1, r6
 80061ca:	4628      	mov	r0, r5
 80061cc:	47b8      	blx	r7
 80061ce:	3001      	adds	r0, #1
 80061d0:	f43f af0d 	beq.w	8005fee <_printf_float+0xb6>
 80061d4:	f04f 0a00 	mov.w	sl, #0
 80061d8:	f104 0b1a 	add.w	fp, r4, #26
 80061dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061de:	425b      	negs	r3, r3
 80061e0:	4553      	cmp	r3, sl
 80061e2:	dc01      	bgt.n	80061e8 <_printf_float+0x2b0>
 80061e4:	464b      	mov	r3, r9
 80061e6:	e793      	b.n	8006110 <_printf_float+0x1d8>
 80061e8:	2301      	movs	r3, #1
 80061ea:	465a      	mov	r2, fp
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	f43f aefb 	beq.w	8005fee <_printf_float+0xb6>
 80061f8:	f10a 0a01 	add.w	sl, sl, #1
 80061fc:	e7ee      	b.n	80061dc <_printf_float+0x2a4>
 80061fe:	bf00      	nop
 8006200:	7fefffff 	.word	0x7fefffff
 8006204:	0800ad90 	.word	0x0800ad90
 8006208:	0800ad94 	.word	0x0800ad94
 800620c:	0800ad98 	.word	0x0800ad98
 8006210:	0800ad9c 	.word	0x0800ad9c
 8006214:	0800ada0 	.word	0x0800ada0
 8006218:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800621a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800621e:	4553      	cmp	r3, sl
 8006220:	bfa8      	it	ge
 8006222:	4653      	movge	r3, sl
 8006224:	2b00      	cmp	r3, #0
 8006226:	4699      	mov	r9, r3
 8006228:	dc36      	bgt.n	8006298 <_printf_float+0x360>
 800622a:	f04f 0b00 	mov.w	fp, #0
 800622e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006232:	f104 021a 	add.w	r2, r4, #26
 8006236:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006238:	9306      	str	r3, [sp, #24]
 800623a:	eba3 0309 	sub.w	r3, r3, r9
 800623e:	455b      	cmp	r3, fp
 8006240:	dc31      	bgt.n	80062a6 <_printf_float+0x36e>
 8006242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006244:	459a      	cmp	sl, r3
 8006246:	dc3a      	bgt.n	80062be <_printf_float+0x386>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	07da      	lsls	r2, r3, #31
 800624c:	d437      	bmi.n	80062be <_printf_float+0x386>
 800624e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006250:	ebaa 0903 	sub.w	r9, sl, r3
 8006254:	9b06      	ldr	r3, [sp, #24]
 8006256:	ebaa 0303 	sub.w	r3, sl, r3
 800625a:	4599      	cmp	r9, r3
 800625c:	bfa8      	it	ge
 800625e:	4699      	movge	r9, r3
 8006260:	f1b9 0f00 	cmp.w	r9, #0
 8006264:	dc33      	bgt.n	80062ce <_printf_float+0x396>
 8006266:	f04f 0800 	mov.w	r8, #0
 800626a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800626e:	f104 0b1a 	add.w	fp, r4, #26
 8006272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006274:	ebaa 0303 	sub.w	r3, sl, r3
 8006278:	eba3 0309 	sub.w	r3, r3, r9
 800627c:	4543      	cmp	r3, r8
 800627e:	f77f af79 	ble.w	8006174 <_printf_float+0x23c>
 8006282:	2301      	movs	r3, #1
 8006284:	465a      	mov	r2, fp
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	f43f aeae 	beq.w	8005fee <_printf_float+0xb6>
 8006292:	f108 0801 	add.w	r8, r8, #1
 8006296:	e7ec      	b.n	8006272 <_printf_float+0x33a>
 8006298:	4642      	mov	r2, r8
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	d1c2      	bne.n	800622a <_printf_float+0x2f2>
 80062a4:	e6a3      	b.n	8005fee <_printf_float+0xb6>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	9206      	str	r2, [sp, #24]
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	f43f ae9c 	beq.w	8005fee <_printf_float+0xb6>
 80062b6:	9a06      	ldr	r2, [sp, #24]
 80062b8:	f10b 0b01 	add.w	fp, fp, #1
 80062bc:	e7bb      	b.n	8006236 <_printf_float+0x2fe>
 80062be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	47b8      	blx	r7
 80062c8:	3001      	adds	r0, #1
 80062ca:	d1c0      	bne.n	800624e <_printf_float+0x316>
 80062cc:	e68f      	b.n	8005fee <_printf_float+0xb6>
 80062ce:	9a06      	ldr	r2, [sp, #24]
 80062d0:	464b      	mov	r3, r9
 80062d2:	4442      	add	r2, r8
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	d1c3      	bne.n	8006266 <_printf_float+0x32e>
 80062de:	e686      	b.n	8005fee <_printf_float+0xb6>
 80062e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062e4:	f1ba 0f01 	cmp.w	sl, #1
 80062e8:	dc01      	bgt.n	80062ee <_printf_float+0x3b6>
 80062ea:	07db      	lsls	r3, r3, #31
 80062ec:	d536      	bpl.n	800635c <_printf_float+0x424>
 80062ee:	2301      	movs	r3, #1
 80062f0:	4642      	mov	r2, r8
 80062f2:	4631      	mov	r1, r6
 80062f4:	4628      	mov	r0, r5
 80062f6:	47b8      	blx	r7
 80062f8:	3001      	adds	r0, #1
 80062fa:	f43f ae78 	beq.w	8005fee <_printf_float+0xb6>
 80062fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006302:	4631      	mov	r1, r6
 8006304:	4628      	mov	r0, r5
 8006306:	47b8      	blx	r7
 8006308:	3001      	adds	r0, #1
 800630a:	f43f ae70 	beq.w	8005fee <_printf_float+0xb6>
 800630e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006312:	2200      	movs	r2, #0
 8006314:	2300      	movs	r3, #0
 8006316:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800631a:	f7fa fbe5 	bl	8000ae8 <__aeabi_dcmpeq>
 800631e:	b9c0      	cbnz	r0, 8006352 <_printf_float+0x41a>
 8006320:	4653      	mov	r3, sl
 8006322:	f108 0201 	add.w	r2, r8, #1
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	d10c      	bne.n	800634a <_printf_float+0x412>
 8006330:	e65d      	b.n	8005fee <_printf_float+0xb6>
 8006332:	2301      	movs	r3, #1
 8006334:	465a      	mov	r2, fp
 8006336:	4631      	mov	r1, r6
 8006338:	4628      	mov	r0, r5
 800633a:	47b8      	blx	r7
 800633c:	3001      	adds	r0, #1
 800633e:	f43f ae56 	beq.w	8005fee <_printf_float+0xb6>
 8006342:	f108 0801 	add.w	r8, r8, #1
 8006346:	45d0      	cmp	r8, sl
 8006348:	dbf3      	blt.n	8006332 <_printf_float+0x3fa>
 800634a:	464b      	mov	r3, r9
 800634c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006350:	e6df      	b.n	8006112 <_printf_float+0x1da>
 8006352:	f04f 0800 	mov.w	r8, #0
 8006356:	f104 0b1a 	add.w	fp, r4, #26
 800635a:	e7f4      	b.n	8006346 <_printf_float+0x40e>
 800635c:	2301      	movs	r3, #1
 800635e:	4642      	mov	r2, r8
 8006360:	e7e1      	b.n	8006326 <_printf_float+0x3ee>
 8006362:	2301      	movs	r3, #1
 8006364:	464a      	mov	r2, r9
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	47b8      	blx	r7
 800636c:	3001      	adds	r0, #1
 800636e:	f43f ae3e 	beq.w	8005fee <_printf_float+0xb6>
 8006372:	f108 0801 	add.w	r8, r8, #1
 8006376:	68e3      	ldr	r3, [r4, #12]
 8006378:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800637a:	1a5b      	subs	r3, r3, r1
 800637c:	4543      	cmp	r3, r8
 800637e:	dcf0      	bgt.n	8006362 <_printf_float+0x42a>
 8006380:	e6fc      	b.n	800617c <_printf_float+0x244>
 8006382:	f04f 0800 	mov.w	r8, #0
 8006386:	f104 0919 	add.w	r9, r4, #25
 800638a:	e7f4      	b.n	8006376 <_printf_float+0x43e>

0800638c <_printf_common>:
 800638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	4616      	mov	r6, r2
 8006392:	4698      	mov	r8, r3
 8006394:	688a      	ldr	r2, [r1, #8]
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800639c:	4293      	cmp	r3, r2
 800639e:	bfb8      	it	lt
 80063a0:	4613      	movlt	r3, r2
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063a8:	4607      	mov	r7, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	b10a      	cbz	r2, 80063b2 <_printf_common+0x26>
 80063ae:	3301      	adds	r3, #1
 80063b0:	6033      	str	r3, [r6, #0]
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	0699      	lsls	r1, r3, #26
 80063b6:	bf42      	ittt	mi
 80063b8:	6833      	ldrmi	r3, [r6, #0]
 80063ba:	3302      	addmi	r3, #2
 80063bc:	6033      	strmi	r3, [r6, #0]
 80063be:	6825      	ldr	r5, [r4, #0]
 80063c0:	f015 0506 	ands.w	r5, r5, #6
 80063c4:	d106      	bne.n	80063d4 <_printf_common+0x48>
 80063c6:	f104 0a19 	add.w	sl, r4, #25
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	6832      	ldr	r2, [r6, #0]
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dc26      	bgt.n	8006422 <_printf_common+0x96>
 80063d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063d8:	6822      	ldr	r2, [r4, #0]
 80063da:	3b00      	subs	r3, #0
 80063dc:	bf18      	it	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	0692      	lsls	r2, r2, #26
 80063e2:	d42b      	bmi.n	800643c <_printf_common+0xb0>
 80063e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063e8:	4641      	mov	r1, r8
 80063ea:	4638      	mov	r0, r7
 80063ec:	47c8      	blx	r9
 80063ee:	3001      	adds	r0, #1
 80063f0:	d01e      	beq.n	8006430 <_printf_common+0xa4>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	6922      	ldr	r2, [r4, #16]
 80063f6:	f003 0306 	and.w	r3, r3, #6
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf02      	ittt	eq
 80063fe:	68e5      	ldreq	r5, [r4, #12]
 8006400:	6833      	ldreq	r3, [r6, #0]
 8006402:	1aed      	subeq	r5, r5, r3
 8006404:	68a3      	ldr	r3, [r4, #8]
 8006406:	bf0c      	ite	eq
 8006408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800640c:	2500      	movne	r5, #0
 800640e:	4293      	cmp	r3, r2
 8006410:	bfc4      	itt	gt
 8006412:	1a9b      	subgt	r3, r3, r2
 8006414:	18ed      	addgt	r5, r5, r3
 8006416:	2600      	movs	r6, #0
 8006418:	341a      	adds	r4, #26
 800641a:	42b5      	cmp	r5, r6
 800641c:	d11a      	bne.n	8006454 <_printf_common+0xc8>
 800641e:	2000      	movs	r0, #0
 8006420:	e008      	b.n	8006434 <_printf_common+0xa8>
 8006422:	2301      	movs	r3, #1
 8006424:	4652      	mov	r2, sl
 8006426:	4641      	mov	r1, r8
 8006428:	4638      	mov	r0, r7
 800642a:	47c8      	blx	r9
 800642c:	3001      	adds	r0, #1
 800642e:	d103      	bne.n	8006438 <_printf_common+0xac>
 8006430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	3501      	adds	r5, #1
 800643a:	e7c6      	b.n	80063ca <_printf_common+0x3e>
 800643c:	18e1      	adds	r1, r4, r3
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	2030      	movs	r0, #48	@ 0x30
 8006442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006446:	4422      	add	r2, r4
 8006448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800644c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006450:	3302      	adds	r3, #2
 8006452:	e7c7      	b.n	80063e4 <_printf_common+0x58>
 8006454:	2301      	movs	r3, #1
 8006456:	4622      	mov	r2, r4
 8006458:	4641      	mov	r1, r8
 800645a:	4638      	mov	r0, r7
 800645c:	47c8      	blx	r9
 800645e:	3001      	adds	r0, #1
 8006460:	d0e6      	beq.n	8006430 <_printf_common+0xa4>
 8006462:	3601      	adds	r6, #1
 8006464:	e7d9      	b.n	800641a <_printf_common+0x8e>
	...

08006468 <_printf_i>:
 8006468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	7e0f      	ldrb	r7, [r1, #24]
 800646e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006470:	2f78      	cmp	r7, #120	@ 0x78
 8006472:	4691      	mov	r9, r2
 8006474:	4680      	mov	r8, r0
 8006476:	460c      	mov	r4, r1
 8006478:	469a      	mov	sl, r3
 800647a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800647e:	d807      	bhi.n	8006490 <_printf_i+0x28>
 8006480:	2f62      	cmp	r7, #98	@ 0x62
 8006482:	d80a      	bhi.n	800649a <_printf_i+0x32>
 8006484:	2f00      	cmp	r7, #0
 8006486:	f000 80d2 	beq.w	800662e <_printf_i+0x1c6>
 800648a:	2f58      	cmp	r7, #88	@ 0x58
 800648c:	f000 80b9 	beq.w	8006602 <_printf_i+0x19a>
 8006490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006498:	e03a      	b.n	8006510 <_printf_i+0xa8>
 800649a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800649e:	2b15      	cmp	r3, #21
 80064a0:	d8f6      	bhi.n	8006490 <_printf_i+0x28>
 80064a2:	a101      	add	r1, pc, #4	@ (adr r1, 80064a8 <_printf_i+0x40>)
 80064a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064a8:	08006501 	.word	0x08006501
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006491 	.word	0x08006491
 80064b4:	08006491 	.word	0x08006491
 80064b8:	08006491 	.word	0x08006491
 80064bc:	08006491 	.word	0x08006491
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006491 	.word	0x08006491
 80064c8:	08006491 	.word	0x08006491
 80064cc:	08006491 	.word	0x08006491
 80064d0:	08006491 	.word	0x08006491
 80064d4:	08006615 	.word	0x08006615
 80064d8:	0800653f 	.word	0x0800653f
 80064dc:	080065cf 	.word	0x080065cf
 80064e0:	08006491 	.word	0x08006491
 80064e4:	08006491 	.word	0x08006491
 80064e8:	08006637 	.word	0x08006637
 80064ec:	08006491 	.word	0x08006491
 80064f0:	0800653f 	.word	0x0800653f
 80064f4:	08006491 	.word	0x08006491
 80064f8:	08006491 	.word	0x08006491
 80064fc:	080065d7 	.word	0x080065d7
 8006500:	6833      	ldr	r3, [r6, #0]
 8006502:	1d1a      	adds	r2, r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6032      	str	r2, [r6, #0]
 8006508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800650c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006510:	2301      	movs	r3, #1
 8006512:	e09d      	b.n	8006650 <_printf_i+0x1e8>
 8006514:	6833      	ldr	r3, [r6, #0]
 8006516:	6820      	ldr	r0, [r4, #0]
 8006518:	1d19      	adds	r1, r3, #4
 800651a:	6031      	str	r1, [r6, #0]
 800651c:	0606      	lsls	r6, r0, #24
 800651e:	d501      	bpl.n	8006524 <_printf_i+0xbc>
 8006520:	681d      	ldr	r5, [r3, #0]
 8006522:	e003      	b.n	800652c <_printf_i+0xc4>
 8006524:	0645      	lsls	r5, r0, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0xb8>
 8006528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800652c:	2d00      	cmp	r5, #0
 800652e:	da03      	bge.n	8006538 <_printf_i+0xd0>
 8006530:	232d      	movs	r3, #45	@ 0x2d
 8006532:	426d      	negs	r5, r5
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006538:	4859      	ldr	r0, [pc, #356]	@ (80066a0 <_printf_i+0x238>)
 800653a:	230a      	movs	r3, #10
 800653c:	e011      	b.n	8006562 <_printf_i+0xfa>
 800653e:	6821      	ldr	r1, [r4, #0]
 8006540:	6833      	ldr	r3, [r6, #0]
 8006542:	0608      	lsls	r0, r1, #24
 8006544:	f853 5b04 	ldr.w	r5, [r3], #4
 8006548:	d402      	bmi.n	8006550 <_printf_i+0xe8>
 800654a:	0649      	lsls	r1, r1, #25
 800654c:	bf48      	it	mi
 800654e:	b2ad      	uxthmi	r5, r5
 8006550:	2f6f      	cmp	r7, #111	@ 0x6f
 8006552:	4853      	ldr	r0, [pc, #332]	@ (80066a0 <_printf_i+0x238>)
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	bf14      	ite	ne
 8006558:	230a      	movne	r3, #10
 800655a:	2308      	moveq	r3, #8
 800655c:	2100      	movs	r1, #0
 800655e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006562:	6866      	ldr	r6, [r4, #4]
 8006564:	60a6      	str	r6, [r4, #8]
 8006566:	2e00      	cmp	r6, #0
 8006568:	bfa2      	ittt	ge
 800656a:	6821      	ldrge	r1, [r4, #0]
 800656c:	f021 0104 	bicge.w	r1, r1, #4
 8006570:	6021      	strge	r1, [r4, #0]
 8006572:	b90d      	cbnz	r5, 8006578 <_printf_i+0x110>
 8006574:	2e00      	cmp	r6, #0
 8006576:	d04b      	beq.n	8006610 <_printf_i+0x1a8>
 8006578:	4616      	mov	r6, r2
 800657a:	fbb5 f1f3 	udiv	r1, r5, r3
 800657e:	fb03 5711 	mls	r7, r3, r1, r5
 8006582:	5dc7      	ldrb	r7, [r0, r7]
 8006584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006588:	462f      	mov	r7, r5
 800658a:	42bb      	cmp	r3, r7
 800658c:	460d      	mov	r5, r1
 800658e:	d9f4      	bls.n	800657a <_printf_i+0x112>
 8006590:	2b08      	cmp	r3, #8
 8006592:	d10b      	bne.n	80065ac <_printf_i+0x144>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	07df      	lsls	r7, r3, #31
 8006598:	d508      	bpl.n	80065ac <_printf_i+0x144>
 800659a:	6923      	ldr	r3, [r4, #16]
 800659c:	6861      	ldr	r1, [r4, #4]
 800659e:	4299      	cmp	r1, r3
 80065a0:	bfde      	ittt	le
 80065a2:	2330      	movle	r3, #48	@ 0x30
 80065a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80065ac:	1b92      	subs	r2, r2, r6
 80065ae:	6122      	str	r2, [r4, #16]
 80065b0:	f8cd a000 	str.w	sl, [sp]
 80065b4:	464b      	mov	r3, r9
 80065b6:	aa03      	add	r2, sp, #12
 80065b8:	4621      	mov	r1, r4
 80065ba:	4640      	mov	r0, r8
 80065bc:	f7ff fee6 	bl	800638c <_printf_common>
 80065c0:	3001      	adds	r0, #1
 80065c2:	d14a      	bne.n	800665a <_printf_i+0x1f2>
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065c8:	b004      	add	sp, #16
 80065ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	f043 0320 	orr.w	r3, r3, #32
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	4833      	ldr	r0, [pc, #204]	@ (80066a4 <_printf_i+0x23c>)
 80065d8:	2778      	movs	r7, #120	@ 0x78
 80065da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	6831      	ldr	r1, [r6, #0]
 80065e2:	061f      	lsls	r7, r3, #24
 80065e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80065e8:	d402      	bmi.n	80065f0 <_printf_i+0x188>
 80065ea:	065f      	lsls	r7, r3, #25
 80065ec:	bf48      	it	mi
 80065ee:	b2ad      	uxthmi	r5, r5
 80065f0:	6031      	str	r1, [r6, #0]
 80065f2:	07d9      	lsls	r1, r3, #31
 80065f4:	bf44      	itt	mi
 80065f6:	f043 0320 	orrmi.w	r3, r3, #32
 80065fa:	6023      	strmi	r3, [r4, #0]
 80065fc:	b11d      	cbz	r5, 8006606 <_printf_i+0x19e>
 80065fe:	2310      	movs	r3, #16
 8006600:	e7ac      	b.n	800655c <_printf_i+0xf4>
 8006602:	4827      	ldr	r0, [pc, #156]	@ (80066a0 <_printf_i+0x238>)
 8006604:	e7e9      	b.n	80065da <_printf_i+0x172>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	f023 0320 	bic.w	r3, r3, #32
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	e7f6      	b.n	80065fe <_printf_i+0x196>
 8006610:	4616      	mov	r6, r2
 8006612:	e7bd      	b.n	8006590 <_printf_i+0x128>
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	6825      	ldr	r5, [r4, #0]
 8006618:	6961      	ldr	r1, [r4, #20]
 800661a:	1d18      	adds	r0, r3, #4
 800661c:	6030      	str	r0, [r6, #0]
 800661e:	062e      	lsls	r6, r5, #24
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	d501      	bpl.n	8006628 <_printf_i+0x1c0>
 8006624:	6019      	str	r1, [r3, #0]
 8006626:	e002      	b.n	800662e <_printf_i+0x1c6>
 8006628:	0668      	lsls	r0, r5, #25
 800662a:	d5fb      	bpl.n	8006624 <_printf_i+0x1bc>
 800662c:	8019      	strh	r1, [r3, #0]
 800662e:	2300      	movs	r3, #0
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	4616      	mov	r6, r2
 8006634:	e7bc      	b.n	80065b0 <_printf_i+0x148>
 8006636:	6833      	ldr	r3, [r6, #0]
 8006638:	1d1a      	adds	r2, r3, #4
 800663a:	6032      	str	r2, [r6, #0]
 800663c:	681e      	ldr	r6, [r3, #0]
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	2100      	movs	r1, #0
 8006642:	4630      	mov	r0, r6
 8006644:	f7f9 fdd4 	bl	80001f0 <memchr>
 8006648:	b108      	cbz	r0, 800664e <_printf_i+0x1e6>
 800664a:	1b80      	subs	r0, r0, r6
 800664c:	6060      	str	r0, [r4, #4]
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	2300      	movs	r3, #0
 8006654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006658:	e7aa      	b.n	80065b0 <_printf_i+0x148>
 800665a:	6923      	ldr	r3, [r4, #16]
 800665c:	4632      	mov	r2, r6
 800665e:	4649      	mov	r1, r9
 8006660:	4640      	mov	r0, r8
 8006662:	47d0      	blx	sl
 8006664:	3001      	adds	r0, #1
 8006666:	d0ad      	beq.n	80065c4 <_printf_i+0x15c>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	079b      	lsls	r3, r3, #30
 800666c:	d413      	bmi.n	8006696 <_printf_i+0x22e>
 800666e:	68e0      	ldr	r0, [r4, #12]
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	4298      	cmp	r0, r3
 8006674:	bfb8      	it	lt
 8006676:	4618      	movlt	r0, r3
 8006678:	e7a6      	b.n	80065c8 <_printf_i+0x160>
 800667a:	2301      	movs	r3, #1
 800667c:	4632      	mov	r2, r6
 800667e:	4649      	mov	r1, r9
 8006680:	4640      	mov	r0, r8
 8006682:	47d0      	blx	sl
 8006684:	3001      	adds	r0, #1
 8006686:	d09d      	beq.n	80065c4 <_printf_i+0x15c>
 8006688:	3501      	adds	r5, #1
 800668a:	68e3      	ldr	r3, [r4, #12]
 800668c:	9903      	ldr	r1, [sp, #12]
 800668e:	1a5b      	subs	r3, r3, r1
 8006690:	42ab      	cmp	r3, r5
 8006692:	dcf2      	bgt.n	800667a <_printf_i+0x212>
 8006694:	e7eb      	b.n	800666e <_printf_i+0x206>
 8006696:	2500      	movs	r5, #0
 8006698:	f104 0619 	add.w	r6, r4, #25
 800669c:	e7f5      	b.n	800668a <_printf_i+0x222>
 800669e:	bf00      	nop
 80066a0:	0800ada2 	.word	0x0800ada2
 80066a4:	0800adb3 	.word	0x0800adb3

080066a8 <_scanf_float>:
 80066a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ac:	b087      	sub	sp, #28
 80066ae:	4617      	mov	r7, r2
 80066b0:	9303      	str	r3, [sp, #12]
 80066b2:	688b      	ldr	r3, [r1, #8]
 80066b4:	1e5a      	subs	r2, r3, #1
 80066b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80066ba:	bf81      	itttt	hi
 80066bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80066c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80066c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80066c8:	608b      	strhi	r3, [r1, #8]
 80066ca:	680b      	ldr	r3, [r1, #0]
 80066cc:	460a      	mov	r2, r1
 80066ce:	f04f 0500 	mov.w	r5, #0
 80066d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80066d6:	f842 3b1c 	str.w	r3, [r2], #28
 80066da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80066de:	4680      	mov	r8, r0
 80066e0:	460c      	mov	r4, r1
 80066e2:	bf98      	it	ls
 80066e4:	f04f 0b00 	movls.w	fp, #0
 80066e8:	9201      	str	r2, [sp, #4]
 80066ea:	4616      	mov	r6, r2
 80066ec:	46aa      	mov	sl, r5
 80066ee:	46a9      	mov	r9, r5
 80066f0:	9502      	str	r5, [sp, #8]
 80066f2:	68a2      	ldr	r2, [r4, #8]
 80066f4:	b152      	cbz	r2, 800670c <_scanf_float+0x64>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b4e      	cmp	r3, #78	@ 0x4e
 80066fc:	d864      	bhi.n	80067c8 <_scanf_float+0x120>
 80066fe:	2b40      	cmp	r3, #64	@ 0x40
 8006700:	d83c      	bhi.n	800677c <_scanf_float+0xd4>
 8006702:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006706:	b2c8      	uxtb	r0, r1
 8006708:	280e      	cmp	r0, #14
 800670a:	d93a      	bls.n	8006782 <_scanf_float+0xda>
 800670c:	f1b9 0f00 	cmp.w	r9, #0
 8006710:	d003      	beq.n	800671a <_scanf_float+0x72>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800671e:	f1ba 0f01 	cmp.w	sl, #1
 8006722:	f200 8117 	bhi.w	8006954 <_scanf_float+0x2ac>
 8006726:	9b01      	ldr	r3, [sp, #4]
 8006728:	429e      	cmp	r6, r3
 800672a:	f200 8108 	bhi.w	800693e <_scanf_float+0x296>
 800672e:	2001      	movs	r0, #1
 8006730:	b007      	add	sp, #28
 8006732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006736:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800673a:	2a0d      	cmp	r2, #13
 800673c:	d8e6      	bhi.n	800670c <_scanf_float+0x64>
 800673e:	a101      	add	r1, pc, #4	@ (adr r1, 8006744 <_scanf_float+0x9c>)
 8006740:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006744:	0800688b 	.word	0x0800688b
 8006748:	0800670d 	.word	0x0800670d
 800674c:	0800670d 	.word	0x0800670d
 8006750:	0800670d 	.word	0x0800670d
 8006754:	080068eb 	.word	0x080068eb
 8006758:	080068c3 	.word	0x080068c3
 800675c:	0800670d 	.word	0x0800670d
 8006760:	0800670d 	.word	0x0800670d
 8006764:	08006899 	.word	0x08006899
 8006768:	0800670d 	.word	0x0800670d
 800676c:	0800670d 	.word	0x0800670d
 8006770:	0800670d 	.word	0x0800670d
 8006774:	0800670d 	.word	0x0800670d
 8006778:	08006851 	.word	0x08006851
 800677c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006780:	e7db      	b.n	800673a <_scanf_float+0x92>
 8006782:	290e      	cmp	r1, #14
 8006784:	d8c2      	bhi.n	800670c <_scanf_float+0x64>
 8006786:	a001      	add	r0, pc, #4	@ (adr r0, 800678c <_scanf_float+0xe4>)
 8006788:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800678c:	08006841 	.word	0x08006841
 8006790:	0800670d 	.word	0x0800670d
 8006794:	08006841 	.word	0x08006841
 8006798:	080068d7 	.word	0x080068d7
 800679c:	0800670d 	.word	0x0800670d
 80067a0:	080067e9 	.word	0x080067e9
 80067a4:	08006827 	.word	0x08006827
 80067a8:	08006827 	.word	0x08006827
 80067ac:	08006827 	.word	0x08006827
 80067b0:	08006827 	.word	0x08006827
 80067b4:	08006827 	.word	0x08006827
 80067b8:	08006827 	.word	0x08006827
 80067bc:	08006827 	.word	0x08006827
 80067c0:	08006827 	.word	0x08006827
 80067c4:	08006827 	.word	0x08006827
 80067c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80067ca:	d809      	bhi.n	80067e0 <_scanf_float+0x138>
 80067cc:	2b60      	cmp	r3, #96	@ 0x60
 80067ce:	d8b2      	bhi.n	8006736 <_scanf_float+0x8e>
 80067d0:	2b54      	cmp	r3, #84	@ 0x54
 80067d2:	d07b      	beq.n	80068cc <_scanf_float+0x224>
 80067d4:	2b59      	cmp	r3, #89	@ 0x59
 80067d6:	d199      	bne.n	800670c <_scanf_float+0x64>
 80067d8:	2d07      	cmp	r5, #7
 80067da:	d197      	bne.n	800670c <_scanf_float+0x64>
 80067dc:	2508      	movs	r5, #8
 80067de:	e02c      	b.n	800683a <_scanf_float+0x192>
 80067e0:	2b74      	cmp	r3, #116	@ 0x74
 80067e2:	d073      	beq.n	80068cc <_scanf_float+0x224>
 80067e4:	2b79      	cmp	r3, #121	@ 0x79
 80067e6:	e7f6      	b.n	80067d6 <_scanf_float+0x12e>
 80067e8:	6821      	ldr	r1, [r4, #0]
 80067ea:	05c8      	lsls	r0, r1, #23
 80067ec:	d51b      	bpl.n	8006826 <_scanf_float+0x17e>
 80067ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80067f2:	6021      	str	r1, [r4, #0]
 80067f4:	f109 0901 	add.w	r9, r9, #1
 80067f8:	f1bb 0f00 	cmp.w	fp, #0
 80067fc:	d003      	beq.n	8006806 <_scanf_float+0x15e>
 80067fe:	3201      	adds	r2, #1
 8006800:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006804:	60a2      	str	r2, [r4, #8]
 8006806:	68a3      	ldr	r3, [r4, #8]
 8006808:	3b01      	subs	r3, #1
 800680a:	60a3      	str	r3, [r4, #8]
 800680c:	6923      	ldr	r3, [r4, #16]
 800680e:	3301      	adds	r3, #1
 8006810:	6123      	str	r3, [r4, #16]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3b01      	subs	r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	607b      	str	r3, [r7, #4]
 800681a:	f340 8087 	ble.w	800692c <_scanf_float+0x284>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	e765      	b.n	80066f2 <_scanf_float+0x4a>
 8006826:	eb1a 0105 	adds.w	r1, sl, r5
 800682a:	f47f af6f 	bne.w	800670c <_scanf_float+0x64>
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006834:	6022      	str	r2, [r4, #0]
 8006836:	460d      	mov	r5, r1
 8006838:	468a      	mov	sl, r1
 800683a:	f806 3b01 	strb.w	r3, [r6], #1
 800683e:	e7e2      	b.n	8006806 <_scanf_float+0x15e>
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	0610      	lsls	r0, r2, #24
 8006844:	f57f af62 	bpl.w	800670c <_scanf_float+0x64>
 8006848:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800684c:	6022      	str	r2, [r4, #0]
 800684e:	e7f4      	b.n	800683a <_scanf_float+0x192>
 8006850:	f1ba 0f00 	cmp.w	sl, #0
 8006854:	d10e      	bne.n	8006874 <_scanf_float+0x1cc>
 8006856:	f1b9 0f00 	cmp.w	r9, #0
 800685a:	d10e      	bne.n	800687a <_scanf_float+0x1d2>
 800685c:	6822      	ldr	r2, [r4, #0]
 800685e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006862:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006866:	d108      	bne.n	800687a <_scanf_float+0x1d2>
 8006868:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	f04f 0a01 	mov.w	sl, #1
 8006872:	e7e2      	b.n	800683a <_scanf_float+0x192>
 8006874:	f1ba 0f02 	cmp.w	sl, #2
 8006878:	d055      	beq.n	8006926 <_scanf_float+0x27e>
 800687a:	2d01      	cmp	r5, #1
 800687c:	d002      	beq.n	8006884 <_scanf_float+0x1dc>
 800687e:	2d04      	cmp	r5, #4
 8006880:	f47f af44 	bne.w	800670c <_scanf_float+0x64>
 8006884:	3501      	adds	r5, #1
 8006886:	b2ed      	uxtb	r5, r5
 8006888:	e7d7      	b.n	800683a <_scanf_float+0x192>
 800688a:	f1ba 0f01 	cmp.w	sl, #1
 800688e:	f47f af3d 	bne.w	800670c <_scanf_float+0x64>
 8006892:	f04f 0a02 	mov.w	sl, #2
 8006896:	e7d0      	b.n	800683a <_scanf_float+0x192>
 8006898:	b97d      	cbnz	r5, 80068ba <_scanf_float+0x212>
 800689a:	f1b9 0f00 	cmp.w	r9, #0
 800689e:	f47f af38 	bne.w	8006712 <_scanf_float+0x6a>
 80068a2:	6822      	ldr	r2, [r4, #0]
 80068a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80068a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80068ac:	f040 8108 	bne.w	8006ac0 <_scanf_float+0x418>
 80068b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80068b4:	6022      	str	r2, [r4, #0]
 80068b6:	2501      	movs	r5, #1
 80068b8:	e7bf      	b.n	800683a <_scanf_float+0x192>
 80068ba:	2d03      	cmp	r5, #3
 80068bc:	d0e2      	beq.n	8006884 <_scanf_float+0x1dc>
 80068be:	2d05      	cmp	r5, #5
 80068c0:	e7de      	b.n	8006880 <_scanf_float+0x1d8>
 80068c2:	2d02      	cmp	r5, #2
 80068c4:	f47f af22 	bne.w	800670c <_scanf_float+0x64>
 80068c8:	2503      	movs	r5, #3
 80068ca:	e7b6      	b.n	800683a <_scanf_float+0x192>
 80068cc:	2d06      	cmp	r5, #6
 80068ce:	f47f af1d 	bne.w	800670c <_scanf_float+0x64>
 80068d2:	2507      	movs	r5, #7
 80068d4:	e7b1      	b.n	800683a <_scanf_float+0x192>
 80068d6:	6822      	ldr	r2, [r4, #0]
 80068d8:	0591      	lsls	r1, r2, #22
 80068da:	f57f af17 	bpl.w	800670c <_scanf_float+0x64>
 80068de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80068e2:	6022      	str	r2, [r4, #0]
 80068e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80068e8:	e7a7      	b.n	800683a <_scanf_float+0x192>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80068f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80068f4:	d006      	beq.n	8006904 <_scanf_float+0x25c>
 80068f6:	0550      	lsls	r0, r2, #21
 80068f8:	f57f af08 	bpl.w	800670c <_scanf_float+0x64>
 80068fc:	f1b9 0f00 	cmp.w	r9, #0
 8006900:	f000 80de 	beq.w	8006ac0 <_scanf_float+0x418>
 8006904:	0591      	lsls	r1, r2, #22
 8006906:	bf58      	it	pl
 8006908:	9902      	ldrpl	r1, [sp, #8]
 800690a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800690e:	bf58      	it	pl
 8006910:	eba9 0101 	subpl.w	r1, r9, r1
 8006914:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006918:	bf58      	it	pl
 800691a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800691e:	6022      	str	r2, [r4, #0]
 8006920:	f04f 0900 	mov.w	r9, #0
 8006924:	e789      	b.n	800683a <_scanf_float+0x192>
 8006926:	f04f 0a03 	mov.w	sl, #3
 800692a:	e786      	b.n	800683a <_scanf_float+0x192>
 800692c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006930:	4639      	mov	r1, r7
 8006932:	4640      	mov	r0, r8
 8006934:	4798      	blx	r3
 8006936:	2800      	cmp	r0, #0
 8006938:	f43f aedb 	beq.w	80066f2 <_scanf_float+0x4a>
 800693c:	e6e6      	b.n	800670c <_scanf_float+0x64>
 800693e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006942:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006946:	463a      	mov	r2, r7
 8006948:	4640      	mov	r0, r8
 800694a:	4798      	blx	r3
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	3b01      	subs	r3, #1
 8006950:	6123      	str	r3, [r4, #16]
 8006952:	e6e8      	b.n	8006726 <_scanf_float+0x7e>
 8006954:	1e6b      	subs	r3, r5, #1
 8006956:	2b06      	cmp	r3, #6
 8006958:	d824      	bhi.n	80069a4 <_scanf_float+0x2fc>
 800695a:	2d02      	cmp	r5, #2
 800695c:	d836      	bhi.n	80069cc <_scanf_float+0x324>
 800695e:	9b01      	ldr	r3, [sp, #4]
 8006960:	429e      	cmp	r6, r3
 8006962:	f67f aee4 	bls.w	800672e <_scanf_float+0x86>
 8006966:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800696a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800696e:	463a      	mov	r2, r7
 8006970:	4640      	mov	r0, r8
 8006972:	4798      	blx	r3
 8006974:	6923      	ldr	r3, [r4, #16]
 8006976:	3b01      	subs	r3, #1
 8006978:	6123      	str	r3, [r4, #16]
 800697a:	e7f0      	b.n	800695e <_scanf_float+0x2b6>
 800697c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006980:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006984:	463a      	mov	r2, r7
 8006986:	4640      	mov	r0, r8
 8006988:	4798      	blx	r3
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	3b01      	subs	r3, #1
 800698e:	6123      	str	r3, [r4, #16]
 8006990:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006994:	fa5f fa8a 	uxtb.w	sl, sl
 8006998:	f1ba 0f02 	cmp.w	sl, #2
 800699c:	d1ee      	bne.n	800697c <_scanf_float+0x2d4>
 800699e:	3d03      	subs	r5, #3
 80069a0:	b2ed      	uxtb	r5, r5
 80069a2:	1b76      	subs	r6, r6, r5
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	05da      	lsls	r2, r3, #23
 80069a8:	d530      	bpl.n	8006a0c <_scanf_float+0x364>
 80069aa:	055b      	lsls	r3, r3, #21
 80069ac:	d511      	bpl.n	80069d2 <_scanf_float+0x32a>
 80069ae:	9b01      	ldr	r3, [sp, #4]
 80069b0:	429e      	cmp	r6, r3
 80069b2:	f67f aebc 	bls.w	800672e <_scanf_float+0x86>
 80069b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069be:	463a      	mov	r2, r7
 80069c0:	4640      	mov	r0, r8
 80069c2:	4798      	blx	r3
 80069c4:	6923      	ldr	r3, [r4, #16]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	6123      	str	r3, [r4, #16]
 80069ca:	e7f0      	b.n	80069ae <_scanf_float+0x306>
 80069cc:	46aa      	mov	sl, r5
 80069ce:	46b3      	mov	fp, r6
 80069d0:	e7de      	b.n	8006990 <_scanf_float+0x2e8>
 80069d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	2965      	cmp	r1, #101	@ 0x65
 80069da:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80069de:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80069e2:	6123      	str	r3, [r4, #16]
 80069e4:	d00c      	beq.n	8006a00 <_scanf_float+0x358>
 80069e6:	2945      	cmp	r1, #69	@ 0x45
 80069e8:	d00a      	beq.n	8006a00 <_scanf_float+0x358>
 80069ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069ee:	463a      	mov	r2, r7
 80069f0:	4640      	mov	r0, r8
 80069f2:	4798      	blx	r3
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	1eb5      	subs	r5, r6, #2
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a04:	463a      	mov	r2, r7
 8006a06:	4640      	mov	r0, r8
 8006a08:	4798      	blx	r3
 8006a0a:	462e      	mov	r6, r5
 8006a0c:	6822      	ldr	r2, [r4, #0]
 8006a0e:	f012 0210 	ands.w	r2, r2, #16
 8006a12:	d001      	beq.n	8006a18 <_scanf_float+0x370>
 8006a14:	2000      	movs	r0, #0
 8006a16:	e68b      	b.n	8006730 <_scanf_float+0x88>
 8006a18:	7032      	strb	r2, [r6, #0]
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a24:	d11c      	bne.n	8006a60 <_scanf_float+0x3b8>
 8006a26:	9b02      	ldr	r3, [sp, #8]
 8006a28:	454b      	cmp	r3, r9
 8006a2a:	eba3 0209 	sub.w	r2, r3, r9
 8006a2e:	d123      	bne.n	8006a78 <_scanf_float+0x3d0>
 8006a30:	9901      	ldr	r1, [sp, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	4640      	mov	r0, r8
 8006a36:	f000 ff47 	bl	80078c8 <_strtod_r>
 8006a3a:	9b03      	ldr	r3, [sp, #12]
 8006a3c:	6821      	ldr	r1, [r4, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f011 0f02 	tst.w	r1, #2
 8006a44:	ec57 6b10 	vmov	r6, r7, d0
 8006a48:	f103 0204 	add.w	r2, r3, #4
 8006a4c:	d01f      	beq.n	8006a8e <_scanf_float+0x3e6>
 8006a4e:	9903      	ldr	r1, [sp, #12]
 8006a50:	600a      	str	r2, [r1, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	e9c3 6700 	strd	r6, r7, [r3]
 8006a58:	68e3      	ldr	r3, [r4, #12]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	60e3      	str	r3, [r4, #12]
 8006a5e:	e7d9      	b.n	8006a14 <_scanf_float+0x36c>
 8006a60:	9b04      	ldr	r3, [sp, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0e4      	beq.n	8006a30 <_scanf_float+0x388>
 8006a66:	9905      	ldr	r1, [sp, #20]
 8006a68:	230a      	movs	r3, #10
 8006a6a:	3101      	adds	r1, #1
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	f000 ffab 	bl	80079c8 <_strtol_r>
 8006a72:	9b04      	ldr	r3, [sp, #16]
 8006a74:	9e05      	ldr	r6, [sp, #20]
 8006a76:	1ac2      	subs	r2, r0, r3
 8006a78:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006a7c:	429e      	cmp	r6, r3
 8006a7e:	bf28      	it	cs
 8006a80:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006a84:	4910      	ldr	r1, [pc, #64]	@ (8006ac8 <_scanf_float+0x420>)
 8006a86:	4630      	mov	r0, r6
 8006a88:	f000 f856 	bl	8006b38 <siprintf>
 8006a8c:	e7d0      	b.n	8006a30 <_scanf_float+0x388>
 8006a8e:	f011 0f04 	tst.w	r1, #4
 8006a92:	9903      	ldr	r1, [sp, #12]
 8006a94:	600a      	str	r2, [r1, #0]
 8006a96:	d1dc      	bne.n	8006a52 <_scanf_float+0x3aa>
 8006a98:	681d      	ldr	r5, [r3, #0]
 8006a9a:	4632      	mov	r2, r6
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	4639      	mov	r1, r7
 8006aa2:	f7fa f853 	bl	8000b4c <__aeabi_dcmpun>
 8006aa6:	b128      	cbz	r0, 8006ab4 <_scanf_float+0x40c>
 8006aa8:	4808      	ldr	r0, [pc, #32]	@ (8006acc <_scanf_float+0x424>)
 8006aaa:	f001 f811 	bl	8007ad0 <nanf>
 8006aae:	ed85 0a00 	vstr	s0, [r5]
 8006ab2:	e7d1      	b.n	8006a58 <_scanf_float+0x3b0>
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	f7fa f8a6 	bl	8000c08 <__aeabi_d2f>
 8006abc:	6028      	str	r0, [r5, #0]
 8006abe:	e7cb      	b.n	8006a58 <_scanf_float+0x3b0>
 8006ac0:	f04f 0900 	mov.w	r9, #0
 8006ac4:	e629      	b.n	800671a <_scanf_float+0x72>
 8006ac6:	bf00      	nop
 8006ac8:	0800adc4 	.word	0x0800adc4
 8006acc:	0800b1bb 	.word	0x0800b1bb

08006ad0 <sniprintf>:
 8006ad0:	b40c      	push	{r2, r3}
 8006ad2:	b530      	push	{r4, r5, lr}
 8006ad4:	4b17      	ldr	r3, [pc, #92]	@ (8006b34 <sniprintf+0x64>)
 8006ad6:	1e0c      	subs	r4, r1, #0
 8006ad8:	681d      	ldr	r5, [r3, #0]
 8006ada:	b09d      	sub	sp, #116	@ 0x74
 8006adc:	da08      	bge.n	8006af0 <sniprintf+0x20>
 8006ade:	238b      	movs	r3, #139	@ 0x8b
 8006ae0:	602b      	str	r3, [r5, #0]
 8006ae2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ae6:	b01d      	add	sp, #116	@ 0x74
 8006ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aec:	b002      	add	sp, #8
 8006aee:	4770      	bx	lr
 8006af0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006af4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006af8:	bf14      	ite	ne
 8006afa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006afe:	4623      	moveq	r3, r4
 8006b00:	9304      	str	r3, [sp, #16]
 8006b02:	9307      	str	r3, [sp, #28]
 8006b04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006b08:	9002      	str	r0, [sp, #8]
 8006b0a:	9006      	str	r0, [sp, #24]
 8006b0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006b10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006b12:	ab21      	add	r3, sp, #132	@ 0x84
 8006b14:	a902      	add	r1, sp, #8
 8006b16:	4628      	mov	r0, r5
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	f002 f9c1 	bl	8008ea0 <_svfiprintf_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	bfbc      	itt	lt
 8006b22:	238b      	movlt	r3, #139	@ 0x8b
 8006b24:	602b      	strlt	r3, [r5, #0]
 8006b26:	2c00      	cmp	r4, #0
 8006b28:	d0dd      	beq.n	8006ae6 <sniprintf+0x16>
 8006b2a:	9b02      	ldr	r3, [sp, #8]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	e7d9      	b.n	8006ae6 <sniprintf+0x16>
 8006b32:	bf00      	nop
 8006b34:	2000018c 	.word	0x2000018c

08006b38 <siprintf>:
 8006b38:	b40e      	push	{r1, r2, r3}
 8006b3a:	b500      	push	{lr}
 8006b3c:	b09c      	sub	sp, #112	@ 0x70
 8006b3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b40:	9002      	str	r0, [sp, #8]
 8006b42:	9006      	str	r0, [sp, #24]
 8006b44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b48:	4809      	ldr	r0, [pc, #36]	@ (8006b70 <siprintf+0x38>)
 8006b4a:	9107      	str	r1, [sp, #28]
 8006b4c:	9104      	str	r1, [sp, #16]
 8006b4e:	4909      	ldr	r1, [pc, #36]	@ (8006b74 <siprintf+0x3c>)
 8006b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b54:	9105      	str	r1, [sp, #20]
 8006b56:	6800      	ldr	r0, [r0, #0]
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	a902      	add	r1, sp, #8
 8006b5c:	f002 f9a0 	bl	8008ea0 <_svfiprintf_r>
 8006b60:	9b02      	ldr	r3, [sp, #8]
 8006b62:	2200      	movs	r2, #0
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	b01c      	add	sp, #112	@ 0x70
 8006b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b6c:	b003      	add	sp, #12
 8006b6e:	4770      	bx	lr
 8006b70:	2000018c 	.word	0x2000018c
 8006b74:	ffff0208 	.word	0xffff0208

08006b78 <std>:
 8006b78:	2300      	movs	r3, #0
 8006b7a:	b510      	push	{r4, lr}
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b86:	6083      	str	r3, [r0, #8]
 8006b88:	8181      	strh	r1, [r0, #12]
 8006b8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b8c:	81c2      	strh	r2, [r0, #14]
 8006b8e:	6183      	str	r3, [r0, #24]
 8006b90:	4619      	mov	r1, r3
 8006b92:	2208      	movs	r2, #8
 8006b94:	305c      	adds	r0, #92	@ 0x5c
 8006b96:	f000 ff49 	bl	8007a2c <memset>
 8006b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd0 <std+0x58>)
 8006b9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd4 <std+0x5c>)
 8006ba0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd8 <std+0x60>)
 8006ba4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bdc <std+0x64>)
 8006ba8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006baa:	4b0d      	ldr	r3, [pc, #52]	@ (8006be0 <std+0x68>)
 8006bac:	6224      	str	r4, [r4, #32]
 8006bae:	429c      	cmp	r4, r3
 8006bb0:	d006      	beq.n	8006bc0 <std+0x48>
 8006bb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bb6:	4294      	cmp	r4, r2
 8006bb8:	d002      	beq.n	8006bc0 <std+0x48>
 8006bba:	33d0      	adds	r3, #208	@ 0xd0
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	d105      	bne.n	8006bcc <std+0x54>
 8006bc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc8:	f000 bf66 	b.w	8007a98 <__retarget_lock_init_recursive>
 8006bcc:	bd10      	pop	{r4, pc}
 8006bce:	bf00      	nop
 8006bd0:	08009ce5 	.word	0x08009ce5
 8006bd4:	08009d07 	.word	0x08009d07
 8006bd8:	08009d3f 	.word	0x08009d3f
 8006bdc:	08009d63 	.word	0x08009d63
 8006be0:	20000300 	.word	0x20000300

08006be4 <stdio_exit_handler>:
 8006be4:	4a02      	ldr	r2, [pc, #8]	@ (8006bf0 <stdio_exit_handler+0xc>)
 8006be6:	4903      	ldr	r1, [pc, #12]	@ (8006bf4 <stdio_exit_handler+0x10>)
 8006be8:	4803      	ldr	r0, [pc, #12]	@ (8006bf8 <stdio_exit_handler+0x14>)
 8006bea:	f000 beef 	b.w	80079cc <_fwalk_sglue>
 8006bee:	bf00      	nop
 8006bf0:	20000014 	.word	0x20000014
 8006bf4:	08009319 	.word	0x08009319
 8006bf8:	20000190 	.word	0x20000190

08006bfc <cleanup_stdio>:
 8006bfc:	6841      	ldr	r1, [r0, #4]
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006c30 <cleanup_stdio+0x34>)
 8006c00:	4299      	cmp	r1, r3
 8006c02:	b510      	push	{r4, lr}
 8006c04:	4604      	mov	r4, r0
 8006c06:	d001      	beq.n	8006c0c <cleanup_stdio+0x10>
 8006c08:	f002 fb86 	bl	8009318 <_fflush_r>
 8006c0c:	68a1      	ldr	r1, [r4, #8]
 8006c0e:	4b09      	ldr	r3, [pc, #36]	@ (8006c34 <cleanup_stdio+0x38>)
 8006c10:	4299      	cmp	r1, r3
 8006c12:	d002      	beq.n	8006c1a <cleanup_stdio+0x1e>
 8006c14:	4620      	mov	r0, r4
 8006c16:	f002 fb7f 	bl	8009318 <_fflush_r>
 8006c1a:	68e1      	ldr	r1, [r4, #12]
 8006c1c:	4b06      	ldr	r3, [pc, #24]	@ (8006c38 <cleanup_stdio+0x3c>)
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	d004      	beq.n	8006c2c <cleanup_stdio+0x30>
 8006c22:	4620      	mov	r0, r4
 8006c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c28:	f002 bb76 	b.w	8009318 <_fflush_r>
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000300 	.word	0x20000300
 8006c34:	20000368 	.word	0x20000368
 8006c38:	200003d0 	.word	0x200003d0

08006c3c <global_stdio_init.part.0>:
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c6c <global_stdio_init.part.0+0x30>)
 8006c40:	4c0b      	ldr	r4, [pc, #44]	@ (8006c70 <global_stdio_init.part.0+0x34>)
 8006c42:	4a0c      	ldr	r2, [pc, #48]	@ (8006c74 <global_stdio_init.part.0+0x38>)
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	4620      	mov	r0, r4
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2104      	movs	r1, #4
 8006c4c:	f7ff ff94 	bl	8006b78 <std>
 8006c50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c54:	2201      	movs	r2, #1
 8006c56:	2109      	movs	r1, #9
 8006c58:	f7ff ff8e 	bl	8006b78 <std>
 8006c5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c60:	2202      	movs	r2, #2
 8006c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c66:	2112      	movs	r1, #18
 8006c68:	f7ff bf86 	b.w	8006b78 <std>
 8006c6c:	20000438 	.word	0x20000438
 8006c70:	20000300 	.word	0x20000300
 8006c74:	08006be5 	.word	0x08006be5

08006c78 <__sfp_lock_acquire>:
 8006c78:	4801      	ldr	r0, [pc, #4]	@ (8006c80 <__sfp_lock_acquire+0x8>)
 8006c7a:	f000 bf0e 	b.w	8007a9a <__retarget_lock_acquire_recursive>
 8006c7e:	bf00      	nop
 8006c80:	2000043d 	.word	0x2000043d

08006c84 <__sfp_lock_release>:
 8006c84:	4801      	ldr	r0, [pc, #4]	@ (8006c8c <__sfp_lock_release+0x8>)
 8006c86:	f000 bf09 	b.w	8007a9c <__retarget_lock_release_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	2000043d 	.word	0x2000043d

08006c90 <__sinit>:
 8006c90:	b510      	push	{r4, lr}
 8006c92:	4604      	mov	r4, r0
 8006c94:	f7ff fff0 	bl	8006c78 <__sfp_lock_acquire>
 8006c98:	6a23      	ldr	r3, [r4, #32]
 8006c9a:	b11b      	cbz	r3, 8006ca4 <__sinit+0x14>
 8006c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca0:	f7ff bff0 	b.w	8006c84 <__sfp_lock_release>
 8006ca4:	4b04      	ldr	r3, [pc, #16]	@ (8006cb8 <__sinit+0x28>)
 8006ca6:	6223      	str	r3, [r4, #32]
 8006ca8:	4b04      	ldr	r3, [pc, #16]	@ (8006cbc <__sinit+0x2c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1f5      	bne.n	8006c9c <__sinit+0xc>
 8006cb0:	f7ff ffc4 	bl	8006c3c <global_stdio_init.part.0>
 8006cb4:	e7f2      	b.n	8006c9c <__sinit+0xc>
 8006cb6:	bf00      	nop
 8006cb8:	08006bfd 	.word	0x08006bfd
 8006cbc:	20000438 	.word	0x20000438

08006cc0 <sulp>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	ec45 4b10 	vmov	d0, r4, r5
 8006cca:	4616      	mov	r6, r2
 8006ccc:	f002 fecc 	bl	8009a68 <__ulp>
 8006cd0:	ec51 0b10 	vmov	r0, r1, d0
 8006cd4:	b17e      	cbz	r6, 8006cf6 <sulp+0x36>
 8006cd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cda:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	dd09      	ble.n	8006cf6 <sulp+0x36>
 8006ce2:	051b      	lsls	r3, r3, #20
 8006ce4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006ce8:	2400      	movs	r4, #0
 8006cea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006cee:	4622      	mov	r2, r4
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	f7f9 fc91 	bl	8000618 <__aeabi_dmul>
 8006cf6:	ec41 0b10 	vmov	d0, r0, r1
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	0000      	movs	r0, r0
	...

08006d00 <_strtod_l>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	b09f      	sub	sp, #124	@ 0x7c
 8006d06:	460c      	mov	r4, r1
 8006d08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006d0e:	9005      	str	r0, [sp, #20]
 8006d10:	f04f 0a00 	mov.w	sl, #0
 8006d14:	f04f 0b00 	mov.w	fp, #0
 8006d18:	460a      	mov	r2, r1
 8006d1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d1c:	7811      	ldrb	r1, [r2, #0]
 8006d1e:	292b      	cmp	r1, #43	@ 0x2b
 8006d20:	d04a      	beq.n	8006db8 <_strtod_l+0xb8>
 8006d22:	d838      	bhi.n	8006d96 <_strtod_l+0x96>
 8006d24:	290d      	cmp	r1, #13
 8006d26:	d832      	bhi.n	8006d8e <_strtod_l+0x8e>
 8006d28:	2908      	cmp	r1, #8
 8006d2a:	d832      	bhi.n	8006d92 <_strtod_l+0x92>
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	d03b      	beq.n	8006da8 <_strtod_l+0xa8>
 8006d30:	2200      	movs	r2, #0
 8006d32:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006d34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d36:	782a      	ldrb	r2, [r5, #0]
 8006d38:	2a30      	cmp	r2, #48	@ 0x30
 8006d3a:	f040 80b3 	bne.w	8006ea4 <_strtod_l+0x1a4>
 8006d3e:	786a      	ldrb	r2, [r5, #1]
 8006d40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d44:	2a58      	cmp	r2, #88	@ 0x58
 8006d46:	d16e      	bne.n	8006e26 <_strtod_l+0x126>
 8006d48:	9302      	str	r3, [sp, #8]
 8006d4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4a8e      	ldr	r2, [pc, #568]	@ (8006f8c <_strtod_l+0x28c>)
 8006d54:	9805      	ldr	r0, [sp, #20]
 8006d56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d58:	a919      	add	r1, sp, #100	@ 0x64
 8006d5a:	f001 fd75 	bl	8008848 <__gethex>
 8006d5e:	f010 060f 	ands.w	r6, r0, #15
 8006d62:	4604      	mov	r4, r0
 8006d64:	d005      	beq.n	8006d72 <_strtod_l+0x72>
 8006d66:	2e06      	cmp	r6, #6
 8006d68:	d128      	bne.n	8006dbc <_strtod_l+0xbc>
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 858e 	bne.w	8007896 <_strtod_l+0xb96>
 8006d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d7c:	b1cb      	cbz	r3, 8006db2 <_strtod_l+0xb2>
 8006d7e:	4652      	mov	r2, sl
 8006d80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006d84:	ec43 2b10 	vmov	d0, r2, r3
 8006d88:	b01f      	add	sp, #124	@ 0x7c
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	2920      	cmp	r1, #32
 8006d90:	d1ce      	bne.n	8006d30 <_strtod_l+0x30>
 8006d92:	3201      	adds	r2, #1
 8006d94:	e7c1      	b.n	8006d1a <_strtod_l+0x1a>
 8006d96:	292d      	cmp	r1, #45	@ 0x2d
 8006d98:	d1ca      	bne.n	8006d30 <_strtod_l+0x30>
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006d9e:	1c51      	adds	r1, r2, #1
 8006da0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006da2:	7852      	ldrb	r2, [r2, #1]
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	d1c5      	bne.n	8006d34 <_strtod_l+0x34>
 8006da8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006daa:	9419      	str	r4, [sp, #100]	@ 0x64
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 8570 	bne.w	8007892 <_strtod_l+0xb92>
 8006db2:	4652      	mov	r2, sl
 8006db4:	465b      	mov	r3, fp
 8006db6:	e7e5      	b.n	8006d84 <_strtod_l+0x84>
 8006db8:	2100      	movs	r1, #0
 8006dba:	e7ef      	b.n	8006d9c <_strtod_l+0x9c>
 8006dbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dbe:	b13a      	cbz	r2, 8006dd0 <_strtod_l+0xd0>
 8006dc0:	2135      	movs	r1, #53	@ 0x35
 8006dc2:	a81c      	add	r0, sp, #112	@ 0x70
 8006dc4:	f002 ff4a 	bl	8009c5c <__copybits>
 8006dc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dca:	9805      	ldr	r0, [sp, #20]
 8006dcc:	f002 fb18 	bl	8009400 <_Bfree>
 8006dd0:	3e01      	subs	r6, #1
 8006dd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006dd4:	2e04      	cmp	r6, #4
 8006dd6:	d806      	bhi.n	8006de6 <_strtod_l+0xe6>
 8006dd8:	e8df f006 	tbb	[pc, r6]
 8006ddc:	201d0314 	.word	0x201d0314
 8006de0:	14          	.byte	0x14
 8006de1:	00          	.byte	0x00
 8006de2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006de6:	05e1      	lsls	r1, r4, #23
 8006de8:	bf48      	it	mi
 8006dea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006dee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006df2:	0d1b      	lsrs	r3, r3, #20
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1bb      	bne.n	8006d72 <_strtod_l+0x72>
 8006dfa:	f000 fe23 	bl	8007a44 <__errno>
 8006dfe:	2322      	movs	r3, #34	@ 0x22
 8006e00:	6003      	str	r3, [r0, #0]
 8006e02:	e7b6      	b.n	8006d72 <_strtod_l+0x72>
 8006e04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006e08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006e0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e14:	e7e7      	b.n	8006de6 <_strtod_l+0xe6>
 8006e16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006f94 <_strtod_l+0x294>
 8006e1a:	e7e4      	b.n	8006de6 <_strtod_l+0xe6>
 8006e1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006e20:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006e24:	e7df      	b.n	8006de6 <_strtod_l+0xe6>
 8006e26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b30      	cmp	r3, #48	@ 0x30
 8006e30:	d0f9      	beq.n	8006e26 <_strtod_l+0x126>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d09d      	beq.n	8006d72 <_strtod_l+0x72>
 8006e36:	2301      	movs	r3, #1
 8006e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9308      	str	r3, [sp, #32]
 8006e42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e44:	461f      	mov	r7, r3
 8006e46:	220a      	movs	r2, #10
 8006e48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e4a:	7805      	ldrb	r5, [r0, #0]
 8006e4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e50:	b2d9      	uxtb	r1, r3
 8006e52:	2909      	cmp	r1, #9
 8006e54:	d928      	bls.n	8006ea8 <_strtod_l+0x1a8>
 8006e56:	494e      	ldr	r1, [pc, #312]	@ (8006f90 <_strtod_l+0x290>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f000 fdd5 	bl	8007a08 <strncmp>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d032      	beq.n	8006ec8 <_strtod_l+0x1c8>
 8006e62:	2000      	movs	r0, #0
 8006e64:	462a      	mov	r2, r5
 8006e66:	4681      	mov	r9, r0
 8006e68:	463d      	mov	r5, r7
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2a65      	cmp	r2, #101	@ 0x65
 8006e6e:	d001      	beq.n	8006e74 <_strtod_l+0x174>
 8006e70:	2a45      	cmp	r2, #69	@ 0x45
 8006e72:	d114      	bne.n	8006e9e <_strtod_l+0x19e>
 8006e74:	b91d      	cbnz	r5, 8006e7e <_strtod_l+0x17e>
 8006e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e78:	4302      	orrs	r2, r0
 8006e7a:	d095      	beq.n	8006da8 <_strtod_l+0xa8>
 8006e7c:	2500      	movs	r5, #0
 8006e7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006e80:	1c62      	adds	r2, r4, #1
 8006e82:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e84:	7862      	ldrb	r2, [r4, #1]
 8006e86:	2a2b      	cmp	r2, #43	@ 0x2b
 8006e88:	d077      	beq.n	8006f7a <_strtod_l+0x27a>
 8006e8a:	2a2d      	cmp	r2, #45	@ 0x2d
 8006e8c:	d07b      	beq.n	8006f86 <_strtod_l+0x286>
 8006e8e:	f04f 0c00 	mov.w	ip, #0
 8006e92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006e96:	2909      	cmp	r1, #9
 8006e98:	f240 8082 	bls.w	8006fa0 <_strtod_l+0x2a0>
 8006e9c:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	e0a2      	b.n	8006fea <_strtod_l+0x2ea>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e7c7      	b.n	8006e38 <_strtod_l+0x138>
 8006ea8:	2f08      	cmp	r7, #8
 8006eaa:	bfd5      	itete	le
 8006eac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006eae:	9908      	ldrgt	r1, [sp, #32]
 8006eb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8006eb4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006eb8:	f100 0001 	add.w	r0, r0, #1
 8006ebc:	bfd4      	ite	le
 8006ebe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006ec0:	9308      	strgt	r3, [sp, #32]
 8006ec2:	3701      	adds	r7, #1
 8006ec4:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ec6:	e7bf      	b.n	8006e48 <_strtod_l+0x148>
 8006ec8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ece:	785a      	ldrb	r2, [r3, #1]
 8006ed0:	b37f      	cbz	r7, 8006f32 <_strtod_l+0x232>
 8006ed2:	4681      	mov	r9, r0
 8006ed4:	463d      	mov	r5, r7
 8006ed6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	d912      	bls.n	8006f04 <_strtod_l+0x204>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e7c4      	b.n	8006e6c <_strtod_l+0x16c>
 8006ee2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ee8:	785a      	ldrb	r2, [r3, #1]
 8006eea:	3001      	adds	r0, #1
 8006eec:	2a30      	cmp	r2, #48	@ 0x30
 8006eee:	d0f8      	beq.n	8006ee2 <_strtod_l+0x1e2>
 8006ef0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	f200 84d3 	bhi.w	80078a0 <_strtod_l+0xba0>
 8006efa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006efc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006efe:	4681      	mov	r9, r0
 8006f00:	2000      	movs	r0, #0
 8006f02:	4605      	mov	r5, r0
 8006f04:	3a30      	subs	r2, #48	@ 0x30
 8006f06:	f100 0301 	add.w	r3, r0, #1
 8006f0a:	d02a      	beq.n	8006f62 <_strtod_l+0x262>
 8006f0c:	4499      	add	r9, r3
 8006f0e:	eb00 0c05 	add.w	ip, r0, r5
 8006f12:	462b      	mov	r3, r5
 8006f14:	210a      	movs	r1, #10
 8006f16:	4563      	cmp	r3, ip
 8006f18:	d10d      	bne.n	8006f36 <_strtod_l+0x236>
 8006f1a:	1c69      	adds	r1, r5, #1
 8006f1c:	4401      	add	r1, r0
 8006f1e:	4428      	add	r0, r5
 8006f20:	2808      	cmp	r0, #8
 8006f22:	dc16      	bgt.n	8006f52 <_strtod_l+0x252>
 8006f24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f26:	230a      	movs	r3, #10
 8006f28:	fb03 2300 	mla	r3, r3, r0, r2
 8006f2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e018      	b.n	8006f64 <_strtod_l+0x264>
 8006f32:	4638      	mov	r0, r7
 8006f34:	e7da      	b.n	8006eec <_strtod_l+0x1ec>
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	f103 0301 	add.w	r3, r3, #1
 8006f3c:	dc03      	bgt.n	8006f46 <_strtod_l+0x246>
 8006f3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006f40:	434e      	muls	r6, r1
 8006f42:	960a      	str	r6, [sp, #40]	@ 0x28
 8006f44:	e7e7      	b.n	8006f16 <_strtod_l+0x216>
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	bfde      	ittt	le
 8006f4a:	9e08      	ldrle	r6, [sp, #32]
 8006f4c:	434e      	mulle	r6, r1
 8006f4e:	9608      	strle	r6, [sp, #32]
 8006f50:	e7e1      	b.n	8006f16 <_strtod_l+0x216>
 8006f52:	280f      	cmp	r0, #15
 8006f54:	dceb      	bgt.n	8006f2e <_strtod_l+0x22e>
 8006f56:	9808      	ldr	r0, [sp, #32]
 8006f58:	230a      	movs	r3, #10
 8006f5a:	fb03 2300 	mla	r3, r3, r0, r2
 8006f5e:	9308      	str	r3, [sp, #32]
 8006f60:	e7e5      	b.n	8006f2e <_strtod_l+0x22e>
 8006f62:	4629      	mov	r1, r5
 8006f64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f66:	1c50      	adds	r0, r2, #1
 8006f68:	9019      	str	r0, [sp, #100]	@ 0x64
 8006f6a:	7852      	ldrb	r2, [r2, #1]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	460d      	mov	r5, r1
 8006f70:	e7b1      	b.n	8006ed6 <_strtod_l+0x1d6>
 8006f72:	f04f 0900 	mov.w	r9, #0
 8006f76:	2301      	movs	r3, #1
 8006f78:	e77d      	b.n	8006e76 <_strtod_l+0x176>
 8006f7a:	f04f 0c00 	mov.w	ip, #0
 8006f7e:	1ca2      	adds	r2, r4, #2
 8006f80:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f82:	78a2      	ldrb	r2, [r4, #2]
 8006f84:	e785      	b.n	8006e92 <_strtod_l+0x192>
 8006f86:	f04f 0c01 	mov.w	ip, #1
 8006f8a:	e7f8      	b.n	8006f7e <_strtod_l+0x27e>
 8006f8c:	0800ade0 	.word	0x0800ade0
 8006f90:	0800adc9 	.word	0x0800adc9
 8006f94:	7ff00000 	.word	0x7ff00000
 8006f98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f9a:	1c51      	adds	r1, r2, #1
 8006f9c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f9e:	7852      	ldrb	r2, [r2, #1]
 8006fa0:	2a30      	cmp	r2, #48	@ 0x30
 8006fa2:	d0f9      	beq.n	8006f98 <_strtod_l+0x298>
 8006fa4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006fa8:	2908      	cmp	r1, #8
 8006faa:	f63f af78 	bhi.w	8006e9e <_strtod_l+0x19e>
 8006fae:	3a30      	subs	r2, #48	@ 0x30
 8006fb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006fb6:	f04f 080a 	mov.w	r8, #10
 8006fba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fbc:	1c56      	adds	r6, r2, #1
 8006fbe:	9619      	str	r6, [sp, #100]	@ 0x64
 8006fc0:	7852      	ldrb	r2, [r2, #1]
 8006fc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006fc6:	f1be 0f09 	cmp.w	lr, #9
 8006fca:	d939      	bls.n	8007040 <_strtod_l+0x340>
 8006fcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fce:	1a76      	subs	r6, r6, r1
 8006fd0:	2e08      	cmp	r6, #8
 8006fd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006fd6:	dc03      	bgt.n	8006fe0 <_strtod_l+0x2e0>
 8006fd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006fda:	4588      	cmp	r8, r1
 8006fdc:	bfa8      	it	ge
 8006fde:	4688      	movge	r8, r1
 8006fe0:	f1bc 0f00 	cmp.w	ip, #0
 8006fe4:	d001      	beq.n	8006fea <_strtod_l+0x2ea>
 8006fe6:	f1c8 0800 	rsb	r8, r8, #0
 8006fea:	2d00      	cmp	r5, #0
 8006fec:	d14e      	bne.n	800708c <_strtod_l+0x38c>
 8006fee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ff0:	4308      	orrs	r0, r1
 8006ff2:	f47f aebe 	bne.w	8006d72 <_strtod_l+0x72>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f47f aed6 	bne.w	8006da8 <_strtod_l+0xa8>
 8006ffc:	2a69      	cmp	r2, #105	@ 0x69
 8006ffe:	d028      	beq.n	8007052 <_strtod_l+0x352>
 8007000:	dc25      	bgt.n	800704e <_strtod_l+0x34e>
 8007002:	2a49      	cmp	r2, #73	@ 0x49
 8007004:	d025      	beq.n	8007052 <_strtod_l+0x352>
 8007006:	2a4e      	cmp	r2, #78	@ 0x4e
 8007008:	f47f aece 	bne.w	8006da8 <_strtod_l+0xa8>
 800700c:	499b      	ldr	r1, [pc, #620]	@ (800727c <_strtod_l+0x57c>)
 800700e:	a819      	add	r0, sp, #100	@ 0x64
 8007010:	f001 fe3c 	bl	8008c8c <__match>
 8007014:	2800      	cmp	r0, #0
 8007016:	f43f aec7 	beq.w	8006da8 <_strtod_l+0xa8>
 800701a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b28      	cmp	r3, #40	@ 0x28
 8007020:	d12e      	bne.n	8007080 <_strtod_l+0x380>
 8007022:	4997      	ldr	r1, [pc, #604]	@ (8007280 <_strtod_l+0x580>)
 8007024:	aa1c      	add	r2, sp, #112	@ 0x70
 8007026:	a819      	add	r0, sp, #100	@ 0x64
 8007028:	f001 fe44 	bl	8008cb4 <__hexnan>
 800702c:	2805      	cmp	r0, #5
 800702e:	d127      	bne.n	8007080 <_strtod_l+0x380>
 8007030:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007032:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007036:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800703a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800703e:	e698      	b.n	8006d72 <_strtod_l+0x72>
 8007040:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007042:	fb08 2101 	mla	r1, r8, r1, r2
 8007046:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800704a:	920e      	str	r2, [sp, #56]	@ 0x38
 800704c:	e7b5      	b.n	8006fba <_strtod_l+0x2ba>
 800704e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007050:	e7da      	b.n	8007008 <_strtod_l+0x308>
 8007052:	498c      	ldr	r1, [pc, #560]	@ (8007284 <_strtod_l+0x584>)
 8007054:	a819      	add	r0, sp, #100	@ 0x64
 8007056:	f001 fe19 	bl	8008c8c <__match>
 800705a:	2800      	cmp	r0, #0
 800705c:	f43f aea4 	beq.w	8006da8 <_strtod_l+0xa8>
 8007060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007062:	4989      	ldr	r1, [pc, #548]	@ (8007288 <_strtod_l+0x588>)
 8007064:	3b01      	subs	r3, #1
 8007066:	a819      	add	r0, sp, #100	@ 0x64
 8007068:	9319      	str	r3, [sp, #100]	@ 0x64
 800706a:	f001 fe0f 	bl	8008c8c <__match>
 800706e:	b910      	cbnz	r0, 8007076 <_strtod_l+0x376>
 8007070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007072:	3301      	adds	r3, #1
 8007074:	9319      	str	r3, [sp, #100]	@ 0x64
 8007076:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007298 <_strtod_l+0x598>
 800707a:	f04f 0a00 	mov.w	sl, #0
 800707e:	e678      	b.n	8006d72 <_strtod_l+0x72>
 8007080:	4882      	ldr	r0, [pc, #520]	@ (800728c <_strtod_l+0x58c>)
 8007082:	f000 fd1d 	bl	8007ac0 <nan>
 8007086:	ec5b ab10 	vmov	sl, fp, d0
 800708a:	e672      	b.n	8006d72 <_strtod_l+0x72>
 800708c:	eba8 0309 	sub.w	r3, r8, r9
 8007090:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007092:	9309      	str	r3, [sp, #36]	@ 0x24
 8007094:	2f00      	cmp	r7, #0
 8007096:	bf08      	it	eq
 8007098:	462f      	moveq	r7, r5
 800709a:	2d10      	cmp	r5, #16
 800709c:	462c      	mov	r4, r5
 800709e:	bfa8      	it	ge
 80070a0:	2410      	movge	r4, #16
 80070a2:	f7f9 fa3f 	bl	8000524 <__aeabi_ui2d>
 80070a6:	2d09      	cmp	r5, #9
 80070a8:	4682      	mov	sl, r0
 80070aa:	468b      	mov	fp, r1
 80070ac:	dc13      	bgt.n	80070d6 <_strtod_l+0x3d6>
 80070ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f43f ae5e 	beq.w	8006d72 <_strtod_l+0x72>
 80070b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b8:	dd78      	ble.n	80071ac <_strtod_l+0x4ac>
 80070ba:	2b16      	cmp	r3, #22
 80070bc:	dc5f      	bgt.n	800717e <_strtod_l+0x47e>
 80070be:	4974      	ldr	r1, [pc, #464]	@ (8007290 <_strtod_l+0x590>)
 80070c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070c8:	4652      	mov	r2, sl
 80070ca:	465b      	mov	r3, fp
 80070cc:	f7f9 faa4 	bl	8000618 <__aeabi_dmul>
 80070d0:	4682      	mov	sl, r0
 80070d2:	468b      	mov	fp, r1
 80070d4:	e64d      	b.n	8006d72 <_strtod_l+0x72>
 80070d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007290 <_strtod_l+0x590>)
 80070d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80070e0:	f7f9 fa9a 	bl	8000618 <__aeabi_dmul>
 80070e4:	4682      	mov	sl, r0
 80070e6:	9808      	ldr	r0, [sp, #32]
 80070e8:	468b      	mov	fp, r1
 80070ea:	f7f9 fa1b 	bl	8000524 <__aeabi_ui2d>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	4650      	mov	r0, sl
 80070f4:	4659      	mov	r1, fp
 80070f6:	f7f9 f8d9 	bl	80002ac <__adddf3>
 80070fa:	2d0f      	cmp	r5, #15
 80070fc:	4682      	mov	sl, r0
 80070fe:	468b      	mov	fp, r1
 8007100:	ddd5      	ble.n	80070ae <_strtod_l+0x3ae>
 8007102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007104:	1b2c      	subs	r4, r5, r4
 8007106:	441c      	add	r4, r3
 8007108:	2c00      	cmp	r4, #0
 800710a:	f340 8096 	ble.w	800723a <_strtod_l+0x53a>
 800710e:	f014 030f 	ands.w	r3, r4, #15
 8007112:	d00a      	beq.n	800712a <_strtod_l+0x42a>
 8007114:	495e      	ldr	r1, [pc, #376]	@ (8007290 <_strtod_l+0x590>)
 8007116:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800711a:	4652      	mov	r2, sl
 800711c:	465b      	mov	r3, fp
 800711e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007122:	f7f9 fa79 	bl	8000618 <__aeabi_dmul>
 8007126:	4682      	mov	sl, r0
 8007128:	468b      	mov	fp, r1
 800712a:	f034 040f 	bics.w	r4, r4, #15
 800712e:	d073      	beq.n	8007218 <_strtod_l+0x518>
 8007130:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007134:	dd48      	ble.n	80071c8 <_strtod_l+0x4c8>
 8007136:	2400      	movs	r4, #0
 8007138:	46a0      	mov	r8, r4
 800713a:	940a      	str	r4, [sp, #40]	@ 0x28
 800713c:	46a1      	mov	r9, r4
 800713e:	9a05      	ldr	r2, [sp, #20]
 8007140:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007298 <_strtod_l+0x598>
 8007144:	2322      	movs	r3, #34	@ 0x22
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	f04f 0a00 	mov.w	sl, #0
 800714c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800714e:	2b00      	cmp	r3, #0
 8007150:	f43f ae0f 	beq.w	8006d72 <_strtod_l+0x72>
 8007154:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007156:	9805      	ldr	r0, [sp, #20]
 8007158:	f002 f952 	bl	8009400 <_Bfree>
 800715c:	9805      	ldr	r0, [sp, #20]
 800715e:	4649      	mov	r1, r9
 8007160:	f002 f94e 	bl	8009400 <_Bfree>
 8007164:	9805      	ldr	r0, [sp, #20]
 8007166:	4641      	mov	r1, r8
 8007168:	f002 f94a 	bl	8009400 <_Bfree>
 800716c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800716e:	9805      	ldr	r0, [sp, #20]
 8007170:	f002 f946 	bl	8009400 <_Bfree>
 8007174:	9805      	ldr	r0, [sp, #20]
 8007176:	4621      	mov	r1, r4
 8007178:	f002 f942 	bl	8009400 <_Bfree>
 800717c:	e5f9      	b.n	8006d72 <_strtod_l+0x72>
 800717e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007180:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007184:	4293      	cmp	r3, r2
 8007186:	dbbc      	blt.n	8007102 <_strtod_l+0x402>
 8007188:	4c41      	ldr	r4, [pc, #260]	@ (8007290 <_strtod_l+0x590>)
 800718a:	f1c5 050f 	rsb	r5, r5, #15
 800718e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007192:	4652      	mov	r2, sl
 8007194:	465b      	mov	r3, fp
 8007196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800719a:	f7f9 fa3d 	bl	8000618 <__aeabi_dmul>
 800719e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a0:	1b5d      	subs	r5, r3, r5
 80071a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80071a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071aa:	e78f      	b.n	80070cc <_strtod_l+0x3cc>
 80071ac:	3316      	adds	r3, #22
 80071ae:	dba8      	blt.n	8007102 <_strtod_l+0x402>
 80071b0:	4b37      	ldr	r3, [pc, #220]	@ (8007290 <_strtod_l+0x590>)
 80071b2:	eba9 0808 	sub.w	r8, r9, r8
 80071b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80071ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80071be:	4650      	mov	r0, sl
 80071c0:	4659      	mov	r1, fp
 80071c2:	f7f9 fb53 	bl	800086c <__aeabi_ddiv>
 80071c6:	e783      	b.n	80070d0 <_strtod_l+0x3d0>
 80071c8:	4b32      	ldr	r3, [pc, #200]	@ (8007294 <_strtod_l+0x594>)
 80071ca:	9308      	str	r3, [sp, #32]
 80071cc:	2300      	movs	r3, #0
 80071ce:	1124      	asrs	r4, r4, #4
 80071d0:	4650      	mov	r0, sl
 80071d2:	4659      	mov	r1, fp
 80071d4:	461e      	mov	r6, r3
 80071d6:	2c01      	cmp	r4, #1
 80071d8:	dc21      	bgt.n	800721e <_strtod_l+0x51e>
 80071da:	b10b      	cbz	r3, 80071e0 <_strtod_l+0x4e0>
 80071dc:	4682      	mov	sl, r0
 80071de:	468b      	mov	fp, r1
 80071e0:	492c      	ldr	r1, [pc, #176]	@ (8007294 <_strtod_l+0x594>)
 80071e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80071e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80071ea:	4652      	mov	r2, sl
 80071ec:	465b      	mov	r3, fp
 80071ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f2:	f7f9 fa11 	bl	8000618 <__aeabi_dmul>
 80071f6:	4b28      	ldr	r3, [pc, #160]	@ (8007298 <_strtod_l+0x598>)
 80071f8:	460a      	mov	r2, r1
 80071fa:	400b      	ands	r3, r1
 80071fc:	4927      	ldr	r1, [pc, #156]	@ (800729c <_strtod_l+0x59c>)
 80071fe:	428b      	cmp	r3, r1
 8007200:	4682      	mov	sl, r0
 8007202:	d898      	bhi.n	8007136 <_strtod_l+0x436>
 8007204:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007208:	428b      	cmp	r3, r1
 800720a:	bf86      	itte	hi
 800720c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80072a0 <_strtod_l+0x5a0>
 8007210:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007214:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007218:	2300      	movs	r3, #0
 800721a:	9308      	str	r3, [sp, #32]
 800721c:	e07a      	b.n	8007314 <_strtod_l+0x614>
 800721e:	07e2      	lsls	r2, r4, #31
 8007220:	d505      	bpl.n	800722e <_strtod_l+0x52e>
 8007222:	9b08      	ldr	r3, [sp, #32]
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f9 f9f6 	bl	8000618 <__aeabi_dmul>
 800722c:	2301      	movs	r3, #1
 800722e:	9a08      	ldr	r2, [sp, #32]
 8007230:	3208      	adds	r2, #8
 8007232:	3601      	adds	r6, #1
 8007234:	1064      	asrs	r4, r4, #1
 8007236:	9208      	str	r2, [sp, #32]
 8007238:	e7cd      	b.n	80071d6 <_strtod_l+0x4d6>
 800723a:	d0ed      	beq.n	8007218 <_strtod_l+0x518>
 800723c:	4264      	negs	r4, r4
 800723e:	f014 020f 	ands.w	r2, r4, #15
 8007242:	d00a      	beq.n	800725a <_strtod_l+0x55a>
 8007244:	4b12      	ldr	r3, [pc, #72]	@ (8007290 <_strtod_l+0x590>)
 8007246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800724a:	4650      	mov	r0, sl
 800724c:	4659      	mov	r1, fp
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	f7f9 fb0b 	bl	800086c <__aeabi_ddiv>
 8007256:	4682      	mov	sl, r0
 8007258:	468b      	mov	fp, r1
 800725a:	1124      	asrs	r4, r4, #4
 800725c:	d0dc      	beq.n	8007218 <_strtod_l+0x518>
 800725e:	2c1f      	cmp	r4, #31
 8007260:	dd20      	ble.n	80072a4 <_strtod_l+0x5a4>
 8007262:	2400      	movs	r4, #0
 8007264:	46a0      	mov	r8, r4
 8007266:	940a      	str	r4, [sp, #40]	@ 0x28
 8007268:	46a1      	mov	r9, r4
 800726a:	9a05      	ldr	r2, [sp, #20]
 800726c:	2322      	movs	r3, #34	@ 0x22
 800726e:	f04f 0a00 	mov.w	sl, #0
 8007272:	f04f 0b00 	mov.w	fp, #0
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	e768      	b.n	800714c <_strtod_l+0x44c>
 800727a:	bf00      	nop
 800727c:	0800ad9d 	.word	0x0800ad9d
 8007280:	0800adcc 	.word	0x0800adcc
 8007284:	0800ad95 	.word	0x0800ad95
 8007288:	0800af2c 	.word	0x0800af2c
 800728c:	0800b1bb 	.word	0x0800b1bb
 8007290:	0800b0b8 	.word	0x0800b0b8
 8007294:	0800b090 	.word	0x0800b090
 8007298:	7ff00000 	.word	0x7ff00000
 800729c:	7ca00000 	.word	0x7ca00000
 80072a0:	7fefffff 	.word	0x7fefffff
 80072a4:	f014 0310 	ands.w	r3, r4, #16
 80072a8:	bf18      	it	ne
 80072aa:	236a      	movne	r3, #106	@ 0x6a
 80072ac:	4ea9      	ldr	r6, [pc, #676]	@ (8007554 <_strtod_l+0x854>)
 80072ae:	9308      	str	r3, [sp, #32]
 80072b0:	4650      	mov	r0, sl
 80072b2:	4659      	mov	r1, fp
 80072b4:	2300      	movs	r3, #0
 80072b6:	07e2      	lsls	r2, r4, #31
 80072b8:	d504      	bpl.n	80072c4 <_strtod_l+0x5c4>
 80072ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072be:	f7f9 f9ab 	bl	8000618 <__aeabi_dmul>
 80072c2:	2301      	movs	r3, #1
 80072c4:	1064      	asrs	r4, r4, #1
 80072c6:	f106 0608 	add.w	r6, r6, #8
 80072ca:	d1f4      	bne.n	80072b6 <_strtod_l+0x5b6>
 80072cc:	b10b      	cbz	r3, 80072d2 <_strtod_l+0x5d2>
 80072ce:	4682      	mov	sl, r0
 80072d0:	468b      	mov	fp, r1
 80072d2:	9b08      	ldr	r3, [sp, #32]
 80072d4:	b1b3      	cbz	r3, 8007304 <_strtod_l+0x604>
 80072d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80072de:	2b00      	cmp	r3, #0
 80072e0:	4659      	mov	r1, fp
 80072e2:	dd0f      	ble.n	8007304 <_strtod_l+0x604>
 80072e4:	2b1f      	cmp	r3, #31
 80072e6:	dd55      	ble.n	8007394 <_strtod_l+0x694>
 80072e8:	2b34      	cmp	r3, #52	@ 0x34
 80072ea:	bfde      	ittt	le
 80072ec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80072f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80072f4:	4093      	lslle	r3, r2
 80072f6:	f04f 0a00 	mov.w	sl, #0
 80072fa:	bfcc      	ite	gt
 80072fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007300:	ea03 0b01 	andle.w	fp, r3, r1
 8007304:	2200      	movs	r2, #0
 8007306:	2300      	movs	r3, #0
 8007308:	4650      	mov	r0, sl
 800730a:	4659      	mov	r1, fp
 800730c:	f7f9 fbec 	bl	8000ae8 <__aeabi_dcmpeq>
 8007310:	2800      	cmp	r0, #0
 8007312:	d1a6      	bne.n	8007262 <_strtod_l+0x562>
 8007314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800731a:	9805      	ldr	r0, [sp, #20]
 800731c:	462b      	mov	r3, r5
 800731e:	463a      	mov	r2, r7
 8007320:	f002 f8d6 	bl	80094d0 <__s2b>
 8007324:	900a      	str	r0, [sp, #40]	@ 0x28
 8007326:	2800      	cmp	r0, #0
 8007328:	f43f af05 	beq.w	8007136 <_strtod_l+0x436>
 800732c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800732e:	2a00      	cmp	r2, #0
 8007330:	eba9 0308 	sub.w	r3, r9, r8
 8007334:	bfa8      	it	ge
 8007336:	2300      	movge	r3, #0
 8007338:	9312      	str	r3, [sp, #72]	@ 0x48
 800733a:	2400      	movs	r4, #0
 800733c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007340:	9316      	str	r3, [sp, #88]	@ 0x58
 8007342:	46a0      	mov	r8, r4
 8007344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007346:	9805      	ldr	r0, [sp, #20]
 8007348:	6859      	ldr	r1, [r3, #4]
 800734a:	f002 f819 	bl	8009380 <_Balloc>
 800734e:	4681      	mov	r9, r0
 8007350:	2800      	cmp	r0, #0
 8007352:	f43f aef4 	beq.w	800713e <_strtod_l+0x43e>
 8007356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	3202      	adds	r2, #2
 800735c:	f103 010c 	add.w	r1, r3, #12
 8007360:	0092      	lsls	r2, r2, #2
 8007362:	300c      	adds	r0, #12
 8007364:	f000 fb9b 	bl	8007a9e <memcpy>
 8007368:	ec4b ab10 	vmov	d0, sl, fp
 800736c:	9805      	ldr	r0, [sp, #20]
 800736e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007370:	a91b      	add	r1, sp, #108	@ 0x6c
 8007372:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007376:	f002 fbe7 	bl	8009b48 <__d2b>
 800737a:	901a      	str	r0, [sp, #104]	@ 0x68
 800737c:	2800      	cmp	r0, #0
 800737e:	f43f aede 	beq.w	800713e <_strtod_l+0x43e>
 8007382:	9805      	ldr	r0, [sp, #20]
 8007384:	2101      	movs	r1, #1
 8007386:	f002 f939 	bl	80095fc <__i2b>
 800738a:	4680      	mov	r8, r0
 800738c:	b948      	cbnz	r0, 80073a2 <_strtod_l+0x6a2>
 800738e:	f04f 0800 	mov.w	r8, #0
 8007392:	e6d4      	b.n	800713e <_strtod_l+0x43e>
 8007394:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	ea03 0a0a 	and.w	sl, r3, sl
 80073a0:	e7b0      	b.n	8007304 <_strtod_l+0x604>
 80073a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80073a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	bfab      	itete	ge
 80073aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80073ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80073ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80073b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80073b2:	bfac      	ite	ge
 80073b4:	18ef      	addge	r7, r5, r3
 80073b6:	1b5e      	sublt	r6, r3, r5
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	1aed      	subs	r5, r5, r3
 80073bc:	4415      	add	r5, r2
 80073be:	4b66      	ldr	r3, [pc, #408]	@ (8007558 <_strtod_l+0x858>)
 80073c0:	3d01      	subs	r5, #1
 80073c2:	429d      	cmp	r5, r3
 80073c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80073c8:	da50      	bge.n	800746c <_strtod_l+0x76c>
 80073ca:	1b5b      	subs	r3, r3, r5
 80073cc:	2b1f      	cmp	r3, #31
 80073ce:	eba2 0203 	sub.w	r2, r2, r3
 80073d2:	f04f 0101 	mov.w	r1, #1
 80073d6:	dc3d      	bgt.n	8007454 <_strtod_l+0x754>
 80073d8:	fa01 f303 	lsl.w	r3, r1, r3
 80073dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073de:	2300      	movs	r3, #0
 80073e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80073e2:	18bd      	adds	r5, r7, r2
 80073e4:	9b08      	ldr	r3, [sp, #32]
 80073e6:	42af      	cmp	r7, r5
 80073e8:	4416      	add	r6, r2
 80073ea:	441e      	add	r6, r3
 80073ec:	463b      	mov	r3, r7
 80073ee:	bfa8      	it	ge
 80073f0:	462b      	movge	r3, r5
 80073f2:	42b3      	cmp	r3, r6
 80073f4:	bfa8      	it	ge
 80073f6:	4633      	movge	r3, r6
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bfc2      	ittt	gt
 80073fc:	1aed      	subgt	r5, r5, r3
 80073fe:	1af6      	subgt	r6, r6, r3
 8007400:	1aff      	subgt	r7, r7, r3
 8007402:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007404:	2b00      	cmp	r3, #0
 8007406:	dd16      	ble.n	8007436 <_strtod_l+0x736>
 8007408:	4641      	mov	r1, r8
 800740a:	9805      	ldr	r0, [sp, #20]
 800740c:	461a      	mov	r2, r3
 800740e:	f002 f9b5 	bl	800977c <__pow5mult>
 8007412:	4680      	mov	r8, r0
 8007414:	2800      	cmp	r0, #0
 8007416:	d0ba      	beq.n	800738e <_strtod_l+0x68e>
 8007418:	4601      	mov	r1, r0
 800741a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800741c:	9805      	ldr	r0, [sp, #20]
 800741e:	f002 f903 	bl	8009628 <__multiply>
 8007422:	900e      	str	r0, [sp, #56]	@ 0x38
 8007424:	2800      	cmp	r0, #0
 8007426:	f43f ae8a 	beq.w	800713e <_strtod_l+0x43e>
 800742a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800742c:	9805      	ldr	r0, [sp, #20]
 800742e:	f001 ffe7 	bl	8009400 <_Bfree>
 8007432:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007434:	931a      	str	r3, [sp, #104]	@ 0x68
 8007436:	2d00      	cmp	r5, #0
 8007438:	dc1d      	bgt.n	8007476 <_strtod_l+0x776>
 800743a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	dd23      	ble.n	8007488 <_strtod_l+0x788>
 8007440:	4649      	mov	r1, r9
 8007442:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007444:	9805      	ldr	r0, [sp, #20]
 8007446:	f002 f999 	bl	800977c <__pow5mult>
 800744a:	4681      	mov	r9, r0
 800744c:	b9e0      	cbnz	r0, 8007488 <_strtod_l+0x788>
 800744e:	f04f 0900 	mov.w	r9, #0
 8007452:	e674      	b.n	800713e <_strtod_l+0x43e>
 8007454:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007458:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800745c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007460:	35e2      	adds	r5, #226	@ 0xe2
 8007462:	fa01 f305 	lsl.w	r3, r1, r5
 8007466:	9310      	str	r3, [sp, #64]	@ 0x40
 8007468:	9113      	str	r1, [sp, #76]	@ 0x4c
 800746a:	e7ba      	b.n	80073e2 <_strtod_l+0x6e2>
 800746c:	2300      	movs	r3, #0
 800746e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007470:	2301      	movs	r3, #1
 8007472:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007474:	e7b5      	b.n	80073e2 <_strtod_l+0x6e2>
 8007476:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007478:	9805      	ldr	r0, [sp, #20]
 800747a:	462a      	mov	r2, r5
 800747c:	f002 f9d8 	bl	8009830 <__lshift>
 8007480:	901a      	str	r0, [sp, #104]	@ 0x68
 8007482:	2800      	cmp	r0, #0
 8007484:	d1d9      	bne.n	800743a <_strtod_l+0x73a>
 8007486:	e65a      	b.n	800713e <_strtod_l+0x43e>
 8007488:	2e00      	cmp	r6, #0
 800748a:	dd07      	ble.n	800749c <_strtod_l+0x79c>
 800748c:	4649      	mov	r1, r9
 800748e:	9805      	ldr	r0, [sp, #20]
 8007490:	4632      	mov	r2, r6
 8007492:	f002 f9cd 	bl	8009830 <__lshift>
 8007496:	4681      	mov	r9, r0
 8007498:	2800      	cmp	r0, #0
 800749a:	d0d8      	beq.n	800744e <_strtod_l+0x74e>
 800749c:	2f00      	cmp	r7, #0
 800749e:	dd08      	ble.n	80074b2 <_strtod_l+0x7b2>
 80074a0:	4641      	mov	r1, r8
 80074a2:	9805      	ldr	r0, [sp, #20]
 80074a4:	463a      	mov	r2, r7
 80074a6:	f002 f9c3 	bl	8009830 <__lshift>
 80074aa:	4680      	mov	r8, r0
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f43f ae46 	beq.w	800713e <_strtod_l+0x43e>
 80074b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074b4:	9805      	ldr	r0, [sp, #20]
 80074b6:	464a      	mov	r2, r9
 80074b8:	f002 fa42 	bl	8009940 <__mdiff>
 80074bc:	4604      	mov	r4, r0
 80074be:	2800      	cmp	r0, #0
 80074c0:	f43f ae3d 	beq.w	800713e <_strtod_l+0x43e>
 80074c4:	68c3      	ldr	r3, [r0, #12]
 80074c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074c8:	2300      	movs	r3, #0
 80074ca:	60c3      	str	r3, [r0, #12]
 80074cc:	4641      	mov	r1, r8
 80074ce:	f002 fa1b 	bl	8009908 <__mcmp>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	da46      	bge.n	8007564 <_strtod_l+0x864>
 80074d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074d8:	ea53 030a 	orrs.w	r3, r3, sl
 80074dc:	d16c      	bne.n	80075b8 <_strtod_l+0x8b8>
 80074de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d168      	bne.n	80075b8 <_strtod_l+0x8b8>
 80074e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074ea:	0d1b      	lsrs	r3, r3, #20
 80074ec:	051b      	lsls	r3, r3, #20
 80074ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80074f2:	d961      	bls.n	80075b8 <_strtod_l+0x8b8>
 80074f4:	6963      	ldr	r3, [r4, #20]
 80074f6:	b913      	cbnz	r3, 80074fe <_strtod_l+0x7fe>
 80074f8:	6923      	ldr	r3, [r4, #16]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	dd5c      	ble.n	80075b8 <_strtod_l+0x8b8>
 80074fe:	4621      	mov	r1, r4
 8007500:	2201      	movs	r2, #1
 8007502:	9805      	ldr	r0, [sp, #20]
 8007504:	f002 f994 	bl	8009830 <__lshift>
 8007508:	4641      	mov	r1, r8
 800750a:	4604      	mov	r4, r0
 800750c:	f002 f9fc 	bl	8009908 <__mcmp>
 8007510:	2800      	cmp	r0, #0
 8007512:	dd51      	ble.n	80075b8 <_strtod_l+0x8b8>
 8007514:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007518:	9a08      	ldr	r2, [sp, #32]
 800751a:	0d1b      	lsrs	r3, r3, #20
 800751c:	051b      	lsls	r3, r3, #20
 800751e:	2a00      	cmp	r2, #0
 8007520:	d06b      	beq.n	80075fa <_strtod_l+0x8fa>
 8007522:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007526:	d868      	bhi.n	80075fa <_strtod_l+0x8fa>
 8007528:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800752c:	f67f ae9d 	bls.w	800726a <_strtod_l+0x56a>
 8007530:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <_strtod_l+0x85c>)
 8007532:	4650      	mov	r0, sl
 8007534:	4659      	mov	r1, fp
 8007536:	2200      	movs	r2, #0
 8007538:	f7f9 f86e 	bl	8000618 <__aeabi_dmul>
 800753c:	4b08      	ldr	r3, [pc, #32]	@ (8007560 <_strtod_l+0x860>)
 800753e:	400b      	ands	r3, r1
 8007540:	4682      	mov	sl, r0
 8007542:	468b      	mov	fp, r1
 8007544:	2b00      	cmp	r3, #0
 8007546:	f47f ae05 	bne.w	8007154 <_strtod_l+0x454>
 800754a:	9a05      	ldr	r2, [sp, #20]
 800754c:	2322      	movs	r3, #34	@ 0x22
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e600      	b.n	8007154 <_strtod_l+0x454>
 8007552:	bf00      	nop
 8007554:	0800adf8 	.word	0x0800adf8
 8007558:	fffffc02 	.word	0xfffffc02
 800755c:	39500000 	.word	0x39500000
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007568:	d165      	bne.n	8007636 <_strtod_l+0x936>
 800756a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800756c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007570:	b35a      	cbz	r2, 80075ca <_strtod_l+0x8ca>
 8007572:	4a9f      	ldr	r2, [pc, #636]	@ (80077f0 <_strtod_l+0xaf0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d12b      	bne.n	80075d0 <_strtod_l+0x8d0>
 8007578:	9b08      	ldr	r3, [sp, #32]
 800757a:	4651      	mov	r1, sl
 800757c:	b303      	cbz	r3, 80075c0 <_strtod_l+0x8c0>
 800757e:	4b9d      	ldr	r3, [pc, #628]	@ (80077f4 <_strtod_l+0xaf4>)
 8007580:	465a      	mov	r2, fp
 8007582:	4013      	ands	r3, r2
 8007584:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800758c:	d81b      	bhi.n	80075c6 <_strtod_l+0x8c6>
 800758e:	0d1b      	lsrs	r3, r3, #20
 8007590:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	4299      	cmp	r1, r3
 800759a:	d119      	bne.n	80075d0 <_strtod_l+0x8d0>
 800759c:	4b96      	ldr	r3, [pc, #600]	@ (80077f8 <_strtod_l+0xaf8>)
 800759e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d102      	bne.n	80075aa <_strtod_l+0x8aa>
 80075a4:	3101      	adds	r1, #1
 80075a6:	f43f adca 	beq.w	800713e <_strtod_l+0x43e>
 80075aa:	4b92      	ldr	r3, [pc, #584]	@ (80077f4 <_strtod_l+0xaf4>)
 80075ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075ae:	401a      	ands	r2, r3
 80075b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80075b4:	f04f 0a00 	mov.w	sl, #0
 80075b8:	9b08      	ldr	r3, [sp, #32]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1b8      	bne.n	8007530 <_strtod_l+0x830>
 80075be:	e5c9      	b.n	8007154 <_strtod_l+0x454>
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075c4:	e7e8      	b.n	8007598 <_strtod_l+0x898>
 80075c6:	4613      	mov	r3, r2
 80075c8:	e7e6      	b.n	8007598 <_strtod_l+0x898>
 80075ca:	ea53 030a 	orrs.w	r3, r3, sl
 80075ce:	d0a1      	beq.n	8007514 <_strtod_l+0x814>
 80075d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075d2:	b1db      	cbz	r3, 800760c <_strtod_l+0x90c>
 80075d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075d6:	4213      	tst	r3, r2
 80075d8:	d0ee      	beq.n	80075b8 <_strtod_l+0x8b8>
 80075da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075dc:	9a08      	ldr	r2, [sp, #32]
 80075de:	4650      	mov	r0, sl
 80075e0:	4659      	mov	r1, fp
 80075e2:	b1bb      	cbz	r3, 8007614 <_strtod_l+0x914>
 80075e4:	f7ff fb6c 	bl	8006cc0 <sulp>
 80075e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ec:	ec53 2b10 	vmov	r2, r3, d0
 80075f0:	f7f8 fe5c 	bl	80002ac <__adddf3>
 80075f4:	4682      	mov	sl, r0
 80075f6:	468b      	mov	fp, r1
 80075f8:	e7de      	b.n	80075b8 <_strtod_l+0x8b8>
 80075fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80075fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007602:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007606:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800760a:	e7d5      	b.n	80075b8 <_strtod_l+0x8b8>
 800760c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800760e:	ea13 0f0a 	tst.w	r3, sl
 8007612:	e7e1      	b.n	80075d8 <_strtod_l+0x8d8>
 8007614:	f7ff fb54 	bl	8006cc0 <sulp>
 8007618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800761c:	ec53 2b10 	vmov	r2, r3, d0
 8007620:	f7f8 fe42 	bl	80002a8 <__aeabi_dsub>
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	4682      	mov	sl, r0
 800762a:	468b      	mov	fp, r1
 800762c:	f7f9 fa5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007630:	2800      	cmp	r0, #0
 8007632:	d0c1      	beq.n	80075b8 <_strtod_l+0x8b8>
 8007634:	e619      	b.n	800726a <_strtod_l+0x56a>
 8007636:	4641      	mov	r1, r8
 8007638:	4620      	mov	r0, r4
 800763a:	f002 fadd 	bl	8009bf8 <__ratio>
 800763e:	ec57 6b10 	vmov	r6, r7, d0
 8007642:	2200      	movs	r2, #0
 8007644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f9 fa60 	bl	8000b10 <__aeabi_dcmple>
 8007650:	2800      	cmp	r0, #0
 8007652:	d06f      	beq.n	8007734 <_strtod_l+0xa34>
 8007654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d17a      	bne.n	8007750 <_strtod_l+0xa50>
 800765a:	f1ba 0f00 	cmp.w	sl, #0
 800765e:	d158      	bne.n	8007712 <_strtod_l+0xa12>
 8007660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007666:	2b00      	cmp	r3, #0
 8007668:	d15a      	bne.n	8007720 <_strtod_l+0xa20>
 800766a:	4b64      	ldr	r3, [pc, #400]	@ (80077fc <_strtod_l+0xafc>)
 800766c:	2200      	movs	r2, #0
 800766e:	4630      	mov	r0, r6
 8007670:	4639      	mov	r1, r7
 8007672:	f7f9 fa43 	bl	8000afc <__aeabi_dcmplt>
 8007676:	2800      	cmp	r0, #0
 8007678:	d159      	bne.n	800772e <_strtod_l+0xa2e>
 800767a:	4630      	mov	r0, r6
 800767c:	4639      	mov	r1, r7
 800767e:	4b60      	ldr	r3, [pc, #384]	@ (8007800 <_strtod_l+0xb00>)
 8007680:	2200      	movs	r2, #0
 8007682:	f7f8 ffc9 	bl	8000618 <__aeabi_dmul>
 8007686:	4606      	mov	r6, r0
 8007688:	460f      	mov	r7, r1
 800768a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800768e:	9606      	str	r6, [sp, #24]
 8007690:	9307      	str	r3, [sp, #28]
 8007692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007696:	4d57      	ldr	r5, [pc, #348]	@ (80077f4 <_strtod_l+0xaf4>)
 8007698:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800769c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800769e:	401d      	ands	r5, r3
 80076a0:	4b58      	ldr	r3, [pc, #352]	@ (8007804 <_strtod_l+0xb04>)
 80076a2:	429d      	cmp	r5, r3
 80076a4:	f040 80b2 	bne.w	800780c <_strtod_l+0xb0c>
 80076a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80076ae:	ec4b ab10 	vmov	d0, sl, fp
 80076b2:	f002 f9d9 	bl	8009a68 <__ulp>
 80076b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ba:	ec51 0b10 	vmov	r0, r1, d0
 80076be:	f7f8 ffab 	bl	8000618 <__aeabi_dmul>
 80076c2:	4652      	mov	r2, sl
 80076c4:	465b      	mov	r3, fp
 80076c6:	f7f8 fdf1 	bl	80002ac <__adddf3>
 80076ca:	460b      	mov	r3, r1
 80076cc:	4949      	ldr	r1, [pc, #292]	@ (80077f4 <_strtod_l+0xaf4>)
 80076ce:	4a4e      	ldr	r2, [pc, #312]	@ (8007808 <_strtod_l+0xb08>)
 80076d0:	4019      	ands	r1, r3
 80076d2:	4291      	cmp	r1, r2
 80076d4:	4682      	mov	sl, r0
 80076d6:	d942      	bls.n	800775e <_strtod_l+0xa5e>
 80076d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076da:	4b47      	ldr	r3, [pc, #284]	@ (80077f8 <_strtod_l+0xaf8>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d103      	bne.n	80076e8 <_strtod_l+0x9e8>
 80076e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076e2:	3301      	adds	r3, #1
 80076e4:	f43f ad2b 	beq.w	800713e <_strtod_l+0x43e>
 80076e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80077f8 <_strtod_l+0xaf8>
 80076ec:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80076f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076f2:	9805      	ldr	r0, [sp, #20]
 80076f4:	f001 fe84 	bl	8009400 <_Bfree>
 80076f8:	9805      	ldr	r0, [sp, #20]
 80076fa:	4649      	mov	r1, r9
 80076fc:	f001 fe80 	bl	8009400 <_Bfree>
 8007700:	9805      	ldr	r0, [sp, #20]
 8007702:	4641      	mov	r1, r8
 8007704:	f001 fe7c 	bl	8009400 <_Bfree>
 8007708:	9805      	ldr	r0, [sp, #20]
 800770a:	4621      	mov	r1, r4
 800770c:	f001 fe78 	bl	8009400 <_Bfree>
 8007710:	e618      	b.n	8007344 <_strtod_l+0x644>
 8007712:	f1ba 0f01 	cmp.w	sl, #1
 8007716:	d103      	bne.n	8007720 <_strtod_l+0xa20>
 8007718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800771a:	2b00      	cmp	r3, #0
 800771c:	f43f ada5 	beq.w	800726a <_strtod_l+0x56a>
 8007720:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80077d0 <_strtod_l+0xad0>
 8007724:	4f35      	ldr	r7, [pc, #212]	@ (80077fc <_strtod_l+0xafc>)
 8007726:	ed8d 7b06 	vstr	d7, [sp, #24]
 800772a:	2600      	movs	r6, #0
 800772c:	e7b1      	b.n	8007692 <_strtod_l+0x992>
 800772e:	4f34      	ldr	r7, [pc, #208]	@ (8007800 <_strtod_l+0xb00>)
 8007730:	2600      	movs	r6, #0
 8007732:	e7aa      	b.n	800768a <_strtod_l+0x98a>
 8007734:	4b32      	ldr	r3, [pc, #200]	@ (8007800 <_strtod_l+0xb00>)
 8007736:	4630      	mov	r0, r6
 8007738:	4639      	mov	r1, r7
 800773a:	2200      	movs	r2, #0
 800773c:	f7f8 ff6c 	bl	8000618 <__aeabi_dmul>
 8007740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007742:	4606      	mov	r6, r0
 8007744:	460f      	mov	r7, r1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d09f      	beq.n	800768a <_strtod_l+0x98a>
 800774a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800774e:	e7a0      	b.n	8007692 <_strtod_l+0x992>
 8007750:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80077d8 <_strtod_l+0xad8>
 8007754:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007758:	ec57 6b17 	vmov	r6, r7, d7
 800775c:	e799      	b.n	8007692 <_strtod_l+0x992>
 800775e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1c1      	bne.n	80076f0 <_strtod_l+0x9f0>
 800776c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007770:	0d1b      	lsrs	r3, r3, #20
 8007772:	051b      	lsls	r3, r3, #20
 8007774:	429d      	cmp	r5, r3
 8007776:	d1bb      	bne.n	80076f0 <_strtod_l+0x9f0>
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	f7f9 faac 	bl	8000cd8 <__aeabi_d2lz>
 8007780:	f7f8 ff1c 	bl	80005bc <__aeabi_l2d>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	f7f8 fd8c 	bl	80002a8 <__aeabi_dsub>
 8007790:	460b      	mov	r3, r1
 8007792:	4602      	mov	r2, r0
 8007794:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007798:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800779c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800779e:	ea46 060a 	orr.w	r6, r6, sl
 80077a2:	431e      	orrs	r6, r3
 80077a4:	d06f      	beq.n	8007886 <_strtod_l+0xb86>
 80077a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80077e0 <_strtod_l+0xae0>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f9 f9a6 	bl	8000afc <__aeabi_dcmplt>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	f47f accf 	bne.w	8007154 <_strtod_l+0x454>
 80077b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80077e8 <_strtod_l+0xae8>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077c0:	f7f9 f9ba 	bl	8000b38 <__aeabi_dcmpgt>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d093      	beq.n	80076f0 <_strtod_l+0x9f0>
 80077c8:	e4c4      	b.n	8007154 <_strtod_l+0x454>
 80077ca:	bf00      	nop
 80077cc:	f3af 8000 	nop.w
 80077d0:	00000000 	.word	0x00000000
 80077d4:	bff00000 	.word	0xbff00000
 80077d8:	00000000 	.word	0x00000000
 80077dc:	3ff00000 	.word	0x3ff00000
 80077e0:	94a03595 	.word	0x94a03595
 80077e4:	3fdfffff 	.word	0x3fdfffff
 80077e8:	35afe535 	.word	0x35afe535
 80077ec:	3fe00000 	.word	0x3fe00000
 80077f0:	000fffff 	.word	0x000fffff
 80077f4:	7ff00000 	.word	0x7ff00000
 80077f8:	7fefffff 	.word	0x7fefffff
 80077fc:	3ff00000 	.word	0x3ff00000
 8007800:	3fe00000 	.word	0x3fe00000
 8007804:	7fe00000 	.word	0x7fe00000
 8007808:	7c9fffff 	.word	0x7c9fffff
 800780c:	9b08      	ldr	r3, [sp, #32]
 800780e:	b323      	cbz	r3, 800785a <_strtod_l+0xb5a>
 8007810:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007814:	d821      	bhi.n	800785a <_strtod_l+0xb5a>
 8007816:	a328      	add	r3, pc, #160	@ (adr r3, 80078b8 <_strtod_l+0xbb8>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f7f9 f976 	bl	8000b10 <__aeabi_dcmple>
 8007824:	b1a0      	cbz	r0, 8007850 <_strtod_l+0xb50>
 8007826:	4639      	mov	r1, r7
 8007828:	4630      	mov	r0, r6
 800782a:	f7f9 f9cd 	bl	8000bc8 <__aeabi_d2uiz>
 800782e:	2801      	cmp	r0, #1
 8007830:	bf38      	it	cc
 8007832:	2001      	movcc	r0, #1
 8007834:	f7f8 fe76 	bl	8000524 <__aeabi_ui2d>
 8007838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800783a:	4606      	mov	r6, r0
 800783c:	460f      	mov	r7, r1
 800783e:	b9fb      	cbnz	r3, 8007880 <_strtod_l+0xb80>
 8007840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007844:	9014      	str	r0, [sp, #80]	@ 0x50
 8007846:	9315      	str	r3, [sp, #84]	@ 0x54
 8007848:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800784c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007850:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007852:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007856:	1b5b      	subs	r3, r3, r5
 8007858:	9311      	str	r3, [sp, #68]	@ 0x44
 800785a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800785e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007862:	f002 f901 	bl	8009a68 <__ulp>
 8007866:	4650      	mov	r0, sl
 8007868:	ec53 2b10 	vmov	r2, r3, d0
 800786c:	4659      	mov	r1, fp
 800786e:	f7f8 fed3 	bl	8000618 <__aeabi_dmul>
 8007872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007876:	f7f8 fd19 	bl	80002ac <__adddf3>
 800787a:	4682      	mov	sl, r0
 800787c:	468b      	mov	fp, r1
 800787e:	e770      	b.n	8007762 <_strtod_l+0xa62>
 8007880:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007884:	e7e0      	b.n	8007848 <_strtod_l+0xb48>
 8007886:	a30e      	add	r3, pc, #56	@ (adr r3, 80078c0 <_strtod_l+0xbc0>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f7f9 f936 	bl	8000afc <__aeabi_dcmplt>
 8007890:	e798      	b.n	80077c4 <_strtod_l+0xac4>
 8007892:	2300      	movs	r3, #0
 8007894:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007896:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	f7ff ba6d 	b.w	8006d7a <_strtod_l+0x7a>
 80078a0:	2a65      	cmp	r2, #101	@ 0x65
 80078a2:	f43f ab66 	beq.w	8006f72 <_strtod_l+0x272>
 80078a6:	2a45      	cmp	r2, #69	@ 0x45
 80078a8:	f43f ab63 	beq.w	8006f72 <_strtod_l+0x272>
 80078ac:	2301      	movs	r3, #1
 80078ae:	f7ff bb9e 	b.w	8006fee <_strtod_l+0x2ee>
 80078b2:	bf00      	nop
 80078b4:	f3af 8000 	nop.w
 80078b8:	ffc00000 	.word	0xffc00000
 80078bc:	41dfffff 	.word	0x41dfffff
 80078c0:	94a03595 	.word	0x94a03595
 80078c4:	3fcfffff 	.word	0x3fcfffff

080078c8 <_strtod_r>:
 80078c8:	4b01      	ldr	r3, [pc, #4]	@ (80078d0 <_strtod_r+0x8>)
 80078ca:	f7ff ba19 	b.w	8006d00 <_strtod_l>
 80078ce:	bf00      	nop
 80078d0:	20000020 	.word	0x20000020

080078d4 <_strtol_l.constprop.0>:
 80078d4:	2b24      	cmp	r3, #36	@ 0x24
 80078d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078da:	4686      	mov	lr, r0
 80078dc:	4690      	mov	r8, r2
 80078de:	d801      	bhi.n	80078e4 <_strtol_l.constprop.0+0x10>
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d106      	bne.n	80078f2 <_strtol_l.constprop.0+0x1e>
 80078e4:	f000 f8ae 	bl	8007a44 <__errno>
 80078e8:	2316      	movs	r3, #22
 80078ea:	6003      	str	r3, [r0, #0]
 80078ec:	2000      	movs	r0, #0
 80078ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f2:	4834      	ldr	r0, [pc, #208]	@ (80079c4 <_strtol_l.constprop.0+0xf0>)
 80078f4:	460d      	mov	r5, r1
 80078f6:	462a      	mov	r2, r5
 80078f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078fc:	5d06      	ldrb	r6, [r0, r4]
 80078fe:	f016 0608 	ands.w	r6, r6, #8
 8007902:	d1f8      	bne.n	80078f6 <_strtol_l.constprop.0+0x22>
 8007904:	2c2d      	cmp	r4, #45	@ 0x2d
 8007906:	d12d      	bne.n	8007964 <_strtol_l.constprop.0+0x90>
 8007908:	782c      	ldrb	r4, [r5, #0]
 800790a:	2601      	movs	r6, #1
 800790c:	1c95      	adds	r5, r2, #2
 800790e:	f033 0210 	bics.w	r2, r3, #16
 8007912:	d109      	bne.n	8007928 <_strtol_l.constprop.0+0x54>
 8007914:	2c30      	cmp	r4, #48	@ 0x30
 8007916:	d12a      	bne.n	800796e <_strtol_l.constprop.0+0x9a>
 8007918:	782a      	ldrb	r2, [r5, #0]
 800791a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800791e:	2a58      	cmp	r2, #88	@ 0x58
 8007920:	d125      	bne.n	800796e <_strtol_l.constprop.0+0x9a>
 8007922:	786c      	ldrb	r4, [r5, #1]
 8007924:	2310      	movs	r3, #16
 8007926:	3502      	adds	r5, #2
 8007928:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800792c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007930:	2200      	movs	r2, #0
 8007932:	fbbc f9f3 	udiv	r9, ip, r3
 8007936:	4610      	mov	r0, r2
 8007938:	fb03 ca19 	mls	sl, r3, r9, ip
 800793c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007940:	2f09      	cmp	r7, #9
 8007942:	d81b      	bhi.n	800797c <_strtol_l.constprop.0+0xa8>
 8007944:	463c      	mov	r4, r7
 8007946:	42a3      	cmp	r3, r4
 8007948:	dd27      	ble.n	800799a <_strtol_l.constprop.0+0xc6>
 800794a:	1c57      	adds	r7, r2, #1
 800794c:	d007      	beq.n	800795e <_strtol_l.constprop.0+0x8a>
 800794e:	4581      	cmp	r9, r0
 8007950:	d320      	bcc.n	8007994 <_strtol_l.constprop.0+0xc0>
 8007952:	d101      	bne.n	8007958 <_strtol_l.constprop.0+0x84>
 8007954:	45a2      	cmp	sl, r4
 8007956:	db1d      	blt.n	8007994 <_strtol_l.constprop.0+0xc0>
 8007958:	fb00 4003 	mla	r0, r0, r3, r4
 800795c:	2201      	movs	r2, #1
 800795e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007962:	e7eb      	b.n	800793c <_strtol_l.constprop.0+0x68>
 8007964:	2c2b      	cmp	r4, #43	@ 0x2b
 8007966:	bf04      	itt	eq
 8007968:	782c      	ldrbeq	r4, [r5, #0]
 800796a:	1c95      	addeq	r5, r2, #2
 800796c:	e7cf      	b.n	800790e <_strtol_l.constprop.0+0x3a>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1da      	bne.n	8007928 <_strtol_l.constprop.0+0x54>
 8007972:	2c30      	cmp	r4, #48	@ 0x30
 8007974:	bf0c      	ite	eq
 8007976:	2308      	moveq	r3, #8
 8007978:	230a      	movne	r3, #10
 800797a:	e7d5      	b.n	8007928 <_strtol_l.constprop.0+0x54>
 800797c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007980:	2f19      	cmp	r7, #25
 8007982:	d801      	bhi.n	8007988 <_strtol_l.constprop.0+0xb4>
 8007984:	3c37      	subs	r4, #55	@ 0x37
 8007986:	e7de      	b.n	8007946 <_strtol_l.constprop.0+0x72>
 8007988:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800798c:	2f19      	cmp	r7, #25
 800798e:	d804      	bhi.n	800799a <_strtol_l.constprop.0+0xc6>
 8007990:	3c57      	subs	r4, #87	@ 0x57
 8007992:	e7d8      	b.n	8007946 <_strtol_l.constprop.0+0x72>
 8007994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007998:	e7e1      	b.n	800795e <_strtol_l.constprop.0+0x8a>
 800799a:	1c53      	adds	r3, r2, #1
 800799c:	d108      	bne.n	80079b0 <_strtol_l.constprop.0+0xdc>
 800799e:	2322      	movs	r3, #34	@ 0x22
 80079a0:	f8ce 3000 	str.w	r3, [lr]
 80079a4:	4660      	mov	r0, ip
 80079a6:	f1b8 0f00 	cmp.w	r8, #0
 80079aa:	d0a0      	beq.n	80078ee <_strtol_l.constprop.0+0x1a>
 80079ac:	1e69      	subs	r1, r5, #1
 80079ae:	e006      	b.n	80079be <_strtol_l.constprop.0+0xea>
 80079b0:	b106      	cbz	r6, 80079b4 <_strtol_l.constprop.0+0xe0>
 80079b2:	4240      	negs	r0, r0
 80079b4:	f1b8 0f00 	cmp.w	r8, #0
 80079b8:	d099      	beq.n	80078ee <_strtol_l.constprop.0+0x1a>
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	d1f6      	bne.n	80079ac <_strtol_l.constprop.0+0xd8>
 80079be:	f8c8 1000 	str.w	r1, [r8]
 80079c2:	e794      	b.n	80078ee <_strtol_l.constprop.0+0x1a>
 80079c4:	0800ae29 	.word	0x0800ae29

080079c8 <_strtol_r>:
 80079c8:	f7ff bf84 	b.w	80078d4 <_strtol_l.constprop.0>

080079cc <_fwalk_sglue>:
 80079cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d0:	4607      	mov	r7, r0
 80079d2:	4688      	mov	r8, r1
 80079d4:	4614      	mov	r4, r2
 80079d6:	2600      	movs	r6, #0
 80079d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079dc:	f1b9 0901 	subs.w	r9, r9, #1
 80079e0:	d505      	bpl.n	80079ee <_fwalk_sglue+0x22>
 80079e2:	6824      	ldr	r4, [r4, #0]
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	d1f7      	bne.n	80079d8 <_fwalk_sglue+0xc>
 80079e8:	4630      	mov	r0, r6
 80079ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d907      	bls.n	8007a04 <_fwalk_sglue+0x38>
 80079f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079f8:	3301      	adds	r3, #1
 80079fa:	d003      	beq.n	8007a04 <_fwalk_sglue+0x38>
 80079fc:	4629      	mov	r1, r5
 80079fe:	4638      	mov	r0, r7
 8007a00:	47c0      	blx	r8
 8007a02:	4306      	orrs	r6, r0
 8007a04:	3568      	adds	r5, #104	@ 0x68
 8007a06:	e7e9      	b.n	80079dc <_fwalk_sglue+0x10>

08007a08 <strncmp>:
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	b16a      	cbz	r2, 8007a28 <strncmp+0x20>
 8007a0c:	3901      	subs	r1, #1
 8007a0e:	1884      	adds	r4, r0, r2
 8007a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d103      	bne.n	8007a24 <strncmp+0x1c>
 8007a1c:	42a0      	cmp	r0, r4
 8007a1e:	d001      	beq.n	8007a24 <strncmp+0x1c>
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	d1f5      	bne.n	8007a10 <strncmp+0x8>
 8007a24:	1ad0      	subs	r0, r2, r3
 8007a26:	bd10      	pop	{r4, pc}
 8007a28:	4610      	mov	r0, r2
 8007a2a:	e7fc      	b.n	8007a26 <strncmp+0x1e>

08007a2c <memset>:
 8007a2c:	4402      	add	r2, r0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d100      	bne.n	8007a36 <memset+0xa>
 8007a34:	4770      	bx	lr
 8007a36:	f803 1b01 	strb.w	r1, [r3], #1
 8007a3a:	e7f9      	b.n	8007a30 <memset+0x4>

08007a3c <_localeconv_r>:
 8007a3c:	4800      	ldr	r0, [pc, #0]	@ (8007a40 <_localeconv_r+0x4>)
 8007a3e:	4770      	bx	lr
 8007a40:	20000110 	.word	0x20000110

08007a44 <__errno>:
 8007a44:	4b01      	ldr	r3, [pc, #4]	@ (8007a4c <__errno+0x8>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	2000018c 	.word	0x2000018c

08007a50 <__libc_init_array>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4d0d      	ldr	r5, [pc, #52]	@ (8007a88 <__libc_init_array+0x38>)
 8007a54:	4c0d      	ldr	r4, [pc, #52]	@ (8007a8c <__libc_init_array+0x3c>)
 8007a56:	1b64      	subs	r4, r4, r5
 8007a58:	10a4      	asrs	r4, r4, #2
 8007a5a:	2600      	movs	r6, #0
 8007a5c:	42a6      	cmp	r6, r4
 8007a5e:	d109      	bne.n	8007a74 <__libc_init_array+0x24>
 8007a60:	4d0b      	ldr	r5, [pc, #44]	@ (8007a90 <__libc_init_array+0x40>)
 8007a62:	4c0c      	ldr	r4, [pc, #48]	@ (8007a94 <__libc_init_array+0x44>)
 8007a64:	f003 f92e 	bl	800acc4 <_init>
 8007a68:	1b64      	subs	r4, r4, r5
 8007a6a:	10a4      	asrs	r4, r4, #2
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	42a6      	cmp	r6, r4
 8007a70:	d105      	bne.n	8007a7e <__libc_init_array+0x2e>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a78:	4798      	blx	r3
 8007a7a:	3601      	adds	r6, #1
 8007a7c:	e7ee      	b.n	8007a5c <__libc_init_array+0xc>
 8007a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a82:	4798      	blx	r3
 8007a84:	3601      	adds	r6, #1
 8007a86:	e7f2      	b.n	8007a6e <__libc_init_array+0x1e>
 8007a88:	0800b1dc 	.word	0x0800b1dc
 8007a8c:	0800b1dc 	.word	0x0800b1dc
 8007a90:	0800b1dc 	.word	0x0800b1dc
 8007a94:	0800b1e0 	.word	0x0800b1e0

08007a98 <__retarget_lock_init_recursive>:
 8007a98:	4770      	bx	lr

08007a9a <__retarget_lock_acquire_recursive>:
 8007a9a:	4770      	bx	lr

08007a9c <__retarget_lock_release_recursive>:
 8007a9c:	4770      	bx	lr

08007a9e <memcpy>:
 8007a9e:	440a      	add	r2, r1
 8007aa0:	4291      	cmp	r1, r2
 8007aa2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007aa6:	d100      	bne.n	8007aaa <memcpy+0xc>
 8007aa8:	4770      	bx	lr
 8007aaa:	b510      	push	{r4, lr}
 8007aac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ab0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ab4:	4291      	cmp	r1, r2
 8007ab6:	d1f9      	bne.n	8007aac <memcpy+0xe>
 8007ab8:	bd10      	pop	{r4, pc}
 8007aba:	0000      	movs	r0, r0
 8007abc:	0000      	movs	r0, r0
	...

08007ac0 <nan>:
 8007ac0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ac8 <nan+0x8>
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	00000000 	.word	0x00000000
 8007acc:	7ff80000 	.word	0x7ff80000

08007ad0 <nanf>:
 8007ad0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007ad8 <nanf+0x8>
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	7fc00000 	.word	0x7fc00000

08007adc <quorem>:
 8007adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	6903      	ldr	r3, [r0, #16]
 8007ae2:	690c      	ldr	r4, [r1, #16]
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	4607      	mov	r7, r0
 8007ae8:	db7e      	blt.n	8007be8 <quorem+0x10c>
 8007aea:	3c01      	subs	r4, #1
 8007aec:	f101 0814 	add.w	r8, r1, #20
 8007af0:	00a3      	lsls	r3, r4, #2
 8007af2:	f100 0514 	add.w	r5, r0, #20
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b06:	3301      	adds	r3, #1
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b12:	d32e      	bcc.n	8007b72 <quorem+0x96>
 8007b14:	f04f 0a00 	mov.w	sl, #0
 8007b18:	46c4      	mov	ip, r8
 8007b1a:	46ae      	mov	lr, r5
 8007b1c:	46d3      	mov	fp, sl
 8007b1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b22:	b298      	uxth	r0, r3
 8007b24:	fb06 a000 	mla	r0, r6, r0, sl
 8007b28:	0c02      	lsrs	r2, r0, #16
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	fb06 2303 	mla	r3, r6, r3, r2
 8007b30:	f8de 2000 	ldr.w	r2, [lr]
 8007b34:	b280      	uxth	r0, r0
 8007b36:	b292      	uxth	r2, r2
 8007b38:	1a12      	subs	r2, r2, r0
 8007b3a:	445a      	add	r2, fp
 8007b3c:	f8de 0000 	ldr.w	r0, [lr]
 8007b40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b4e:	b292      	uxth	r2, r2
 8007b50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b54:	45e1      	cmp	r9, ip
 8007b56:	f84e 2b04 	str.w	r2, [lr], #4
 8007b5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b5e:	d2de      	bcs.n	8007b1e <quorem+0x42>
 8007b60:	9b00      	ldr	r3, [sp, #0]
 8007b62:	58eb      	ldr	r3, [r5, r3]
 8007b64:	b92b      	cbnz	r3, 8007b72 <quorem+0x96>
 8007b66:	9b01      	ldr	r3, [sp, #4]
 8007b68:	3b04      	subs	r3, #4
 8007b6a:	429d      	cmp	r5, r3
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	d32f      	bcc.n	8007bd0 <quorem+0xf4>
 8007b70:	613c      	str	r4, [r7, #16]
 8007b72:	4638      	mov	r0, r7
 8007b74:	f001 fec8 	bl	8009908 <__mcmp>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	db25      	blt.n	8007bc8 <quorem+0xec>
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b84:	f8d1 c000 	ldr.w	ip, [r1]
 8007b88:	fa1f fe82 	uxth.w	lr, r2
 8007b8c:	fa1f f38c 	uxth.w	r3, ip
 8007b90:	eba3 030e 	sub.w	r3, r3, lr
 8007b94:	4403      	add	r3, r0
 8007b96:	0c12      	lsrs	r2, r2, #16
 8007b98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ba6:	45c1      	cmp	r9, r8
 8007ba8:	f841 3b04 	str.w	r3, [r1], #4
 8007bac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007bb0:	d2e6      	bcs.n	8007b80 <quorem+0xa4>
 8007bb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bba:	b922      	cbnz	r2, 8007bc6 <quorem+0xea>
 8007bbc:	3b04      	subs	r3, #4
 8007bbe:	429d      	cmp	r5, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	d30b      	bcc.n	8007bdc <quorem+0x100>
 8007bc4:	613c      	str	r4, [r7, #16]
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	4630      	mov	r0, r6
 8007bca:	b003      	add	sp, #12
 8007bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd0:	6812      	ldr	r2, [r2, #0]
 8007bd2:	3b04      	subs	r3, #4
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	d1cb      	bne.n	8007b70 <quorem+0x94>
 8007bd8:	3c01      	subs	r4, #1
 8007bda:	e7c6      	b.n	8007b6a <quorem+0x8e>
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	3b04      	subs	r3, #4
 8007be0:	2a00      	cmp	r2, #0
 8007be2:	d1ef      	bne.n	8007bc4 <quorem+0xe8>
 8007be4:	3c01      	subs	r4, #1
 8007be6:	e7ea      	b.n	8007bbe <quorem+0xe2>
 8007be8:	2000      	movs	r0, #0
 8007bea:	e7ee      	b.n	8007bca <quorem+0xee>
 8007bec:	0000      	movs	r0, r0
	...

08007bf0 <_dtoa_r>:
 8007bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf4:	69c7      	ldr	r7, [r0, #28]
 8007bf6:	b099      	sub	sp, #100	@ 0x64
 8007bf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007bfc:	ec55 4b10 	vmov	r4, r5, d0
 8007c00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007c02:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c04:	4683      	mov	fp, r0
 8007c06:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c0a:	b97f      	cbnz	r7, 8007c2c <_dtoa_r+0x3c>
 8007c0c:	2010      	movs	r0, #16
 8007c0e:	f001 fa43 	bl	8009098 <malloc>
 8007c12:	4602      	mov	r2, r0
 8007c14:	f8cb 001c 	str.w	r0, [fp, #28]
 8007c18:	b920      	cbnz	r0, 8007c24 <_dtoa_r+0x34>
 8007c1a:	4ba7      	ldr	r3, [pc, #668]	@ (8007eb8 <_dtoa_r+0x2c8>)
 8007c1c:	21ef      	movs	r1, #239	@ 0xef
 8007c1e:	48a7      	ldr	r0, [pc, #668]	@ (8007ebc <_dtoa_r+0x2cc>)
 8007c20:	f002 f94e 	bl	8009ec0 <__assert_func>
 8007c24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c28:	6007      	str	r7, [r0, #0]
 8007c2a:	60c7      	str	r7, [r0, #12]
 8007c2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c30:	6819      	ldr	r1, [r3, #0]
 8007c32:	b159      	cbz	r1, 8007c4c <_dtoa_r+0x5c>
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	604a      	str	r2, [r1, #4]
 8007c38:	2301      	movs	r3, #1
 8007c3a:	4093      	lsls	r3, r2
 8007c3c:	608b      	str	r3, [r1, #8]
 8007c3e:	4658      	mov	r0, fp
 8007c40:	f001 fbde 	bl	8009400 <_Bfree>
 8007c44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	1e2b      	subs	r3, r5, #0
 8007c4e:	bfb9      	ittee	lt
 8007c50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c54:	9303      	strlt	r3, [sp, #12]
 8007c56:	2300      	movge	r3, #0
 8007c58:	6033      	strge	r3, [r6, #0]
 8007c5a:	9f03      	ldr	r7, [sp, #12]
 8007c5c:	4b98      	ldr	r3, [pc, #608]	@ (8007ec0 <_dtoa_r+0x2d0>)
 8007c5e:	bfbc      	itt	lt
 8007c60:	2201      	movlt	r2, #1
 8007c62:	6032      	strlt	r2, [r6, #0]
 8007c64:	43bb      	bics	r3, r7
 8007c66:	d112      	bne.n	8007c8e <_dtoa_r+0x9e>
 8007c68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c74:	4323      	orrs	r3, r4
 8007c76:	f000 854d 	beq.w	8008714 <_dtoa_r+0xb24>
 8007c7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007ed4 <_dtoa_r+0x2e4>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 854f 	beq.w	8008724 <_dtoa_r+0xb34>
 8007c86:	f10a 0303 	add.w	r3, sl, #3
 8007c8a:	f000 bd49 	b.w	8008720 <_dtoa_r+0xb30>
 8007c8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	ec51 0b17 	vmov	r0, r1, d7
 8007c98:	2300      	movs	r3, #0
 8007c9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007c9e:	f7f8 ff23 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	b158      	cbz	r0, 8007cbe <_dtoa_r+0xce>
 8007ca6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ca8:	2301      	movs	r3, #1
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cae:	b113      	cbz	r3, 8007cb6 <_dtoa_r+0xc6>
 8007cb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007cb2:	4b84      	ldr	r3, [pc, #528]	@ (8007ec4 <_dtoa_r+0x2d4>)
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ed8 <_dtoa_r+0x2e8>
 8007cba:	f000 bd33 	b.w	8008724 <_dtoa_r+0xb34>
 8007cbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007cc2:	aa16      	add	r2, sp, #88	@ 0x58
 8007cc4:	a917      	add	r1, sp, #92	@ 0x5c
 8007cc6:	4658      	mov	r0, fp
 8007cc8:	f001 ff3e 	bl	8009b48 <__d2b>
 8007ccc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007cd0:	4681      	mov	r9, r0
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	d077      	beq.n	8007dc6 <_dtoa_r+0x1d6>
 8007cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ce4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ce8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007cec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4b74      	ldr	r3, [pc, #464]	@ (8007ec8 <_dtoa_r+0x2d8>)
 8007cf6:	f7f8 fad7 	bl	80002a8 <__aeabi_dsub>
 8007cfa:	a369      	add	r3, pc, #420	@ (adr r3, 8007ea0 <_dtoa_r+0x2b0>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f7f8 fc8a 	bl	8000618 <__aeabi_dmul>
 8007d04:	a368      	add	r3, pc, #416	@ (adr r3, 8007ea8 <_dtoa_r+0x2b8>)
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f7f8 facf 	bl	80002ac <__adddf3>
 8007d0e:	4604      	mov	r4, r0
 8007d10:	4630      	mov	r0, r6
 8007d12:	460d      	mov	r5, r1
 8007d14:	f7f8 fc16 	bl	8000544 <__aeabi_i2d>
 8007d18:	a365      	add	r3, pc, #404	@ (adr r3, 8007eb0 <_dtoa_r+0x2c0>)
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f7f8 fc7b 	bl	8000618 <__aeabi_dmul>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4620      	mov	r0, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7f8 fabf 	bl	80002ac <__adddf3>
 8007d2e:	4604      	mov	r4, r0
 8007d30:	460d      	mov	r5, r1
 8007d32:	f7f8 ff21 	bl	8000b78 <__aeabi_d2iz>
 8007d36:	2200      	movs	r2, #0
 8007d38:	4607      	mov	r7, r0
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f7f8 fedc 	bl	8000afc <__aeabi_dcmplt>
 8007d44:	b140      	cbz	r0, 8007d58 <_dtoa_r+0x168>
 8007d46:	4638      	mov	r0, r7
 8007d48:	f7f8 fbfc 	bl	8000544 <__aeabi_i2d>
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	462b      	mov	r3, r5
 8007d50:	f7f8 feca 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d54:	b900      	cbnz	r0, 8007d58 <_dtoa_r+0x168>
 8007d56:	3f01      	subs	r7, #1
 8007d58:	2f16      	cmp	r7, #22
 8007d5a:	d851      	bhi.n	8007e00 <_dtoa_r+0x210>
 8007d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8007ecc <_dtoa_r+0x2dc>)
 8007d5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d6a:	f7f8 fec7 	bl	8000afc <__aeabi_dcmplt>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d048      	beq.n	8007e04 <_dtoa_r+0x214>
 8007d72:	3f01      	subs	r7, #1
 8007d74:	2300      	movs	r3, #0
 8007d76:	9312      	str	r3, [sp, #72]	@ 0x48
 8007d78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d7a:	1b9b      	subs	r3, r3, r6
 8007d7c:	1e5a      	subs	r2, r3, #1
 8007d7e:	bf44      	itt	mi
 8007d80:	f1c3 0801 	rsbmi	r8, r3, #1
 8007d84:	2300      	movmi	r3, #0
 8007d86:	9208      	str	r2, [sp, #32]
 8007d88:	bf54      	ite	pl
 8007d8a:	f04f 0800 	movpl.w	r8, #0
 8007d8e:	9308      	strmi	r3, [sp, #32]
 8007d90:	2f00      	cmp	r7, #0
 8007d92:	db39      	blt.n	8007e08 <_dtoa_r+0x218>
 8007d94:	9b08      	ldr	r3, [sp, #32]
 8007d96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007d98:	443b      	add	r3, r7
 8007d9a:	9308      	str	r3, [sp, #32]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da2:	2b09      	cmp	r3, #9
 8007da4:	d864      	bhi.n	8007e70 <_dtoa_r+0x280>
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	bfc4      	itt	gt
 8007daa:	3b04      	subgt	r3, #4
 8007dac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db0:	f1a3 0302 	sub.w	r3, r3, #2
 8007db4:	bfcc      	ite	gt
 8007db6:	2400      	movgt	r4, #0
 8007db8:	2401      	movle	r4, #1
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d863      	bhi.n	8007e86 <_dtoa_r+0x296>
 8007dbe:	e8df f003 	tbb	[pc, r3]
 8007dc2:	372a      	.short	0x372a
 8007dc4:	5535      	.short	0x5535
 8007dc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007dca:	441e      	add	r6, r3
 8007dcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	bfc1      	itttt	gt
 8007dd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007dd8:	409f      	lslgt	r7, r3
 8007dda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007dde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007de2:	bfd6      	itet	le
 8007de4:	f1c3 0320 	rsble	r3, r3, #32
 8007de8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007dec:	fa04 f003 	lslle.w	r0, r4, r3
 8007df0:	f7f8 fb98 	bl	8000524 <__aeabi_ui2d>
 8007df4:	2201      	movs	r2, #1
 8007df6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007dfa:	3e01      	subs	r6, #1
 8007dfc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007dfe:	e777      	b.n	8007cf0 <_dtoa_r+0x100>
 8007e00:	2301      	movs	r3, #1
 8007e02:	e7b8      	b.n	8007d76 <_dtoa_r+0x186>
 8007e04:	9012      	str	r0, [sp, #72]	@ 0x48
 8007e06:	e7b7      	b.n	8007d78 <_dtoa_r+0x188>
 8007e08:	427b      	negs	r3, r7
 8007e0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	eba8 0807 	sub.w	r8, r8, r7
 8007e12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e14:	e7c4      	b.n	8007da0 <_dtoa_r+0x1b0>
 8007e16:	2300      	movs	r3, #0
 8007e18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dc35      	bgt.n	8007e8c <_dtoa_r+0x29c>
 8007e20:	2301      	movs	r3, #1
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	9307      	str	r3, [sp, #28]
 8007e26:	461a      	mov	r2, r3
 8007e28:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e2a:	e00b      	b.n	8007e44 <_dtoa_r+0x254>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e7f3      	b.n	8007e18 <_dtoa_r+0x228>
 8007e30:	2300      	movs	r3, #0
 8007e32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e36:	18fb      	adds	r3, r7, r3
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	9307      	str	r3, [sp, #28]
 8007e40:	bfb8      	it	lt
 8007e42:	2301      	movlt	r3, #1
 8007e44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e48:	2100      	movs	r1, #0
 8007e4a:	2204      	movs	r2, #4
 8007e4c:	f102 0514 	add.w	r5, r2, #20
 8007e50:	429d      	cmp	r5, r3
 8007e52:	d91f      	bls.n	8007e94 <_dtoa_r+0x2a4>
 8007e54:	6041      	str	r1, [r0, #4]
 8007e56:	4658      	mov	r0, fp
 8007e58:	f001 fa92 	bl	8009380 <_Balloc>
 8007e5c:	4682      	mov	sl, r0
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d13c      	bne.n	8007edc <_dtoa_r+0x2ec>
 8007e62:	4b1b      	ldr	r3, [pc, #108]	@ (8007ed0 <_dtoa_r+0x2e0>)
 8007e64:	4602      	mov	r2, r0
 8007e66:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e6a:	e6d8      	b.n	8007c1e <_dtoa_r+0x2e>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e7e0      	b.n	8007e32 <_dtoa_r+0x242>
 8007e70:	2401      	movs	r4, #1
 8007e72:	2300      	movs	r3, #0
 8007e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	9307      	str	r3, [sp, #28]
 8007e80:	2200      	movs	r2, #0
 8007e82:	2312      	movs	r3, #18
 8007e84:	e7d0      	b.n	8007e28 <_dtoa_r+0x238>
 8007e86:	2301      	movs	r3, #1
 8007e88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e8a:	e7f5      	b.n	8007e78 <_dtoa_r+0x288>
 8007e8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	9307      	str	r3, [sp, #28]
 8007e92:	e7d7      	b.n	8007e44 <_dtoa_r+0x254>
 8007e94:	3101      	adds	r1, #1
 8007e96:	0052      	lsls	r2, r2, #1
 8007e98:	e7d8      	b.n	8007e4c <_dtoa_r+0x25c>
 8007e9a:	bf00      	nop
 8007e9c:	f3af 8000 	nop.w
 8007ea0:	636f4361 	.word	0x636f4361
 8007ea4:	3fd287a7 	.word	0x3fd287a7
 8007ea8:	8b60c8b3 	.word	0x8b60c8b3
 8007eac:	3fc68a28 	.word	0x3fc68a28
 8007eb0:	509f79fb 	.word	0x509f79fb
 8007eb4:	3fd34413 	.word	0x3fd34413
 8007eb8:	0800af36 	.word	0x0800af36
 8007ebc:	0800af4d 	.word	0x0800af4d
 8007ec0:	7ff00000 	.word	0x7ff00000
 8007ec4:	0800ada1 	.word	0x0800ada1
 8007ec8:	3ff80000 	.word	0x3ff80000
 8007ecc:	0800b0b8 	.word	0x0800b0b8
 8007ed0:	0800afa5 	.word	0x0800afa5
 8007ed4:	0800af32 	.word	0x0800af32
 8007ed8:	0800ada0 	.word	0x0800ada0
 8007edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ee0:	6018      	str	r0, [r3, #0]
 8007ee2:	9b07      	ldr	r3, [sp, #28]
 8007ee4:	2b0e      	cmp	r3, #14
 8007ee6:	f200 80a4 	bhi.w	8008032 <_dtoa_r+0x442>
 8007eea:	2c00      	cmp	r4, #0
 8007eec:	f000 80a1 	beq.w	8008032 <_dtoa_r+0x442>
 8007ef0:	2f00      	cmp	r7, #0
 8007ef2:	dd33      	ble.n	8007f5c <_dtoa_r+0x36c>
 8007ef4:	4bad      	ldr	r3, [pc, #692]	@ (80081ac <_dtoa_r+0x5bc>)
 8007ef6:	f007 020f 	and.w	r2, r7, #15
 8007efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007efe:	ed93 7b00 	vldr	d7, [r3]
 8007f02:	05f8      	lsls	r0, r7, #23
 8007f04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007f08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f0c:	d516      	bpl.n	8007f3c <_dtoa_r+0x34c>
 8007f0e:	4ba8      	ldr	r3, [pc, #672]	@ (80081b0 <_dtoa_r+0x5c0>)
 8007f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f18:	f7f8 fca8 	bl	800086c <__aeabi_ddiv>
 8007f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f20:	f004 040f 	and.w	r4, r4, #15
 8007f24:	2603      	movs	r6, #3
 8007f26:	4da2      	ldr	r5, [pc, #648]	@ (80081b0 <_dtoa_r+0x5c0>)
 8007f28:	b954      	cbnz	r4, 8007f40 <_dtoa_r+0x350>
 8007f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f32:	f7f8 fc9b 	bl	800086c <__aeabi_ddiv>
 8007f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f3a:	e028      	b.n	8007f8e <_dtoa_r+0x39e>
 8007f3c:	2602      	movs	r6, #2
 8007f3e:	e7f2      	b.n	8007f26 <_dtoa_r+0x336>
 8007f40:	07e1      	lsls	r1, r4, #31
 8007f42:	d508      	bpl.n	8007f56 <_dtoa_r+0x366>
 8007f44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f4c:	f7f8 fb64 	bl	8000618 <__aeabi_dmul>
 8007f50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f54:	3601      	adds	r6, #1
 8007f56:	1064      	asrs	r4, r4, #1
 8007f58:	3508      	adds	r5, #8
 8007f5a:	e7e5      	b.n	8007f28 <_dtoa_r+0x338>
 8007f5c:	f000 80d2 	beq.w	8008104 <_dtoa_r+0x514>
 8007f60:	427c      	negs	r4, r7
 8007f62:	4b92      	ldr	r3, [pc, #584]	@ (80081ac <_dtoa_r+0x5bc>)
 8007f64:	4d92      	ldr	r5, [pc, #584]	@ (80081b0 <_dtoa_r+0x5c0>)
 8007f66:	f004 020f 	and.w	r2, r4, #15
 8007f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f76:	f7f8 fb4f 	bl	8000618 <__aeabi_dmul>
 8007f7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f7e:	1124      	asrs	r4, r4, #4
 8007f80:	2300      	movs	r3, #0
 8007f82:	2602      	movs	r6, #2
 8007f84:	2c00      	cmp	r4, #0
 8007f86:	f040 80b2 	bne.w	80080ee <_dtoa_r+0x4fe>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1d3      	bne.n	8007f36 <_dtoa_r+0x346>
 8007f8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 80b7 	beq.w	8008108 <_dtoa_r+0x518>
 8007f9a:	4b86      	ldr	r3, [pc, #536]	@ (80081b4 <_dtoa_r+0x5c4>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	f7f8 fdab 	bl	8000afc <__aeabi_dcmplt>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	f000 80ae 	beq.w	8008108 <_dtoa_r+0x518>
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 80aa 	beq.w	8008108 <_dtoa_r+0x518>
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd37      	ble.n	800802a <_dtoa_r+0x43a>
 8007fba:	1e7b      	subs	r3, r7, #1
 8007fbc:	9304      	str	r3, [sp, #16]
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	4b7d      	ldr	r3, [pc, #500]	@ (80081b8 <_dtoa_r+0x5c8>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 fb27 	bl	8000618 <__aeabi_dmul>
 8007fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fce:	9c00      	ldr	r4, [sp, #0]
 8007fd0:	3601      	adds	r6, #1
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7f8 fab6 	bl	8000544 <__aeabi_i2d>
 8007fd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fdc:	f7f8 fb1c 	bl	8000618 <__aeabi_dmul>
 8007fe0:	4b76      	ldr	r3, [pc, #472]	@ (80081bc <_dtoa_r+0x5cc>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f7f8 f962 	bl	80002ac <__adddf3>
 8007fe8:	4605      	mov	r5, r0
 8007fea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	f040 808d 	bne.w	800810e <_dtoa_r+0x51e>
 8007ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff8:	4b71      	ldr	r3, [pc, #452]	@ (80081c0 <_dtoa_r+0x5d0>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f7f8 f954 	bl	80002a8 <__aeabi_dsub>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008008:	462a      	mov	r2, r5
 800800a:	4633      	mov	r3, r6
 800800c:	f7f8 fd94 	bl	8000b38 <__aeabi_dcmpgt>
 8008010:	2800      	cmp	r0, #0
 8008012:	f040 828b 	bne.w	800852c <_dtoa_r+0x93c>
 8008016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801a:	462a      	mov	r2, r5
 800801c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008020:	f7f8 fd6c 	bl	8000afc <__aeabi_dcmplt>
 8008024:	2800      	cmp	r0, #0
 8008026:	f040 8128 	bne.w	800827a <_dtoa_r+0x68a>
 800802a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800802e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008032:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008034:	2b00      	cmp	r3, #0
 8008036:	f2c0 815a 	blt.w	80082ee <_dtoa_r+0x6fe>
 800803a:	2f0e      	cmp	r7, #14
 800803c:	f300 8157 	bgt.w	80082ee <_dtoa_r+0x6fe>
 8008040:	4b5a      	ldr	r3, [pc, #360]	@ (80081ac <_dtoa_r+0x5bc>)
 8008042:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008046:	ed93 7b00 	vldr	d7, [r3]
 800804a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800804c:	2b00      	cmp	r3, #0
 800804e:	ed8d 7b00 	vstr	d7, [sp]
 8008052:	da03      	bge.n	800805c <_dtoa_r+0x46c>
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f340 8101 	ble.w	800825e <_dtoa_r+0x66e>
 800805c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008060:	4656      	mov	r6, sl
 8008062:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008066:	4620      	mov	r0, r4
 8008068:	4629      	mov	r1, r5
 800806a:	f7f8 fbff 	bl	800086c <__aeabi_ddiv>
 800806e:	f7f8 fd83 	bl	8000b78 <__aeabi_d2iz>
 8008072:	4680      	mov	r8, r0
 8008074:	f7f8 fa66 	bl	8000544 <__aeabi_i2d>
 8008078:	e9dd 2300 	ldrd	r2, r3, [sp]
 800807c:	f7f8 facc 	bl	8000618 <__aeabi_dmul>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4620      	mov	r0, r4
 8008086:	4629      	mov	r1, r5
 8008088:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800808c:	f7f8 f90c 	bl	80002a8 <__aeabi_dsub>
 8008090:	f806 4b01 	strb.w	r4, [r6], #1
 8008094:	9d07      	ldr	r5, [sp, #28]
 8008096:	eba6 040a 	sub.w	r4, r6, sl
 800809a:	42a5      	cmp	r5, r4
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	f040 8117 	bne.w	80082d2 <_dtoa_r+0x6e2>
 80080a4:	f7f8 f902 	bl	80002ac <__adddf3>
 80080a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080ac:	4604      	mov	r4, r0
 80080ae:	460d      	mov	r5, r1
 80080b0:	f7f8 fd42 	bl	8000b38 <__aeabi_dcmpgt>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	f040 80f9 	bne.w	80082ac <_dtoa_r+0x6bc>
 80080ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080be:	4620      	mov	r0, r4
 80080c0:	4629      	mov	r1, r5
 80080c2:	f7f8 fd11 	bl	8000ae8 <__aeabi_dcmpeq>
 80080c6:	b118      	cbz	r0, 80080d0 <_dtoa_r+0x4e0>
 80080c8:	f018 0f01 	tst.w	r8, #1
 80080cc:	f040 80ee 	bne.w	80082ac <_dtoa_r+0x6bc>
 80080d0:	4649      	mov	r1, r9
 80080d2:	4658      	mov	r0, fp
 80080d4:	f001 f994 	bl	8009400 <_Bfree>
 80080d8:	2300      	movs	r3, #0
 80080da:	7033      	strb	r3, [r6, #0]
 80080dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080de:	3701      	adds	r7, #1
 80080e0:	601f      	str	r7, [r3, #0]
 80080e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 831d 	beq.w	8008724 <_dtoa_r+0xb34>
 80080ea:	601e      	str	r6, [r3, #0]
 80080ec:	e31a      	b.n	8008724 <_dtoa_r+0xb34>
 80080ee:	07e2      	lsls	r2, r4, #31
 80080f0:	d505      	bpl.n	80080fe <_dtoa_r+0x50e>
 80080f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080f6:	f7f8 fa8f 	bl	8000618 <__aeabi_dmul>
 80080fa:	3601      	adds	r6, #1
 80080fc:	2301      	movs	r3, #1
 80080fe:	1064      	asrs	r4, r4, #1
 8008100:	3508      	adds	r5, #8
 8008102:	e73f      	b.n	8007f84 <_dtoa_r+0x394>
 8008104:	2602      	movs	r6, #2
 8008106:	e742      	b.n	8007f8e <_dtoa_r+0x39e>
 8008108:	9c07      	ldr	r4, [sp, #28]
 800810a:	9704      	str	r7, [sp, #16]
 800810c:	e761      	b.n	8007fd2 <_dtoa_r+0x3e2>
 800810e:	4b27      	ldr	r3, [pc, #156]	@ (80081ac <_dtoa_r+0x5bc>)
 8008110:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008112:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008116:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800811a:	4454      	add	r4, sl
 800811c:	2900      	cmp	r1, #0
 800811e:	d053      	beq.n	80081c8 <_dtoa_r+0x5d8>
 8008120:	4928      	ldr	r1, [pc, #160]	@ (80081c4 <_dtoa_r+0x5d4>)
 8008122:	2000      	movs	r0, #0
 8008124:	f7f8 fba2 	bl	800086c <__aeabi_ddiv>
 8008128:	4633      	mov	r3, r6
 800812a:	462a      	mov	r2, r5
 800812c:	f7f8 f8bc 	bl	80002a8 <__aeabi_dsub>
 8008130:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008134:	4656      	mov	r6, sl
 8008136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800813a:	f7f8 fd1d 	bl	8000b78 <__aeabi_d2iz>
 800813e:	4605      	mov	r5, r0
 8008140:	f7f8 fa00 	bl	8000544 <__aeabi_i2d>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800814c:	f7f8 f8ac 	bl	80002a8 <__aeabi_dsub>
 8008150:	3530      	adds	r5, #48	@ 0x30
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800815a:	f806 5b01 	strb.w	r5, [r6], #1
 800815e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008162:	f7f8 fccb 	bl	8000afc <__aeabi_dcmplt>
 8008166:	2800      	cmp	r0, #0
 8008168:	d171      	bne.n	800824e <_dtoa_r+0x65e>
 800816a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800816e:	4911      	ldr	r1, [pc, #68]	@ (80081b4 <_dtoa_r+0x5c4>)
 8008170:	2000      	movs	r0, #0
 8008172:	f7f8 f899 	bl	80002a8 <__aeabi_dsub>
 8008176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800817a:	f7f8 fcbf 	bl	8000afc <__aeabi_dcmplt>
 800817e:	2800      	cmp	r0, #0
 8008180:	f040 8095 	bne.w	80082ae <_dtoa_r+0x6be>
 8008184:	42a6      	cmp	r6, r4
 8008186:	f43f af50 	beq.w	800802a <_dtoa_r+0x43a>
 800818a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800818e:	4b0a      	ldr	r3, [pc, #40]	@ (80081b8 <_dtoa_r+0x5c8>)
 8008190:	2200      	movs	r2, #0
 8008192:	f7f8 fa41 	bl	8000618 <__aeabi_dmul>
 8008196:	4b08      	ldr	r3, [pc, #32]	@ (80081b8 <_dtoa_r+0x5c8>)
 8008198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800819c:	2200      	movs	r2, #0
 800819e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a2:	f7f8 fa39 	bl	8000618 <__aeabi_dmul>
 80081a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081aa:	e7c4      	b.n	8008136 <_dtoa_r+0x546>
 80081ac:	0800b0b8 	.word	0x0800b0b8
 80081b0:	0800b090 	.word	0x0800b090
 80081b4:	3ff00000 	.word	0x3ff00000
 80081b8:	40240000 	.word	0x40240000
 80081bc:	401c0000 	.word	0x401c0000
 80081c0:	40140000 	.word	0x40140000
 80081c4:	3fe00000 	.word	0x3fe00000
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	f7f8 fa24 	bl	8000618 <__aeabi_dmul>
 80081d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80081d6:	4656      	mov	r6, sl
 80081d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081dc:	f7f8 fccc 	bl	8000b78 <__aeabi_d2iz>
 80081e0:	4605      	mov	r5, r0
 80081e2:	f7f8 f9af 	bl	8000544 <__aeabi_i2d>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ee:	f7f8 f85b 	bl	80002a8 <__aeabi_dsub>
 80081f2:	3530      	adds	r5, #48	@ 0x30
 80081f4:	f806 5b01 	strb.w	r5, [r6], #1
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	42a6      	cmp	r6, r4
 80081fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008202:	f04f 0200 	mov.w	r2, #0
 8008206:	d124      	bne.n	8008252 <_dtoa_r+0x662>
 8008208:	4bac      	ldr	r3, [pc, #688]	@ (80084bc <_dtoa_r+0x8cc>)
 800820a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800820e:	f7f8 f84d 	bl	80002ac <__adddf3>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800821a:	f7f8 fc8d 	bl	8000b38 <__aeabi_dcmpgt>
 800821e:	2800      	cmp	r0, #0
 8008220:	d145      	bne.n	80082ae <_dtoa_r+0x6be>
 8008222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008226:	49a5      	ldr	r1, [pc, #660]	@ (80084bc <_dtoa_r+0x8cc>)
 8008228:	2000      	movs	r0, #0
 800822a:	f7f8 f83d 	bl	80002a8 <__aeabi_dsub>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008236:	f7f8 fc61 	bl	8000afc <__aeabi_dcmplt>
 800823a:	2800      	cmp	r0, #0
 800823c:	f43f aef5 	beq.w	800802a <_dtoa_r+0x43a>
 8008240:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008242:	1e73      	subs	r3, r6, #1
 8008244:	9315      	str	r3, [sp, #84]	@ 0x54
 8008246:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800824a:	2b30      	cmp	r3, #48	@ 0x30
 800824c:	d0f8      	beq.n	8008240 <_dtoa_r+0x650>
 800824e:	9f04      	ldr	r7, [sp, #16]
 8008250:	e73e      	b.n	80080d0 <_dtoa_r+0x4e0>
 8008252:	4b9b      	ldr	r3, [pc, #620]	@ (80084c0 <_dtoa_r+0x8d0>)
 8008254:	f7f8 f9e0 	bl	8000618 <__aeabi_dmul>
 8008258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800825c:	e7bc      	b.n	80081d8 <_dtoa_r+0x5e8>
 800825e:	d10c      	bne.n	800827a <_dtoa_r+0x68a>
 8008260:	4b98      	ldr	r3, [pc, #608]	@ (80084c4 <_dtoa_r+0x8d4>)
 8008262:	2200      	movs	r2, #0
 8008264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008268:	f7f8 f9d6 	bl	8000618 <__aeabi_dmul>
 800826c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008270:	f7f8 fc58 	bl	8000b24 <__aeabi_dcmpge>
 8008274:	2800      	cmp	r0, #0
 8008276:	f000 8157 	beq.w	8008528 <_dtoa_r+0x938>
 800827a:	2400      	movs	r4, #0
 800827c:	4625      	mov	r5, r4
 800827e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008280:	43db      	mvns	r3, r3
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	4656      	mov	r6, sl
 8008286:	2700      	movs	r7, #0
 8008288:	4621      	mov	r1, r4
 800828a:	4658      	mov	r0, fp
 800828c:	f001 f8b8 	bl	8009400 <_Bfree>
 8008290:	2d00      	cmp	r5, #0
 8008292:	d0dc      	beq.n	800824e <_dtoa_r+0x65e>
 8008294:	b12f      	cbz	r7, 80082a2 <_dtoa_r+0x6b2>
 8008296:	42af      	cmp	r7, r5
 8008298:	d003      	beq.n	80082a2 <_dtoa_r+0x6b2>
 800829a:	4639      	mov	r1, r7
 800829c:	4658      	mov	r0, fp
 800829e:	f001 f8af 	bl	8009400 <_Bfree>
 80082a2:	4629      	mov	r1, r5
 80082a4:	4658      	mov	r0, fp
 80082a6:	f001 f8ab 	bl	8009400 <_Bfree>
 80082aa:	e7d0      	b.n	800824e <_dtoa_r+0x65e>
 80082ac:	9704      	str	r7, [sp, #16]
 80082ae:	4633      	mov	r3, r6
 80082b0:	461e      	mov	r6, r3
 80082b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082b6:	2a39      	cmp	r2, #57	@ 0x39
 80082b8:	d107      	bne.n	80082ca <_dtoa_r+0x6da>
 80082ba:	459a      	cmp	sl, r3
 80082bc:	d1f8      	bne.n	80082b0 <_dtoa_r+0x6c0>
 80082be:	9a04      	ldr	r2, [sp, #16]
 80082c0:	3201      	adds	r2, #1
 80082c2:	9204      	str	r2, [sp, #16]
 80082c4:	2230      	movs	r2, #48	@ 0x30
 80082c6:	f88a 2000 	strb.w	r2, [sl]
 80082ca:	781a      	ldrb	r2, [r3, #0]
 80082cc:	3201      	adds	r2, #1
 80082ce:	701a      	strb	r2, [r3, #0]
 80082d0:	e7bd      	b.n	800824e <_dtoa_r+0x65e>
 80082d2:	4b7b      	ldr	r3, [pc, #492]	@ (80084c0 <_dtoa_r+0x8d0>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	f7f8 f99f 	bl	8000618 <__aeabi_dmul>
 80082da:	2200      	movs	r2, #0
 80082dc:	2300      	movs	r3, #0
 80082de:	4604      	mov	r4, r0
 80082e0:	460d      	mov	r5, r1
 80082e2:	f7f8 fc01 	bl	8000ae8 <__aeabi_dcmpeq>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f43f aebb 	beq.w	8008062 <_dtoa_r+0x472>
 80082ec:	e6f0      	b.n	80080d0 <_dtoa_r+0x4e0>
 80082ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	f000 80db 	beq.w	80084ac <_dtoa_r+0x8bc>
 80082f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082f8:	2a01      	cmp	r2, #1
 80082fa:	f300 80bf 	bgt.w	800847c <_dtoa_r+0x88c>
 80082fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008300:	2a00      	cmp	r2, #0
 8008302:	f000 80b7 	beq.w	8008474 <_dtoa_r+0x884>
 8008306:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800830a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800830c:	4646      	mov	r6, r8
 800830e:	9a08      	ldr	r2, [sp, #32]
 8008310:	2101      	movs	r1, #1
 8008312:	441a      	add	r2, r3
 8008314:	4658      	mov	r0, fp
 8008316:	4498      	add	r8, r3
 8008318:	9208      	str	r2, [sp, #32]
 800831a:	f001 f96f 	bl	80095fc <__i2b>
 800831e:	4605      	mov	r5, r0
 8008320:	b15e      	cbz	r6, 800833a <_dtoa_r+0x74a>
 8008322:	9b08      	ldr	r3, [sp, #32]
 8008324:	2b00      	cmp	r3, #0
 8008326:	dd08      	ble.n	800833a <_dtoa_r+0x74a>
 8008328:	42b3      	cmp	r3, r6
 800832a:	9a08      	ldr	r2, [sp, #32]
 800832c:	bfa8      	it	ge
 800832e:	4633      	movge	r3, r6
 8008330:	eba8 0803 	sub.w	r8, r8, r3
 8008334:	1af6      	subs	r6, r6, r3
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	9308      	str	r3, [sp, #32]
 800833a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800833c:	b1f3      	cbz	r3, 800837c <_dtoa_r+0x78c>
 800833e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 80b7 	beq.w	80084b4 <_dtoa_r+0x8c4>
 8008346:	b18c      	cbz	r4, 800836c <_dtoa_r+0x77c>
 8008348:	4629      	mov	r1, r5
 800834a:	4622      	mov	r2, r4
 800834c:	4658      	mov	r0, fp
 800834e:	f001 fa15 	bl	800977c <__pow5mult>
 8008352:	464a      	mov	r2, r9
 8008354:	4601      	mov	r1, r0
 8008356:	4605      	mov	r5, r0
 8008358:	4658      	mov	r0, fp
 800835a:	f001 f965 	bl	8009628 <__multiply>
 800835e:	4649      	mov	r1, r9
 8008360:	9004      	str	r0, [sp, #16]
 8008362:	4658      	mov	r0, fp
 8008364:	f001 f84c 	bl	8009400 <_Bfree>
 8008368:	9b04      	ldr	r3, [sp, #16]
 800836a:	4699      	mov	r9, r3
 800836c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800836e:	1b1a      	subs	r2, r3, r4
 8008370:	d004      	beq.n	800837c <_dtoa_r+0x78c>
 8008372:	4649      	mov	r1, r9
 8008374:	4658      	mov	r0, fp
 8008376:	f001 fa01 	bl	800977c <__pow5mult>
 800837a:	4681      	mov	r9, r0
 800837c:	2101      	movs	r1, #1
 800837e:	4658      	mov	r0, fp
 8008380:	f001 f93c 	bl	80095fc <__i2b>
 8008384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008386:	4604      	mov	r4, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 81cf 	beq.w	800872c <_dtoa_r+0xb3c>
 800838e:	461a      	mov	r2, r3
 8008390:	4601      	mov	r1, r0
 8008392:	4658      	mov	r0, fp
 8008394:	f001 f9f2 	bl	800977c <__pow5mult>
 8008398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800839a:	2b01      	cmp	r3, #1
 800839c:	4604      	mov	r4, r0
 800839e:	f300 8095 	bgt.w	80084cc <_dtoa_r+0x8dc>
 80083a2:	9b02      	ldr	r3, [sp, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f040 8087 	bne.w	80084b8 <_dtoa_r+0x8c8>
 80083aa:	9b03      	ldr	r3, [sp, #12]
 80083ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f040 8089 	bne.w	80084c8 <_dtoa_r+0x8d8>
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083bc:	0d1b      	lsrs	r3, r3, #20
 80083be:	051b      	lsls	r3, r3, #20
 80083c0:	b12b      	cbz	r3, 80083ce <_dtoa_r+0x7de>
 80083c2:	9b08      	ldr	r3, [sp, #32]
 80083c4:	3301      	adds	r3, #1
 80083c6:	9308      	str	r3, [sp, #32]
 80083c8:	f108 0801 	add.w	r8, r8, #1
 80083cc:	2301      	movs	r3, #1
 80083ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 81b0 	beq.w	8008738 <_dtoa_r+0xb48>
 80083d8:	6923      	ldr	r3, [r4, #16]
 80083da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083de:	6918      	ldr	r0, [r3, #16]
 80083e0:	f001 f8c0 	bl	8009564 <__hi0bits>
 80083e4:	f1c0 0020 	rsb	r0, r0, #32
 80083e8:	9b08      	ldr	r3, [sp, #32]
 80083ea:	4418      	add	r0, r3
 80083ec:	f010 001f 	ands.w	r0, r0, #31
 80083f0:	d077      	beq.n	80084e2 <_dtoa_r+0x8f2>
 80083f2:	f1c0 0320 	rsb	r3, r0, #32
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	dd6b      	ble.n	80084d2 <_dtoa_r+0x8e2>
 80083fa:	9b08      	ldr	r3, [sp, #32]
 80083fc:	f1c0 001c 	rsb	r0, r0, #28
 8008400:	4403      	add	r3, r0
 8008402:	4480      	add	r8, r0
 8008404:	4406      	add	r6, r0
 8008406:	9308      	str	r3, [sp, #32]
 8008408:	f1b8 0f00 	cmp.w	r8, #0
 800840c:	dd05      	ble.n	800841a <_dtoa_r+0x82a>
 800840e:	4649      	mov	r1, r9
 8008410:	4642      	mov	r2, r8
 8008412:	4658      	mov	r0, fp
 8008414:	f001 fa0c 	bl	8009830 <__lshift>
 8008418:	4681      	mov	r9, r0
 800841a:	9b08      	ldr	r3, [sp, #32]
 800841c:	2b00      	cmp	r3, #0
 800841e:	dd05      	ble.n	800842c <_dtoa_r+0x83c>
 8008420:	4621      	mov	r1, r4
 8008422:	461a      	mov	r2, r3
 8008424:	4658      	mov	r0, fp
 8008426:	f001 fa03 	bl	8009830 <__lshift>
 800842a:	4604      	mov	r4, r0
 800842c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800842e:	2b00      	cmp	r3, #0
 8008430:	d059      	beq.n	80084e6 <_dtoa_r+0x8f6>
 8008432:	4621      	mov	r1, r4
 8008434:	4648      	mov	r0, r9
 8008436:	f001 fa67 	bl	8009908 <__mcmp>
 800843a:	2800      	cmp	r0, #0
 800843c:	da53      	bge.n	80084e6 <_dtoa_r+0x8f6>
 800843e:	1e7b      	subs	r3, r7, #1
 8008440:	9304      	str	r3, [sp, #16]
 8008442:	4649      	mov	r1, r9
 8008444:	2300      	movs	r3, #0
 8008446:	220a      	movs	r2, #10
 8008448:	4658      	mov	r0, fp
 800844a:	f000 fffb 	bl	8009444 <__multadd>
 800844e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008450:	4681      	mov	r9, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 8172 	beq.w	800873c <_dtoa_r+0xb4c>
 8008458:	2300      	movs	r3, #0
 800845a:	4629      	mov	r1, r5
 800845c:	220a      	movs	r2, #10
 800845e:	4658      	mov	r0, fp
 8008460:	f000 fff0 	bl	8009444 <__multadd>
 8008464:	9b00      	ldr	r3, [sp, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	4605      	mov	r5, r0
 800846a:	dc67      	bgt.n	800853c <_dtoa_r+0x94c>
 800846c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800846e:	2b02      	cmp	r3, #2
 8008470:	dc41      	bgt.n	80084f6 <_dtoa_r+0x906>
 8008472:	e063      	b.n	800853c <_dtoa_r+0x94c>
 8008474:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008476:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800847a:	e746      	b.n	800830a <_dtoa_r+0x71a>
 800847c:	9b07      	ldr	r3, [sp, #28]
 800847e:	1e5c      	subs	r4, r3, #1
 8008480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008482:	42a3      	cmp	r3, r4
 8008484:	bfbf      	itttt	lt
 8008486:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008488:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800848a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800848c:	1ae3      	sublt	r3, r4, r3
 800848e:	bfb4      	ite	lt
 8008490:	18d2      	addlt	r2, r2, r3
 8008492:	1b1c      	subge	r4, r3, r4
 8008494:	9b07      	ldr	r3, [sp, #28]
 8008496:	bfbc      	itt	lt
 8008498:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800849a:	2400      	movlt	r4, #0
 800849c:	2b00      	cmp	r3, #0
 800849e:	bfb5      	itete	lt
 80084a0:	eba8 0603 	sublt.w	r6, r8, r3
 80084a4:	9b07      	ldrge	r3, [sp, #28]
 80084a6:	2300      	movlt	r3, #0
 80084a8:	4646      	movge	r6, r8
 80084aa:	e730      	b.n	800830e <_dtoa_r+0x71e>
 80084ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80084b0:	4646      	mov	r6, r8
 80084b2:	e735      	b.n	8008320 <_dtoa_r+0x730>
 80084b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084b6:	e75c      	b.n	8008372 <_dtoa_r+0x782>
 80084b8:	2300      	movs	r3, #0
 80084ba:	e788      	b.n	80083ce <_dtoa_r+0x7de>
 80084bc:	3fe00000 	.word	0x3fe00000
 80084c0:	40240000 	.word	0x40240000
 80084c4:	40140000 	.word	0x40140000
 80084c8:	9b02      	ldr	r3, [sp, #8]
 80084ca:	e780      	b.n	80083ce <_dtoa_r+0x7de>
 80084cc:	2300      	movs	r3, #0
 80084ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80084d0:	e782      	b.n	80083d8 <_dtoa_r+0x7e8>
 80084d2:	d099      	beq.n	8008408 <_dtoa_r+0x818>
 80084d4:	9a08      	ldr	r2, [sp, #32]
 80084d6:	331c      	adds	r3, #28
 80084d8:	441a      	add	r2, r3
 80084da:	4498      	add	r8, r3
 80084dc:	441e      	add	r6, r3
 80084de:	9208      	str	r2, [sp, #32]
 80084e0:	e792      	b.n	8008408 <_dtoa_r+0x818>
 80084e2:	4603      	mov	r3, r0
 80084e4:	e7f6      	b.n	80084d4 <_dtoa_r+0x8e4>
 80084e6:	9b07      	ldr	r3, [sp, #28]
 80084e8:	9704      	str	r7, [sp, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dc20      	bgt.n	8008530 <_dtoa_r+0x940>
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	dd1e      	ble.n	8008534 <_dtoa_r+0x944>
 80084f6:	9b00      	ldr	r3, [sp, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f47f aec0 	bne.w	800827e <_dtoa_r+0x68e>
 80084fe:	4621      	mov	r1, r4
 8008500:	2205      	movs	r2, #5
 8008502:	4658      	mov	r0, fp
 8008504:	f000 ff9e 	bl	8009444 <__multadd>
 8008508:	4601      	mov	r1, r0
 800850a:	4604      	mov	r4, r0
 800850c:	4648      	mov	r0, r9
 800850e:	f001 f9fb 	bl	8009908 <__mcmp>
 8008512:	2800      	cmp	r0, #0
 8008514:	f77f aeb3 	ble.w	800827e <_dtoa_r+0x68e>
 8008518:	4656      	mov	r6, sl
 800851a:	2331      	movs	r3, #49	@ 0x31
 800851c:	f806 3b01 	strb.w	r3, [r6], #1
 8008520:	9b04      	ldr	r3, [sp, #16]
 8008522:	3301      	adds	r3, #1
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	e6ae      	b.n	8008286 <_dtoa_r+0x696>
 8008528:	9c07      	ldr	r4, [sp, #28]
 800852a:	9704      	str	r7, [sp, #16]
 800852c:	4625      	mov	r5, r4
 800852e:	e7f3      	b.n	8008518 <_dtoa_r+0x928>
 8008530:	9b07      	ldr	r3, [sp, #28]
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 8104 	beq.w	8008744 <_dtoa_r+0xb54>
 800853c:	2e00      	cmp	r6, #0
 800853e:	dd05      	ble.n	800854c <_dtoa_r+0x95c>
 8008540:	4629      	mov	r1, r5
 8008542:	4632      	mov	r2, r6
 8008544:	4658      	mov	r0, fp
 8008546:	f001 f973 	bl	8009830 <__lshift>
 800854a:	4605      	mov	r5, r0
 800854c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800854e:	2b00      	cmp	r3, #0
 8008550:	d05a      	beq.n	8008608 <_dtoa_r+0xa18>
 8008552:	6869      	ldr	r1, [r5, #4]
 8008554:	4658      	mov	r0, fp
 8008556:	f000 ff13 	bl	8009380 <_Balloc>
 800855a:	4606      	mov	r6, r0
 800855c:	b928      	cbnz	r0, 800856a <_dtoa_r+0x97a>
 800855e:	4b84      	ldr	r3, [pc, #528]	@ (8008770 <_dtoa_r+0xb80>)
 8008560:	4602      	mov	r2, r0
 8008562:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008566:	f7ff bb5a 	b.w	8007c1e <_dtoa_r+0x2e>
 800856a:	692a      	ldr	r2, [r5, #16]
 800856c:	3202      	adds	r2, #2
 800856e:	0092      	lsls	r2, r2, #2
 8008570:	f105 010c 	add.w	r1, r5, #12
 8008574:	300c      	adds	r0, #12
 8008576:	f7ff fa92 	bl	8007a9e <memcpy>
 800857a:	2201      	movs	r2, #1
 800857c:	4631      	mov	r1, r6
 800857e:	4658      	mov	r0, fp
 8008580:	f001 f956 	bl	8009830 <__lshift>
 8008584:	f10a 0301 	add.w	r3, sl, #1
 8008588:	9307      	str	r3, [sp, #28]
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	4453      	add	r3, sl
 800858e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008590:	9b02      	ldr	r3, [sp, #8]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	462f      	mov	r7, r5
 8008598:	930a      	str	r3, [sp, #40]	@ 0x28
 800859a:	4605      	mov	r5, r0
 800859c:	9b07      	ldr	r3, [sp, #28]
 800859e:	4621      	mov	r1, r4
 80085a0:	3b01      	subs	r3, #1
 80085a2:	4648      	mov	r0, r9
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	f7ff fa99 	bl	8007adc <quorem>
 80085aa:	4639      	mov	r1, r7
 80085ac:	9002      	str	r0, [sp, #8]
 80085ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80085b2:	4648      	mov	r0, r9
 80085b4:	f001 f9a8 	bl	8009908 <__mcmp>
 80085b8:	462a      	mov	r2, r5
 80085ba:	9008      	str	r0, [sp, #32]
 80085bc:	4621      	mov	r1, r4
 80085be:	4658      	mov	r0, fp
 80085c0:	f001 f9be 	bl	8009940 <__mdiff>
 80085c4:	68c2      	ldr	r2, [r0, #12]
 80085c6:	4606      	mov	r6, r0
 80085c8:	bb02      	cbnz	r2, 800860c <_dtoa_r+0xa1c>
 80085ca:	4601      	mov	r1, r0
 80085cc:	4648      	mov	r0, r9
 80085ce:	f001 f99b 	bl	8009908 <__mcmp>
 80085d2:	4602      	mov	r2, r0
 80085d4:	4631      	mov	r1, r6
 80085d6:	4658      	mov	r0, fp
 80085d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80085da:	f000 ff11 	bl	8009400 <_Bfree>
 80085de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085e2:	9e07      	ldr	r6, [sp, #28]
 80085e4:	ea43 0102 	orr.w	r1, r3, r2
 80085e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085ea:	4319      	orrs	r1, r3
 80085ec:	d110      	bne.n	8008610 <_dtoa_r+0xa20>
 80085ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085f2:	d029      	beq.n	8008648 <_dtoa_r+0xa58>
 80085f4:	9b08      	ldr	r3, [sp, #32]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dd02      	ble.n	8008600 <_dtoa_r+0xa10>
 80085fa:	9b02      	ldr	r3, [sp, #8]
 80085fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008600:	9b00      	ldr	r3, [sp, #0]
 8008602:	f883 8000 	strb.w	r8, [r3]
 8008606:	e63f      	b.n	8008288 <_dtoa_r+0x698>
 8008608:	4628      	mov	r0, r5
 800860a:	e7bb      	b.n	8008584 <_dtoa_r+0x994>
 800860c:	2201      	movs	r2, #1
 800860e:	e7e1      	b.n	80085d4 <_dtoa_r+0x9e4>
 8008610:	9b08      	ldr	r3, [sp, #32]
 8008612:	2b00      	cmp	r3, #0
 8008614:	db04      	blt.n	8008620 <_dtoa_r+0xa30>
 8008616:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008618:	430b      	orrs	r3, r1
 800861a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800861c:	430b      	orrs	r3, r1
 800861e:	d120      	bne.n	8008662 <_dtoa_r+0xa72>
 8008620:	2a00      	cmp	r2, #0
 8008622:	dded      	ble.n	8008600 <_dtoa_r+0xa10>
 8008624:	4649      	mov	r1, r9
 8008626:	2201      	movs	r2, #1
 8008628:	4658      	mov	r0, fp
 800862a:	f001 f901 	bl	8009830 <__lshift>
 800862e:	4621      	mov	r1, r4
 8008630:	4681      	mov	r9, r0
 8008632:	f001 f969 	bl	8009908 <__mcmp>
 8008636:	2800      	cmp	r0, #0
 8008638:	dc03      	bgt.n	8008642 <_dtoa_r+0xa52>
 800863a:	d1e1      	bne.n	8008600 <_dtoa_r+0xa10>
 800863c:	f018 0f01 	tst.w	r8, #1
 8008640:	d0de      	beq.n	8008600 <_dtoa_r+0xa10>
 8008642:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008646:	d1d8      	bne.n	80085fa <_dtoa_r+0xa0a>
 8008648:	9a00      	ldr	r2, [sp, #0]
 800864a:	2339      	movs	r3, #57	@ 0x39
 800864c:	7013      	strb	r3, [r2, #0]
 800864e:	4633      	mov	r3, r6
 8008650:	461e      	mov	r6, r3
 8008652:	3b01      	subs	r3, #1
 8008654:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008658:	2a39      	cmp	r2, #57	@ 0x39
 800865a:	d052      	beq.n	8008702 <_dtoa_r+0xb12>
 800865c:	3201      	adds	r2, #1
 800865e:	701a      	strb	r2, [r3, #0]
 8008660:	e612      	b.n	8008288 <_dtoa_r+0x698>
 8008662:	2a00      	cmp	r2, #0
 8008664:	dd07      	ble.n	8008676 <_dtoa_r+0xa86>
 8008666:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800866a:	d0ed      	beq.n	8008648 <_dtoa_r+0xa58>
 800866c:	9a00      	ldr	r2, [sp, #0]
 800866e:	f108 0301 	add.w	r3, r8, #1
 8008672:	7013      	strb	r3, [r2, #0]
 8008674:	e608      	b.n	8008288 <_dtoa_r+0x698>
 8008676:	9b07      	ldr	r3, [sp, #28]
 8008678:	9a07      	ldr	r2, [sp, #28]
 800867a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800867e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008680:	4293      	cmp	r3, r2
 8008682:	d028      	beq.n	80086d6 <_dtoa_r+0xae6>
 8008684:	4649      	mov	r1, r9
 8008686:	2300      	movs	r3, #0
 8008688:	220a      	movs	r2, #10
 800868a:	4658      	mov	r0, fp
 800868c:	f000 feda 	bl	8009444 <__multadd>
 8008690:	42af      	cmp	r7, r5
 8008692:	4681      	mov	r9, r0
 8008694:	f04f 0300 	mov.w	r3, #0
 8008698:	f04f 020a 	mov.w	r2, #10
 800869c:	4639      	mov	r1, r7
 800869e:	4658      	mov	r0, fp
 80086a0:	d107      	bne.n	80086b2 <_dtoa_r+0xac2>
 80086a2:	f000 fecf 	bl	8009444 <__multadd>
 80086a6:	4607      	mov	r7, r0
 80086a8:	4605      	mov	r5, r0
 80086aa:	9b07      	ldr	r3, [sp, #28]
 80086ac:	3301      	adds	r3, #1
 80086ae:	9307      	str	r3, [sp, #28]
 80086b0:	e774      	b.n	800859c <_dtoa_r+0x9ac>
 80086b2:	f000 fec7 	bl	8009444 <__multadd>
 80086b6:	4629      	mov	r1, r5
 80086b8:	4607      	mov	r7, r0
 80086ba:	2300      	movs	r3, #0
 80086bc:	220a      	movs	r2, #10
 80086be:	4658      	mov	r0, fp
 80086c0:	f000 fec0 	bl	8009444 <__multadd>
 80086c4:	4605      	mov	r5, r0
 80086c6:	e7f0      	b.n	80086aa <_dtoa_r+0xaba>
 80086c8:	9b00      	ldr	r3, [sp, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bfcc      	ite	gt
 80086ce:	461e      	movgt	r6, r3
 80086d0:	2601      	movle	r6, #1
 80086d2:	4456      	add	r6, sl
 80086d4:	2700      	movs	r7, #0
 80086d6:	4649      	mov	r1, r9
 80086d8:	2201      	movs	r2, #1
 80086da:	4658      	mov	r0, fp
 80086dc:	f001 f8a8 	bl	8009830 <__lshift>
 80086e0:	4621      	mov	r1, r4
 80086e2:	4681      	mov	r9, r0
 80086e4:	f001 f910 	bl	8009908 <__mcmp>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	dcb0      	bgt.n	800864e <_dtoa_r+0xa5e>
 80086ec:	d102      	bne.n	80086f4 <_dtoa_r+0xb04>
 80086ee:	f018 0f01 	tst.w	r8, #1
 80086f2:	d1ac      	bne.n	800864e <_dtoa_r+0xa5e>
 80086f4:	4633      	mov	r3, r6
 80086f6:	461e      	mov	r6, r3
 80086f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086fc:	2a30      	cmp	r2, #48	@ 0x30
 80086fe:	d0fa      	beq.n	80086f6 <_dtoa_r+0xb06>
 8008700:	e5c2      	b.n	8008288 <_dtoa_r+0x698>
 8008702:	459a      	cmp	sl, r3
 8008704:	d1a4      	bne.n	8008650 <_dtoa_r+0xa60>
 8008706:	9b04      	ldr	r3, [sp, #16]
 8008708:	3301      	adds	r3, #1
 800870a:	9304      	str	r3, [sp, #16]
 800870c:	2331      	movs	r3, #49	@ 0x31
 800870e:	f88a 3000 	strb.w	r3, [sl]
 8008712:	e5b9      	b.n	8008288 <_dtoa_r+0x698>
 8008714:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008716:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008774 <_dtoa_r+0xb84>
 800871a:	b11b      	cbz	r3, 8008724 <_dtoa_r+0xb34>
 800871c:	f10a 0308 	add.w	r3, sl, #8
 8008720:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	4650      	mov	r0, sl
 8008726:	b019      	add	sp, #100	@ 0x64
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872e:	2b01      	cmp	r3, #1
 8008730:	f77f ae37 	ble.w	80083a2 <_dtoa_r+0x7b2>
 8008734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008736:	930a      	str	r3, [sp, #40]	@ 0x28
 8008738:	2001      	movs	r0, #1
 800873a:	e655      	b.n	80083e8 <_dtoa_r+0x7f8>
 800873c:	9b00      	ldr	r3, [sp, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f77f aed6 	ble.w	80084f0 <_dtoa_r+0x900>
 8008744:	4656      	mov	r6, sl
 8008746:	4621      	mov	r1, r4
 8008748:	4648      	mov	r0, r9
 800874a:	f7ff f9c7 	bl	8007adc <quorem>
 800874e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008752:	f806 8b01 	strb.w	r8, [r6], #1
 8008756:	9b00      	ldr	r3, [sp, #0]
 8008758:	eba6 020a 	sub.w	r2, r6, sl
 800875c:	4293      	cmp	r3, r2
 800875e:	ddb3      	ble.n	80086c8 <_dtoa_r+0xad8>
 8008760:	4649      	mov	r1, r9
 8008762:	2300      	movs	r3, #0
 8008764:	220a      	movs	r2, #10
 8008766:	4658      	mov	r0, fp
 8008768:	f000 fe6c 	bl	8009444 <__multadd>
 800876c:	4681      	mov	r9, r0
 800876e:	e7ea      	b.n	8008746 <_dtoa_r+0xb56>
 8008770:	0800afa5 	.word	0x0800afa5
 8008774:	0800af29 	.word	0x0800af29

08008778 <rshift>:
 8008778:	6903      	ldr	r3, [r0, #16]
 800877a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800877e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008782:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008786:	f100 0414 	add.w	r4, r0, #20
 800878a:	dd45      	ble.n	8008818 <rshift+0xa0>
 800878c:	f011 011f 	ands.w	r1, r1, #31
 8008790:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008794:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008798:	d10c      	bne.n	80087b4 <rshift+0x3c>
 800879a:	f100 0710 	add.w	r7, r0, #16
 800879e:	4629      	mov	r1, r5
 80087a0:	42b1      	cmp	r1, r6
 80087a2:	d334      	bcc.n	800880e <rshift+0x96>
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	1eea      	subs	r2, r5, #3
 80087aa:	4296      	cmp	r6, r2
 80087ac:	bf38      	it	cc
 80087ae:	2300      	movcc	r3, #0
 80087b0:	4423      	add	r3, r4
 80087b2:	e015      	b.n	80087e0 <rshift+0x68>
 80087b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087b8:	f1c1 0820 	rsb	r8, r1, #32
 80087bc:	40cf      	lsrs	r7, r1
 80087be:	f105 0e04 	add.w	lr, r5, #4
 80087c2:	46a1      	mov	r9, r4
 80087c4:	4576      	cmp	r6, lr
 80087c6:	46f4      	mov	ip, lr
 80087c8:	d815      	bhi.n	80087f6 <rshift+0x7e>
 80087ca:	1a9a      	subs	r2, r3, r2
 80087cc:	0092      	lsls	r2, r2, #2
 80087ce:	3a04      	subs	r2, #4
 80087d0:	3501      	adds	r5, #1
 80087d2:	42ae      	cmp	r6, r5
 80087d4:	bf38      	it	cc
 80087d6:	2200      	movcc	r2, #0
 80087d8:	18a3      	adds	r3, r4, r2
 80087da:	50a7      	str	r7, [r4, r2]
 80087dc:	b107      	cbz	r7, 80087e0 <rshift+0x68>
 80087de:	3304      	adds	r3, #4
 80087e0:	1b1a      	subs	r2, r3, r4
 80087e2:	42a3      	cmp	r3, r4
 80087e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80087e8:	bf08      	it	eq
 80087ea:	2300      	moveq	r3, #0
 80087ec:	6102      	str	r2, [r0, #16]
 80087ee:	bf08      	it	eq
 80087f0:	6143      	streq	r3, [r0, #20]
 80087f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087f6:	f8dc c000 	ldr.w	ip, [ip]
 80087fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80087fe:	ea4c 0707 	orr.w	r7, ip, r7
 8008802:	f849 7b04 	str.w	r7, [r9], #4
 8008806:	f85e 7b04 	ldr.w	r7, [lr], #4
 800880a:	40cf      	lsrs	r7, r1
 800880c:	e7da      	b.n	80087c4 <rshift+0x4c>
 800880e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008812:	f847 cf04 	str.w	ip, [r7, #4]!
 8008816:	e7c3      	b.n	80087a0 <rshift+0x28>
 8008818:	4623      	mov	r3, r4
 800881a:	e7e1      	b.n	80087e0 <rshift+0x68>

0800881c <__hexdig_fun>:
 800881c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008820:	2b09      	cmp	r3, #9
 8008822:	d802      	bhi.n	800882a <__hexdig_fun+0xe>
 8008824:	3820      	subs	r0, #32
 8008826:	b2c0      	uxtb	r0, r0
 8008828:	4770      	bx	lr
 800882a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800882e:	2b05      	cmp	r3, #5
 8008830:	d801      	bhi.n	8008836 <__hexdig_fun+0x1a>
 8008832:	3847      	subs	r0, #71	@ 0x47
 8008834:	e7f7      	b.n	8008826 <__hexdig_fun+0xa>
 8008836:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800883a:	2b05      	cmp	r3, #5
 800883c:	d801      	bhi.n	8008842 <__hexdig_fun+0x26>
 800883e:	3827      	subs	r0, #39	@ 0x27
 8008840:	e7f1      	b.n	8008826 <__hexdig_fun+0xa>
 8008842:	2000      	movs	r0, #0
 8008844:	4770      	bx	lr
	...

08008848 <__gethex>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	b085      	sub	sp, #20
 800884e:	468a      	mov	sl, r1
 8008850:	9302      	str	r3, [sp, #8]
 8008852:	680b      	ldr	r3, [r1, #0]
 8008854:	9001      	str	r0, [sp, #4]
 8008856:	4690      	mov	r8, r2
 8008858:	1c9c      	adds	r4, r3, #2
 800885a:	46a1      	mov	r9, r4
 800885c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008860:	2830      	cmp	r0, #48	@ 0x30
 8008862:	d0fa      	beq.n	800885a <__gethex+0x12>
 8008864:	eba9 0303 	sub.w	r3, r9, r3
 8008868:	f1a3 0b02 	sub.w	fp, r3, #2
 800886c:	f7ff ffd6 	bl	800881c <__hexdig_fun>
 8008870:	4605      	mov	r5, r0
 8008872:	2800      	cmp	r0, #0
 8008874:	d168      	bne.n	8008948 <__gethex+0x100>
 8008876:	49a0      	ldr	r1, [pc, #640]	@ (8008af8 <__gethex+0x2b0>)
 8008878:	2201      	movs	r2, #1
 800887a:	4648      	mov	r0, r9
 800887c:	f7ff f8c4 	bl	8007a08 <strncmp>
 8008880:	4607      	mov	r7, r0
 8008882:	2800      	cmp	r0, #0
 8008884:	d167      	bne.n	8008956 <__gethex+0x10e>
 8008886:	f899 0001 	ldrb.w	r0, [r9, #1]
 800888a:	4626      	mov	r6, r4
 800888c:	f7ff ffc6 	bl	800881c <__hexdig_fun>
 8008890:	2800      	cmp	r0, #0
 8008892:	d062      	beq.n	800895a <__gethex+0x112>
 8008894:	4623      	mov	r3, r4
 8008896:	7818      	ldrb	r0, [r3, #0]
 8008898:	2830      	cmp	r0, #48	@ 0x30
 800889a:	4699      	mov	r9, r3
 800889c:	f103 0301 	add.w	r3, r3, #1
 80088a0:	d0f9      	beq.n	8008896 <__gethex+0x4e>
 80088a2:	f7ff ffbb 	bl	800881c <__hexdig_fun>
 80088a6:	fab0 f580 	clz	r5, r0
 80088aa:	096d      	lsrs	r5, r5, #5
 80088ac:	f04f 0b01 	mov.w	fp, #1
 80088b0:	464a      	mov	r2, r9
 80088b2:	4616      	mov	r6, r2
 80088b4:	3201      	adds	r2, #1
 80088b6:	7830      	ldrb	r0, [r6, #0]
 80088b8:	f7ff ffb0 	bl	800881c <__hexdig_fun>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d1f8      	bne.n	80088b2 <__gethex+0x6a>
 80088c0:	498d      	ldr	r1, [pc, #564]	@ (8008af8 <__gethex+0x2b0>)
 80088c2:	2201      	movs	r2, #1
 80088c4:	4630      	mov	r0, r6
 80088c6:	f7ff f89f 	bl	8007a08 <strncmp>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d13f      	bne.n	800894e <__gethex+0x106>
 80088ce:	b944      	cbnz	r4, 80088e2 <__gethex+0x9a>
 80088d0:	1c74      	adds	r4, r6, #1
 80088d2:	4622      	mov	r2, r4
 80088d4:	4616      	mov	r6, r2
 80088d6:	3201      	adds	r2, #1
 80088d8:	7830      	ldrb	r0, [r6, #0]
 80088da:	f7ff ff9f 	bl	800881c <__hexdig_fun>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d1f8      	bne.n	80088d4 <__gethex+0x8c>
 80088e2:	1ba4      	subs	r4, r4, r6
 80088e4:	00a7      	lsls	r7, r4, #2
 80088e6:	7833      	ldrb	r3, [r6, #0]
 80088e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80088ec:	2b50      	cmp	r3, #80	@ 0x50
 80088ee:	d13e      	bne.n	800896e <__gethex+0x126>
 80088f0:	7873      	ldrb	r3, [r6, #1]
 80088f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80088f4:	d033      	beq.n	800895e <__gethex+0x116>
 80088f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80088f8:	d034      	beq.n	8008964 <__gethex+0x11c>
 80088fa:	1c71      	adds	r1, r6, #1
 80088fc:	2400      	movs	r4, #0
 80088fe:	7808      	ldrb	r0, [r1, #0]
 8008900:	f7ff ff8c 	bl	800881c <__hexdig_fun>
 8008904:	1e43      	subs	r3, r0, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b18      	cmp	r3, #24
 800890a:	d830      	bhi.n	800896e <__gethex+0x126>
 800890c:	f1a0 0210 	sub.w	r2, r0, #16
 8008910:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008914:	f7ff ff82 	bl	800881c <__hexdig_fun>
 8008918:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800891c:	fa5f fc8c 	uxtb.w	ip, ip
 8008920:	f1bc 0f18 	cmp.w	ip, #24
 8008924:	f04f 030a 	mov.w	r3, #10
 8008928:	d91e      	bls.n	8008968 <__gethex+0x120>
 800892a:	b104      	cbz	r4, 800892e <__gethex+0xe6>
 800892c:	4252      	negs	r2, r2
 800892e:	4417      	add	r7, r2
 8008930:	f8ca 1000 	str.w	r1, [sl]
 8008934:	b1ed      	cbz	r5, 8008972 <__gethex+0x12a>
 8008936:	f1bb 0f00 	cmp.w	fp, #0
 800893a:	bf0c      	ite	eq
 800893c:	2506      	moveq	r5, #6
 800893e:	2500      	movne	r5, #0
 8008940:	4628      	mov	r0, r5
 8008942:	b005      	add	sp, #20
 8008944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008948:	2500      	movs	r5, #0
 800894a:	462c      	mov	r4, r5
 800894c:	e7b0      	b.n	80088b0 <__gethex+0x68>
 800894e:	2c00      	cmp	r4, #0
 8008950:	d1c7      	bne.n	80088e2 <__gethex+0x9a>
 8008952:	4627      	mov	r7, r4
 8008954:	e7c7      	b.n	80088e6 <__gethex+0x9e>
 8008956:	464e      	mov	r6, r9
 8008958:	462f      	mov	r7, r5
 800895a:	2501      	movs	r5, #1
 800895c:	e7c3      	b.n	80088e6 <__gethex+0x9e>
 800895e:	2400      	movs	r4, #0
 8008960:	1cb1      	adds	r1, r6, #2
 8008962:	e7cc      	b.n	80088fe <__gethex+0xb6>
 8008964:	2401      	movs	r4, #1
 8008966:	e7fb      	b.n	8008960 <__gethex+0x118>
 8008968:	fb03 0002 	mla	r0, r3, r2, r0
 800896c:	e7ce      	b.n	800890c <__gethex+0xc4>
 800896e:	4631      	mov	r1, r6
 8008970:	e7de      	b.n	8008930 <__gethex+0xe8>
 8008972:	eba6 0309 	sub.w	r3, r6, r9
 8008976:	3b01      	subs	r3, #1
 8008978:	4629      	mov	r1, r5
 800897a:	2b07      	cmp	r3, #7
 800897c:	dc0a      	bgt.n	8008994 <__gethex+0x14c>
 800897e:	9801      	ldr	r0, [sp, #4]
 8008980:	f000 fcfe 	bl	8009380 <_Balloc>
 8008984:	4604      	mov	r4, r0
 8008986:	b940      	cbnz	r0, 800899a <__gethex+0x152>
 8008988:	4b5c      	ldr	r3, [pc, #368]	@ (8008afc <__gethex+0x2b4>)
 800898a:	4602      	mov	r2, r0
 800898c:	21e4      	movs	r1, #228	@ 0xe4
 800898e:	485c      	ldr	r0, [pc, #368]	@ (8008b00 <__gethex+0x2b8>)
 8008990:	f001 fa96 	bl	8009ec0 <__assert_func>
 8008994:	3101      	adds	r1, #1
 8008996:	105b      	asrs	r3, r3, #1
 8008998:	e7ef      	b.n	800897a <__gethex+0x132>
 800899a:	f100 0a14 	add.w	sl, r0, #20
 800899e:	2300      	movs	r3, #0
 80089a0:	4655      	mov	r5, sl
 80089a2:	469b      	mov	fp, r3
 80089a4:	45b1      	cmp	r9, r6
 80089a6:	d337      	bcc.n	8008a18 <__gethex+0x1d0>
 80089a8:	f845 bb04 	str.w	fp, [r5], #4
 80089ac:	eba5 050a 	sub.w	r5, r5, sl
 80089b0:	10ad      	asrs	r5, r5, #2
 80089b2:	6125      	str	r5, [r4, #16]
 80089b4:	4658      	mov	r0, fp
 80089b6:	f000 fdd5 	bl	8009564 <__hi0bits>
 80089ba:	016d      	lsls	r5, r5, #5
 80089bc:	f8d8 6000 	ldr.w	r6, [r8]
 80089c0:	1a2d      	subs	r5, r5, r0
 80089c2:	42b5      	cmp	r5, r6
 80089c4:	dd54      	ble.n	8008a70 <__gethex+0x228>
 80089c6:	1bad      	subs	r5, r5, r6
 80089c8:	4629      	mov	r1, r5
 80089ca:	4620      	mov	r0, r4
 80089cc:	f001 f969 	bl	8009ca2 <__any_on>
 80089d0:	4681      	mov	r9, r0
 80089d2:	b178      	cbz	r0, 80089f4 <__gethex+0x1ac>
 80089d4:	1e6b      	subs	r3, r5, #1
 80089d6:	1159      	asrs	r1, r3, #5
 80089d8:	f003 021f 	and.w	r2, r3, #31
 80089dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80089e0:	f04f 0901 	mov.w	r9, #1
 80089e4:	fa09 f202 	lsl.w	r2, r9, r2
 80089e8:	420a      	tst	r2, r1
 80089ea:	d003      	beq.n	80089f4 <__gethex+0x1ac>
 80089ec:	454b      	cmp	r3, r9
 80089ee:	dc36      	bgt.n	8008a5e <__gethex+0x216>
 80089f0:	f04f 0902 	mov.w	r9, #2
 80089f4:	4629      	mov	r1, r5
 80089f6:	4620      	mov	r0, r4
 80089f8:	f7ff febe 	bl	8008778 <rshift>
 80089fc:	442f      	add	r7, r5
 80089fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a02:	42bb      	cmp	r3, r7
 8008a04:	da42      	bge.n	8008a8c <__gethex+0x244>
 8008a06:	9801      	ldr	r0, [sp, #4]
 8008a08:	4621      	mov	r1, r4
 8008a0a:	f000 fcf9 	bl	8009400 <_Bfree>
 8008a0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a10:	2300      	movs	r3, #0
 8008a12:	6013      	str	r3, [r2, #0]
 8008a14:	25a3      	movs	r5, #163	@ 0xa3
 8008a16:	e793      	b.n	8008940 <__gethex+0xf8>
 8008a18:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008a1c:	2a2e      	cmp	r2, #46	@ 0x2e
 8008a1e:	d012      	beq.n	8008a46 <__gethex+0x1fe>
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	d104      	bne.n	8008a2e <__gethex+0x1e6>
 8008a24:	f845 bb04 	str.w	fp, [r5], #4
 8008a28:	f04f 0b00 	mov.w	fp, #0
 8008a2c:	465b      	mov	r3, fp
 8008a2e:	7830      	ldrb	r0, [r6, #0]
 8008a30:	9303      	str	r3, [sp, #12]
 8008a32:	f7ff fef3 	bl	800881c <__hexdig_fun>
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	f000 000f 	and.w	r0, r0, #15
 8008a3c:	4098      	lsls	r0, r3
 8008a3e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008a42:	3304      	adds	r3, #4
 8008a44:	e7ae      	b.n	80089a4 <__gethex+0x15c>
 8008a46:	45b1      	cmp	r9, r6
 8008a48:	d8ea      	bhi.n	8008a20 <__gethex+0x1d8>
 8008a4a:	492b      	ldr	r1, [pc, #172]	@ (8008af8 <__gethex+0x2b0>)
 8008a4c:	9303      	str	r3, [sp, #12]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	4630      	mov	r0, r6
 8008a52:	f7fe ffd9 	bl	8007a08 <strncmp>
 8008a56:	9b03      	ldr	r3, [sp, #12]
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1e1      	bne.n	8008a20 <__gethex+0x1d8>
 8008a5c:	e7a2      	b.n	80089a4 <__gethex+0x15c>
 8008a5e:	1ea9      	subs	r1, r5, #2
 8008a60:	4620      	mov	r0, r4
 8008a62:	f001 f91e 	bl	8009ca2 <__any_on>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d0c2      	beq.n	80089f0 <__gethex+0x1a8>
 8008a6a:	f04f 0903 	mov.w	r9, #3
 8008a6e:	e7c1      	b.n	80089f4 <__gethex+0x1ac>
 8008a70:	da09      	bge.n	8008a86 <__gethex+0x23e>
 8008a72:	1b75      	subs	r5, r6, r5
 8008a74:	4621      	mov	r1, r4
 8008a76:	9801      	ldr	r0, [sp, #4]
 8008a78:	462a      	mov	r2, r5
 8008a7a:	f000 fed9 	bl	8009830 <__lshift>
 8008a7e:	1b7f      	subs	r7, r7, r5
 8008a80:	4604      	mov	r4, r0
 8008a82:	f100 0a14 	add.w	sl, r0, #20
 8008a86:	f04f 0900 	mov.w	r9, #0
 8008a8a:	e7b8      	b.n	80089fe <__gethex+0x1b6>
 8008a8c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a90:	42bd      	cmp	r5, r7
 8008a92:	dd6f      	ble.n	8008b74 <__gethex+0x32c>
 8008a94:	1bed      	subs	r5, r5, r7
 8008a96:	42ae      	cmp	r6, r5
 8008a98:	dc34      	bgt.n	8008b04 <__gethex+0x2bc>
 8008a9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d022      	beq.n	8008ae8 <__gethex+0x2a0>
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d024      	beq.n	8008af0 <__gethex+0x2a8>
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d115      	bne.n	8008ad6 <__gethex+0x28e>
 8008aaa:	42ae      	cmp	r6, r5
 8008aac:	d113      	bne.n	8008ad6 <__gethex+0x28e>
 8008aae:	2e01      	cmp	r6, #1
 8008ab0:	d10b      	bne.n	8008aca <__gethex+0x282>
 8008ab2:	9a02      	ldr	r2, [sp, #8]
 8008ab4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	2301      	movs	r3, #1
 8008abc:	6123      	str	r3, [r4, #16]
 8008abe:	f8ca 3000 	str.w	r3, [sl]
 8008ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ac4:	2562      	movs	r5, #98	@ 0x62
 8008ac6:	601c      	str	r4, [r3, #0]
 8008ac8:	e73a      	b.n	8008940 <__gethex+0xf8>
 8008aca:	1e71      	subs	r1, r6, #1
 8008acc:	4620      	mov	r0, r4
 8008ace:	f001 f8e8 	bl	8009ca2 <__any_on>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d1ed      	bne.n	8008ab2 <__gethex+0x26a>
 8008ad6:	9801      	ldr	r0, [sp, #4]
 8008ad8:	4621      	mov	r1, r4
 8008ada:	f000 fc91 	bl	8009400 <_Bfree>
 8008ade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	2550      	movs	r5, #80	@ 0x50
 8008ae6:	e72b      	b.n	8008940 <__gethex+0xf8>
 8008ae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1f3      	bne.n	8008ad6 <__gethex+0x28e>
 8008aee:	e7e0      	b.n	8008ab2 <__gethex+0x26a>
 8008af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1dd      	bne.n	8008ab2 <__gethex+0x26a>
 8008af6:	e7ee      	b.n	8008ad6 <__gethex+0x28e>
 8008af8:	0800adc9 	.word	0x0800adc9
 8008afc:	0800afa5 	.word	0x0800afa5
 8008b00:	0800afb6 	.word	0x0800afb6
 8008b04:	1e6f      	subs	r7, r5, #1
 8008b06:	f1b9 0f00 	cmp.w	r9, #0
 8008b0a:	d130      	bne.n	8008b6e <__gethex+0x326>
 8008b0c:	b127      	cbz	r7, 8008b18 <__gethex+0x2d0>
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4620      	mov	r0, r4
 8008b12:	f001 f8c6 	bl	8009ca2 <__any_on>
 8008b16:	4681      	mov	r9, r0
 8008b18:	117a      	asrs	r2, r7, #5
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008b20:	f007 071f 	and.w	r7, r7, #31
 8008b24:	40bb      	lsls	r3, r7
 8008b26:	4213      	tst	r3, r2
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	bf18      	it	ne
 8008b2e:	f049 0902 	orrne.w	r9, r9, #2
 8008b32:	f7ff fe21 	bl	8008778 <rshift>
 8008b36:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008b3a:	1b76      	subs	r6, r6, r5
 8008b3c:	2502      	movs	r5, #2
 8008b3e:	f1b9 0f00 	cmp.w	r9, #0
 8008b42:	d047      	beq.n	8008bd4 <__gethex+0x38c>
 8008b44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d015      	beq.n	8008b78 <__gethex+0x330>
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d017      	beq.n	8008b80 <__gethex+0x338>
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d109      	bne.n	8008b68 <__gethex+0x320>
 8008b54:	f019 0f02 	tst.w	r9, #2
 8008b58:	d006      	beq.n	8008b68 <__gethex+0x320>
 8008b5a:	f8da 3000 	ldr.w	r3, [sl]
 8008b5e:	ea49 0903 	orr.w	r9, r9, r3
 8008b62:	f019 0f01 	tst.w	r9, #1
 8008b66:	d10e      	bne.n	8008b86 <__gethex+0x33e>
 8008b68:	f045 0510 	orr.w	r5, r5, #16
 8008b6c:	e032      	b.n	8008bd4 <__gethex+0x38c>
 8008b6e:	f04f 0901 	mov.w	r9, #1
 8008b72:	e7d1      	b.n	8008b18 <__gethex+0x2d0>
 8008b74:	2501      	movs	r5, #1
 8008b76:	e7e2      	b.n	8008b3e <__gethex+0x2f6>
 8008b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b7a:	f1c3 0301 	rsb	r3, r3, #1
 8008b7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0f0      	beq.n	8008b68 <__gethex+0x320>
 8008b86:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b8a:	f104 0314 	add.w	r3, r4, #20
 8008b8e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b92:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b96:	f04f 0c00 	mov.w	ip, #0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008ba4:	d01b      	beq.n	8008bde <__gethex+0x396>
 8008ba6:	3201      	adds	r2, #1
 8008ba8:	6002      	str	r2, [r0, #0]
 8008baa:	2d02      	cmp	r5, #2
 8008bac:	f104 0314 	add.w	r3, r4, #20
 8008bb0:	d13c      	bne.n	8008c2c <__gethex+0x3e4>
 8008bb2:	f8d8 2000 	ldr.w	r2, [r8]
 8008bb6:	3a01      	subs	r2, #1
 8008bb8:	42b2      	cmp	r2, r6
 8008bba:	d109      	bne.n	8008bd0 <__gethex+0x388>
 8008bbc:	1171      	asrs	r1, r6, #5
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bc4:	f006 061f 	and.w	r6, r6, #31
 8008bc8:	fa02 f606 	lsl.w	r6, r2, r6
 8008bcc:	421e      	tst	r6, r3
 8008bce:	d13a      	bne.n	8008c46 <__gethex+0x3fe>
 8008bd0:	f045 0520 	orr.w	r5, r5, #32
 8008bd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bd6:	601c      	str	r4, [r3, #0]
 8008bd8:	9b02      	ldr	r3, [sp, #8]
 8008bda:	601f      	str	r7, [r3, #0]
 8008bdc:	e6b0      	b.n	8008940 <__gethex+0xf8>
 8008bde:	4299      	cmp	r1, r3
 8008be0:	f843 cc04 	str.w	ip, [r3, #-4]
 8008be4:	d8d9      	bhi.n	8008b9a <__gethex+0x352>
 8008be6:	68a3      	ldr	r3, [r4, #8]
 8008be8:	459b      	cmp	fp, r3
 8008bea:	db17      	blt.n	8008c1c <__gethex+0x3d4>
 8008bec:	6861      	ldr	r1, [r4, #4]
 8008bee:	9801      	ldr	r0, [sp, #4]
 8008bf0:	3101      	adds	r1, #1
 8008bf2:	f000 fbc5 	bl	8009380 <_Balloc>
 8008bf6:	4681      	mov	r9, r0
 8008bf8:	b918      	cbnz	r0, 8008c02 <__gethex+0x3ba>
 8008bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8008c64 <__gethex+0x41c>)
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	2184      	movs	r1, #132	@ 0x84
 8008c00:	e6c5      	b.n	800898e <__gethex+0x146>
 8008c02:	6922      	ldr	r2, [r4, #16]
 8008c04:	3202      	adds	r2, #2
 8008c06:	f104 010c 	add.w	r1, r4, #12
 8008c0a:	0092      	lsls	r2, r2, #2
 8008c0c:	300c      	adds	r0, #12
 8008c0e:	f7fe ff46 	bl	8007a9e <memcpy>
 8008c12:	4621      	mov	r1, r4
 8008c14:	9801      	ldr	r0, [sp, #4]
 8008c16:	f000 fbf3 	bl	8009400 <_Bfree>
 8008c1a:	464c      	mov	r4, r9
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c24:	6122      	str	r2, [r4, #16]
 8008c26:	2201      	movs	r2, #1
 8008c28:	615a      	str	r2, [r3, #20]
 8008c2a:	e7be      	b.n	8008baa <__gethex+0x362>
 8008c2c:	6922      	ldr	r2, [r4, #16]
 8008c2e:	455a      	cmp	r2, fp
 8008c30:	dd0b      	ble.n	8008c4a <__gethex+0x402>
 8008c32:	2101      	movs	r1, #1
 8008c34:	4620      	mov	r0, r4
 8008c36:	f7ff fd9f 	bl	8008778 <rshift>
 8008c3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c3e:	3701      	adds	r7, #1
 8008c40:	42bb      	cmp	r3, r7
 8008c42:	f6ff aee0 	blt.w	8008a06 <__gethex+0x1be>
 8008c46:	2501      	movs	r5, #1
 8008c48:	e7c2      	b.n	8008bd0 <__gethex+0x388>
 8008c4a:	f016 061f 	ands.w	r6, r6, #31
 8008c4e:	d0fa      	beq.n	8008c46 <__gethex+0x3fe>
 8008c50:	4453      	add	r3, sl
 8008c52:	f1c6 0620 	rsb	r6, r6, #32
 8008c56:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c5a:	f000 fc83 	bl	8009564 <__hi0bits>
 8008c5e:	42b0      	cmp	r0, r6
 8008c60:	dbe7      	blt.n	8008c32 <__gethex+0x3ea>
 8008c62:	e7f0      	b.n	8008c46 <__gethex+0x3fe>
 8008c64:	0800afa5 	.word	0x0800afa5

08008c68 <L_shift>:
 8008c68:	f1c2 0208 	rsb	r2, r2, #8
 8008c6c:	0092      	lsls	r2, r2, #2
 8008c6e:	b570      	push	{r4, r5, r6, lr}
 8008c70:	f1c2 0620 	rsb	r6, r2, #32
 8008c74:	6843      	ldr	r3, [r0, #4]
 8008c76:	6804      	ldr	r4, [r0, #0]
 8008c78:	fa03 f506 	lsl.w	r5, r3, r6
 8008c7c:	432c      	orrs	r4, r5
 8008c7e:	40d3      	lsrs	r3, r2
 8008c80:	6004      	str	r4, [r0, #0]
 8008c82:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c86:	4288      	cmp	r0, r1
 8008c88:	d3f4      	bcc.n	8008c74 <L_shift+0xc>
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}

08008c8c <__match>:
 8008c8c:	b530      	push	{r4, r5, lr}
 8008c8e:	6803      	ldr	r3, [r0, #0]
 8008c90:	3301      	adds	r3, #1
 8008c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c96:	b914      	cbnz	r4, 8008c9e <__match+0x12>
 8008c98:	6003      	str	r3, [r0, #0]
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	bd30      	pop	{r4, r5, pc}
 8008c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008ca6:	2d19      	cmp	r5, #25
 8008ca8:	bf98      	it	ls
 8008caa:	3220      	addls	r2, #32
 8008cac:	42a2      	cmp	r2, r4
 8008cae:	d0f0      	beq.n	8008c92 <__match+0x6>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	e7f3      	b.n	8008c9c <__match+0x10>

08008cb4 <__hexnan>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	680b      	ldr	r3, [r1, #0]
 8008cba:	6801      	ldr	r1, [r0, #0]
 8008cbc:	115e      	asrs	r6, r3, #5
 8008cbe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cc2:	f013 031f 	ands.w	r3, r3, #31
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	bf18      	it	ne
 8008cca:	3604      	addne	r6, #4
 8008ccc:	2500      	movs	r5, #0
 8008cce:	1f37      	subs	r7, r6, #4
 8008cd0:	4682      	mov	sl, r0
 8008cd2:	4690      	mov	r8, r2
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cda:	46b9      	mov	r9, r7
 8008cdc:	463c      	mov	r4, r7
 8008cde:	9502      	str	r5, [sp, #8]
 8008ce0:	46ab      	mov	fp, r5
 8008ce2:	784a      	ldrb	r2, [r1, #1]
 8008ce4:	1c4b      	adds	r3, r1, #1
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	b342      	cbz	r2, 8008d3c <__hexnan+0x88>
 8008cea:	4610      	mov	r0, r2
 8008cec:	9105      	str	r1, [sp, #20]
 8008cee:	9204      	str	r2, [sp, #16]
 8008cf0:	f7ff fd94 	bl	800881c <__hexdig_fun>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d151      	bne.n	8008d9c <__hexnan+0xe8>
 8008cf8:	9a04      	ldr	r2, [sp, #16]
 8008cfa:	9905      	ldr	r1, [sp, #20]
 8008cfc:	2a20      	cmp	r2, #32
 8008cfe:	d818      	bhi.n	8008d32 <__hexnan+0x7e>
 8008d00:	9b02      	ldr	r3, [sp, #8]
 8008d02:	459b      	cmp	fp, r3
 8008d04:	dd13      	ble.n	8008d2e <__hexnan+0x7a>
 8008d06:	454c      	cmp	r4, r9
 8008d08:	d206      	bcs.n	8008d18 <__hexnan+0x64>
 8008d0a:	2d07      	cmp	r5, #7
 8008d0c:	dc04      	bgt.n	8008d18 <__hexnan+0x64>
 8008d0e:	462a      	mov	r2, r5
 8008d10:	4649      	mov	r1, r9
 8008d12:	4620      	mov	r0, r4
 8008d14:	f7ff ffa8 	bl	8008c68 <L_shift>
 8008d18:	4544      	cmp	r4, r8
 8008d1a:	d952      	bls.n	8008dc2 <__hexnan+0x10e>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f1a4 0904 	sub.w	r9, r4, #4
 8008d22:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d26:	f8cd b008 	str.w	fp, [sp, #8]
 8008d2a:	464c      	mov	r4, r9
 8008d2c:	461d      	mov	r5, r3
 8008d2e:	9903      	ldr	r1, [sp, #12]
 8008d30:	e7d7      	b.n	8008ce2 <__hexnan+0x2e>
 8008d32:	2a29      	cmp	r2, #41	@ 0x29
 8008d34:	d157      	bne.n	8008de6 <__hexnan+0x132>
 8008d36:	3102      	adds	r1, #2
 8008d38:	f8ca 1000 	str.w	r1, [sl]
 8008d3c:	f1bb 0f00 	cmp.w	fp, #0
 8008d40:	d051      	beq.n	8008de6 <__hexnan+0x132>
 8008d42:	454c      	cmp	r4, r9
 8008d44:	d206      	bcs.n	8008d54 <__hexnan+0xa0>
 8008d46:	2d07      	cmp	r5, #7
 8008d48:	dc04      	bgt.n	8008d54 <__hexnan+0xa0>
 8008d4a:	462a      	mov	r2, r5
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f7ff ff8a 	bl	8008c68 <L_shift>
 8008d54:	4544      	cmp	r4, r8
 8008d56:	d936      	bls.n	8008dc6 <__hexnan+0x112>
 8008d58:	f1a8 0204 	sub.w	r2, r8, #4
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d62:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d66:	429f      	cmp	r7, r3
 8008d68:	d2f9      	bcs.n	8008d5e <__hexnan+0xaa>
 8008d6a:	1b3b      	subs	r3, r7, r4
 8008d6c:	f023 0303 	bic.w	r3, r3, #3
 8008d70:	3304      	adds	r3, #4
 8008d72:	3401      	adds	r4, #1
 8008d74:	3e03      	subs	r6, #3
 8008d76:	42b4      	cmp	r4, r6
 8008d78:	bf88      	it	hi
 8008d7a:	2304      	movhi	r3, #4
 8008d7c:	4443      	add	r3, r8
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f843 2b04 	str.w	r2, [r3], #4
 8008d84:	429f      	cmp	r7, r3
 8008d86:	d2fb      	bcs.n	8008d80 <__hexnan+0xcc>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	b91b      	cbnz	r3, 8008d94 <__hexnan+0xe0>
 8008d8c:	4547      	cmp	r7, r8
 8008d8e:	d128      	bne.n	8008de2 <__hexnan+0x12e>
 8008d90:	2301      	movs	r3, #1
 8008d92:	603b      	str	r3, [r7, #0]
 8008d94:	2005      	movs	r0, #5
 8008d96:	b007      	add	sp, #28
 8008d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	2d08      	cmp	r5, #8
 8008da0:	f10b 0b01 	add.w	fp, fp, #1
 8008da4:	dd06      	ble.n	8008db4 <__hexnan+0x100>
 8008da6:	4544      	cmp	r4, r8
 8008da8:	d9c1      	bls.n	8008d2e <__hexnan+0x7a>
 8008daa:	2300      	movs	r3, #0
 8008dac:	f844 3c04 	str.w	r3, [r4, #-4]
 8008db0:	2501      	movs	r5, #1
 8008db2:	3c04      	subs	r4, #4
 8008db4:	6822      	ldr	r2, [r4, #0]
 8008db6:	f000 000f 	and.w	r0, r0, #15
 8008dba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008dbe:	6020      	str	r0, [r4, #0]
 8008dc0:	e7b5      	b.n	8008d2e <__hexnan+0x7a>
 8008dc2:	2508      	movs	r5, #8
 8008dc4:	e7b3      	b.n	8008d2e <__hexnan+0x7a>
 8008dc6:	9b01      	ldr	r3, [sp, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d0dd      	beq.n	8008d88 <__hexnan+0xd4>
 8008dcc:	f1c3 0320 	rsb	r3, r3, #32
 8008dd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008dd4:	40da      	lsrs	r2, r3
 8008dd6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008dda:	4013      	ands	r3, r2
 8008ddc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008de0:	e7d2      	b.n	8008d88 <__hexnan+0xd4>
 8008de2:	3f04      	subs	r7, #4
 8008de4:	e7d0      	b.n	8008d88 <__hexnan+0xd4>
 8008de6:	2004      	movs	r0, #4
 8008de8:	e7d5      	b.n	8008d96 <__hexnan+0xe2>

08008dea <__ssputs_r>:
 8008dea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dee:	688e      	ldr	r6, [r1, #8]
 8008df0:	461f      	mov	r7, r3
 8008df2:	42be      	cmp	r6, r7
 8008df4:	680b      	ldr	r3, [r1, #0]
 8008df6:	4682      	mov	sl, r0
 8008df8:	460c      	mov	r4, r1
 8008dfa:	4690      	mov	r8, r2
 8008dfc:	d82d      	bhi.n	8008e5a <__ssputs_r+0x70>
 8008dfe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e02:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e06:	d026      	beq.n	8008e56 <__ssputs_r+0x6c>
 8008e08:	6965      	ldr	r5, [r4, #20]
 8008e0a:	6909      	ldr	r1, [r1, #16]
 8008e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e10:	eba3 0901 	sub.w	r9, r3, r1
 8008e14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e18:	1c7b      	adds	r3, r7, #1
 8008e1a:	444b      	add	r3, r9
 8008e1c:	106d      	asrs	r5, r5, #1
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	bf38      	it	cc
 8008e22:	461d      	movcc	r5, r3
 8008e24:	0553      	lsls	r3, r2, #21
 8008e26:	d527      	bpl.n	8008e78 <__ssputs_r+0x8e>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f000 f95f 	bl	80090ec <_malloc_r>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	b360      	cbz	r0, 8008e8c <__ssputs_r+0xa2>
 8008e32:	6921      	ldr	r1, [r4, #16]
 8008e34:	464a      	mov	r2, r9
 8008e36:	f7fe fe32 	bl	8007a9e <memcpy>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e44:	81a3      	strh	r3, [r4, #12]
 8008e46:	6126      	str	r6, [r4, #16]
 8008e48:	6165      	str	r5, [r4, #20]
 8008e4a:	444e      	add	r6, r9
 8008e4c:	eba5 0509 	sub.w	r5, r5, r9
 8008e50:	6026      	str	r6, [r4, #0]
 8008e52:	60a5      	str	r5, [r4, #8]
 8008e54:	463e      	mov	r6, r7
 8008e56:	42be      	cmp	r6, r7
 8008e58:	d900      	bls.n	8008e5c <__ssputs_r+0x72>
 8008e5a:	463e      	mov	r6, r7
 8008e5c:	6820      	ldr	r0, [r4, #0]
 8008e5e:	4632      	mov	r2, r6
 8008e60:	4641      	mov	r1, r8
 8008e62:	f000 ffbd 	bl	8009de0 <memmove>
 8008e66:	68a3      	ldr	r3, [r4, #8]
 8008e68:	1b9b      	subs	r3, r3, r6
 8008e6a:	60a3      	str	r3, [r4, #8]
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	4433      	add	r3, r6
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	2000      	movs	r0, #0
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	462a      	mov	r2, r5
 8008e7a:	f000 ff76 	bl	8009d6a <_realloc_r>
 8008e7e:	4606      	mov	r6, r0
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d1e0      	bne.n	8008e46 <__ssputs_r+0x5c>
 8008e84:	6921      	ldr	r1, [r4, #16]
 8008e86:	4650      	mov	r0, sl
 8008e88:	f001 f84c 	bl	8009f24 <_free_r>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	f8ca 3000 	str.w	r3, [sl]
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e9e:	e7e9      	b.n	8008e74 <__ssputs_r+0x8a>

08008ea0 <_svfiprintf_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	4698      	mov	r8, r3
 8008ea6:	898b      	ldrh	r3, [r1, #12]
 8008ea8:	061b      	lsls	r3, r3, #24
 8008eaa:	b09d      	sub	sp, #116	@ 0x74
 8008eac:	4607      	mov	r7, r0
 8008eae:	460d      	mov	r5, r1
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	d510      	bpl.n	8008ed6 <_svfiprintf_r+0x36>
 8008eb4:	690b      	ldr	r3, [r1, #16]
 8008eb6:	b973      	cbnz	r3, 8008ed6 <_svfiprintf_r+0x36>
 8008eb8:	2140      	movs	r1, #64	@ 0x40
 8008eba:	f000 f917 	bl	80090ec <_malloc_r>
 8008ebe:	6028      	str	r0, [r5, #0]
 8008ec0:	6128      	str	r0, [r5, #16]
 8008ec2:	b930      	cbnz	r0, 8008ed2 <_svfiprintf_r+0x32>
 8008ec4:	230c      	movs	r3, #12
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ecc:	b01d      	add	sp, #116	@ 0x74
 8008ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed2:	2340      	movs	r3, #64	@ 0x40
 8008ed4:	616b      	str	r3, [r5, #20]
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eda:	2320      	movs	r3, #32
 8008edc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ee0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ee4:	2330      	movs	r3, #48	@ 0x30
 8008ee6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009084 <_svfiprintf_r+0x1e4>
 8008eea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eee:	f04f 0901 	mov.w	r9, #1
 8008ef2:	4623      	mov	r3, r4
 8008ef4:	469a      	mov	sl, r3
 8008ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008efa:	b10a      	cbz	r2, 8008f00 <_svfiprintf_r+0x60>
 8008efc:	2a25      	cmp	r2, #37	@ 0x25
 8008efe:	d1f9      	bne.n	8008ef4 <_svfiprintf_r+0x54>
 8008f00:	ebba 0b04 	subs.w	fp, sl, r4
 8008f04:	d00b      	beq.n	8008f1e <_svfiprintf_r+0x7e>
 8008f06:	465b      	mov	r3, fp
 8008f08:	4622      	mov	r2, r4
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	f7ff ff6c 	bl	8008dea <__ssputs_r>
 8008f12:	3001      	adds	r0, #1
 8008f14:	f000 80a7 	beq.w	8009066 <_svfiprintf_r+0x1c6>
 8008f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f1a:	445a      	add	r2, fp
 8008f1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 809f 	beq.w	8009066 <_svfiprintf_r+0x1c6>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f32:	f10a 0a01 	add.w	sl, sl, #1
 8008f36:	9304      	str	r3, [sp, #16]
 8008f38:	9307      	str	r3, [sp, #28]
 8008f3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f40:	4654      	mov	r4, sl
 8008f42:	2205      	movs	r2, #5
 8008f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f48:	484e      	ldr	r0, [pc, #312]	@ (8009084 <_svfiprintf_r+0x1e4>)
 8008f4a:	f7f7 f951 	bl	80001f0 <memchr>
 8008f4e:	9a04      	ldr	r2, [sp, #16]
 8008f50:	b9d8      	cbnz	r0, 8008f8a <_svfiprintf_r+0xea>
 8008f52:	06d0      	lsls	r0, r2, #27
 8008f54:	bf44      	itt	mi
 8008f56:	2320      	movmi	r3, #32
 8008f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f5c:	0711      	lsls	r1, r2, #28
 8008f5e:	bf44      	itt	mi
 8008f60:	232b      	movmi	r3, #43	@ 0x2b
 8008f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f66:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f6c:	d015      	beq.n	8008f9a <_svfiprintf_r+0xfa>
 8008f6e:	9a07      	ldr	r2, [sp, #28]
 8008f70:	4654      	mov	r4, sl
 8008f72:	2000      	movs	r0, #0
 8008f74:	f04f 0c0a 	mov.w	ip, #10
 8008f78:	4621      	mov	r1, r4
 8008f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f7e:	3b30      	subs	r3, #48	@ 0x30
 8008f80:	2b09      	cmp	r3, #9
 8008f82:	d94b      	bls.n	800901c <_svfiprintf_r+0x17c>
 8008f84:	b1b0      	cbz	r0, 8008fb4 <_svfiprintf_r+0x114>
 8008f86:	9207      	str	r2, [sp, #28]
 8008f88:	e014      	b.n	8008fb4 <_svfiprintf_r+0x114>
 8008f8a:	eba0 0308 	sub.w	r3, r0, r8
 8008f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f92:	4313      	orrs	r3, r2
 8008f94:	9304      	str	r3, [sp, #16]
 8008f96:	46a2      	mov	sl, r4
 8008f98:	e7d2      	b.n	8008f40 <_svfiprintf_r+0xa0>
 8008f9a:	9b03      	ldr	r3, [sp, #12]
 8008f9c:	1d19      	adds	r1, r3, #4
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	9103      	str	r1, [sp, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	bfbb      	ittet	lt
 8008fa6:	425b      	neglt	r3, r3
 8008fa8:	f042 0202 	orrlt.w	r2, r2, #2
 8008fac:	9307      	strge	r3, [sp, #28]
 8008fae:	9307      	strlt	r3, [sp, #28]
 8008fb0:	bfb8      	it	lt
 8008fb2:	9204      	strlt	r2, [sp, #16]
 8008fb4:	7823      	ldrb	r3, [r4, #0]
 8008fb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fb8:	d10a      	bne.n	8008fd0 <_svfiprintf_r+0x130>
 8008fba:	7863      	ldrb	r3, [r4, #1]
 8008fbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fbe:	d132      	bne.n	8009026 <_svfiprintf_r+0x186>
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	1d1a      	adds	r2, r3, #4
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	9203      	str	r2, [sp, #12]
 8008fc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fcc:	3402      	adds	r4, #2
 8008fce:	9305      	str	r3, [sp, #20]
 8008fd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009094 <_svfiprintf_r+0x1f4>
 8008fd4:	7821      	ldrb	r1, [r4, #0]
 8008fd6:	2203      	movs	r2, #3
 8008fd8:	4650      	mov	r0, sl
 8008fda:	f7f7 f909 	bl	80001f0 <memchr>
 8008fde:	b138      	cbz	r0, 8008ff0 <_svfiprintf_r+0x150>
 8008fe0:	9b04      	ldr	r3, [sp, #16]
 8008fe2:	eba0 000a 	sub.w	r0, r0, sl
 8008fe6:	2240      	movs	r2, #64	@ 0x40
 8008fe8:	4082      	lsls	r2, r0
 8008fea:	4313      	orrs	r3, r2
 8008fec:	3401      	adds	r4, #1
 8008fee:	9304      	str	r3, [sp, #16]
 8008ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff4:	4824      	ldr	r0, [pc, #144]	@ (8009088 <_svfiprintf_r+0x1e8>)
 8008ff6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ffa:	2206      	movs	r2, #6
 8008ffc:	f7f7 f8f8 	bl	80001f0 <memchr>
 8009000:	2800      	cmp	r0, #0
 8009002:	d036      	beq.n	8009072 <_svfiprintf_r+0x1d2>
 8009004:	4b21      	ldr	r3, [pc, #132]	@ (800908c <_svfiprintf_r+0x1ec>)
 8009006:	bb1b      	cbnz	r3, 8009050 <_svfiprintf_r+0x1b0>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	3307      	adds	r3, #7
 800900c:	f023 0307 	bic.w	r3, r3, #7
 8009010:	3308      	adds	r3, #8
 8009012:	9303      	str	r3, [sp, #12]
 8009014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009016:	4433      	add	r3, r6
 8009018:	9309      	str	r3, [sp, #36]	@ 0x24
 800901a:	e76a      	b.n	8008ef2 <_svfiprintf_r+0x52>
 800901c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009020:	460c      	mov	r4, r1
 8009022:	2001      	movs	r0, #1
 8009024:	e7a8      	b.n	8008f78 <_svfiprintf_r+0xd8>
 8009026:	2300      	movs	r3, #0
 8009028:	3401      	adds	r4, #1
 800902a:	9305      	str	r3, [sp, #20]
 800902c:	4619      	mov	r1, r3
 800902e:	f04f 0c0a 	mov.w	ip, #10
 8009032:	4620      	mov	r0, r4
 8009034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009038:	3a30      	subs	r2, #48	@ 0x30
 800903a:	2a09      	cmp	r2, #9
 800903c:	d903      	bls.n	8009046 <_svfiprintf_r+0x1a6>
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0c6      	beq.n	8008fd0 <_svfiprintf_r+0x130>
 8009042:	9105      	str	r1, [sp, #20]
 8009044:	e7c4      	b.n	8008fd0 <_svfiprintf_r+0x130>
 8009046:	fb0c 2101 	mla	r1, ip, r1, r2
 800904a:	4604      	mov	r4, r0
 800904c:	2301      	movs	r3, #1
 800904e:	e7f0      	b.n	8009032 <_svfiprintf_r+0x192>
 8009050:	ab03      	add	r3, sp, #12
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	462a      	mov	r2, r5
 8009056:	4b0e      	ldr	r3, [pc, #56]	@ (8009090 <_svfiprintf_r+0x1f0>)
 8009058:	a904      	add	r1, sp, #16
 800905a:	4638      	mov	r0, r7
 800905c:	f7fc ff6c 	bl	8005f38 <_printf_float>
 8009060:	1c42      	adds	r2, r0, #1
 8009062:	4606      	mov	r6, r0
 8009064:	d1d6      	bne.n	8009014 <_svfiprintf_r+0x174>
 8009066:	89ab      	ldrh	r3, [r5, #12]
 8009068:	065b      	lsls	r3, r3, #25
 800906a:	f53f af2d 	bmi.w	8008ec8 <_svfiprintf_r+0x28>
 800906e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009070:	e72c      	b.n	8008ecc <_svfiprintf_r+0x2c>
 8009072:	ab03      	add	r3, sp, #12
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	462a      	mov	r2, r5
 8009078:	4b05      	ldr	r3, [pc, #20]	@ (8009090 <_svfiprintf_r+0x1f0>)
 800907a:	a904      	add	r1, sp, #16
 800907c:	4638      	mov	r0, r7
 800907e:	f7fd f9f3 	bl	8006468 <_printf_i>
 8009082:	e7ed      	b.n	8009060 <_svfiprintf_r+0x1c0>
 8009084:	0800b016 	.word	0x0800b016
 8009088:	0800b020 	.word	0x0800b020
 800908c:	08005f39 	.word	0x08005f39
 8009090:	08008deb 	.word	0x08008deb
 8009094:	0800b01c 	.word	0x0800b01c

08009098 <malloc>:
 8009098:	4b02      	ldr	r3, [pc, #8]	@ (80090a4 <malloc+0xc>)
 800909a:	4601      	mov	r1, r0
 800909c:	6818      	ldr	r0, [r3, #0]
 800909e:	f000 b825 	b.w	80090ec <_malloc_r>
 80090a2:	bf00      	nop
 80090a4:	2000018c 	.word	0x2000018c

080090a8 <sbrk_aligned>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4e0f      	ldr	r6, [pc, #60]	@ (80090e8 <sbrk_aligned+0x40>)
 80090ac:	460c      	mov	r4, r1
 80090ae:	6831      	ldr	r1, [r6, #0]
 80090b0:	4605      	mov	r5, r0
 80090b2:	b911      	cbnz	r1, 80090ba <sbrk_aligned+0x12>
 80090b4:	f000 fee2 	bl	8009e7c <_sbrk_r>
 80090b8:	6030      	str	r0, [r6, #0]
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 fedd 	bl	8009e7c <_sbrk_r>
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	d103      	bne.n	80090ce <sbrk_aligned+0x26>
 80090c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80090ca:	4620      	mov	r0, r4
 80090cc:	bd70      	pop	{r4, r5, r6, pc}
 80090ce:	1cc4      	adds	r4, r0, #3
 80090d0:	f024 0403 	bic.w	r4, r4, #3
 80090d4:	42a0      	cmp	r0, r4
 80090d6:	d0f8      	beq.n	80090ca <sbrk_aligned+0x22>
 80090d8:	1a21      	subs	r1, r4, r0
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 fece 	bl	8009e7c <_sbrk_r>
 80090e0:	3001      	adds	r0, #1
 80090e2:	d1f2      	bne.n	80090ca <sbrk_aligned+0x22>
 80090e4:	e7ef      	b.n	80090c6 <sbrk_aligned+0x1e>
 80090e6:	bf00      	nop
 80090e8:	20000440 	.word	0x20000440

080090ec <_malloc_r>:
 80090ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f0:	1ccd      	adds	r5, r1, #3
 80090f2:	f025 0503 	bic.w	r5, r5, #3
 80090f6:	3508      	adds	r5, #8
 80090f8:	2d0c      	cmp	r5, #12
 80090fa:	bf38      	it	cc
 80090fc:	250c      	movcc	r5, #12
 80090fe:	2d00      	cmp	r5, #0
 8009100:	4606      	mov	r6, r0
 8009102:	db01      	blt.n	8009108 <_malloc_r+0x1c>
 8009104:	42a9      	cmp	r1, r5
 8009106:	d904      	bls.n	8009112 <_malloc_r+0x26>
 8009108:	230c      	movs	r3, #12
 800910a:	6033      	str	r3, [r6, #0]
 800910c:	2000      	movs	r0, #0
 800910e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091e8 <_malloc_r+0xfc>
 8009116:	f000 f927 	bl	8009368 <__malloc_lock>
 800911a:	f8d8 3000 	ldr.w	r3, [r8]
 800911e:	461c      	mov	r4, r3
 8009120:	bb44      	cbnz	r4, 8009174 <_malloc_r+0x88>
 8009122:	4629      	mov	r1, r5
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff ffbf 	bl	80090a8 <sbrk_aligned>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	4604      	mov	r4, r0
 800912e:	d158      	bne.n	80091e2 <_malloc_r+0xf6>
 8009130:	f8d8 4000 	ldr.w	r4, [r8]
 8009134:	4627      	mov	r7, r4
 8009136:	2f00      	cmp	r7, #0
 8009138:	d143      	bne.n	80091c2 <_malloc_r+0xd6>
 800913a:	2c00      	cmp	r4, #0
 800913c:	d04b      	beq.n	80091d6 <_malloc_r+0xea>
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	4639      	mov	r1, r7
 8009142:	4630      	mov	r0, r6
 8009144:	eb04 0903 	add.w	r9, r4, r3
 8009148:	f000 fe98 	bl	8009e7c <_sbrk_r>
 800914c:	4581      	cmp	r9, r0
 800914e:	d142      	bne.n	80091d6 <_malloc_r+0xea>
 8009150:	6821      	ldr	r1, [r4, #0]
 8009152:	1a6d      	subs	r5, r5, r1
 8009154:	4629      	mov	r1, r5
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff ffa6 	bl	80090a8 <sbrk_aligned>
 800915c:	3001      	adds	r0, #1
 800915e:	d03a      	beq.n	80091d6 <_malloc_r+0xea>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	442b      	add	r3, r5
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	f8d8 3000 	ldr.w	r3, [r8]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	bb62      	cbnz	r2, 80091c8 <_malloc_r+0xdc>
 800916e:	f8c8 7000 	str.w	r7, [r8]
 8009172:	e00f      	b.n	8009194 <_malloc_r+0xa8>
 8009174:	6822      	ldr	r2, [r4, #0]
 8009176:	1b52      	subs	r2, r2, r5
 8009178:	d420      	bmi.n	80091bc <_malloc_r+0xd0>
 800917a:	2a0b      	cmp	r2, #11
 800917c:	d917      	bls.n	80091ae <_malloc_r+0xc2>
 800917e:	1961      	adds	r1, r4, r5
 8009180:	42a3      	cmp	r3, r4
 8009182:	6025      	str	r5, [r4, #0]
 8009184:	bf18      	it	ne
 8009186:	6059      	strne	r1, [r3, #4]
 8009188:	6863      	ldr	r3, [r4, #4]
 800918a:	bf08      	it	eq
 800918c:	f8c8 1000 	streq.w	r1, [r8]
 8009190:	5162      	str	r2, [r4, r5]
 8009192:	604b      	str	r3, [r1, #4]
 8009194:	4630      	mov	r0, r6
 8009196:	f000 f8ed 	bl	8009374 <__malloc_unlock>
 800919a:	f104 000b 	add.w	r0, r4, #11
 800919e:	1d23      	adds	r3, r4, #4
 80091a0:	f020 0007 	bic.w	r0, r0, #7
 80091a4:	1ac2      	subs	r2, r0, r3
 80091a6:	bf1c      	itt	ne
 80091a8:	1a1b      	subne	r3, r3, r0
 80091aa:	50a3      	strne	r3, [r4, r2]
 80091ac:	e7af      	b.n	800910e <_malloc_r+0x22>
 80091ae:	6862      	ldr	r2, [r4, #4]
 80091b0:	42a3      	cmp	r3, r4
 80091b2:	bf0c      	ite	eq
 80091b4:	f8c8 2000 	streq.w	r2, [r8]
 80091b8:	605a      	strne	r2, [r3, #4]
 80091ba:	e7eb      	b.n	8009194 <_malloc_r+0xa8>
 80091bc:	4623      	mov	r3, r4
 80091be:	6864      	ldr	r4, [r4, #4]
 80091c0:	e7ae      	b.n	8009120 <_malloc_r+0x34>
 80091c2:	463c      	mov	r4, r7
 80091c4:	687f      	ldr	r7, [r7, #4]
 80091c6:	e7b6      	b.n	8009136 <_malloc_r+0x4a>
 80091c8:	461a      	mov	r2, r3
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	d1fb      	bne.n	80091c8 <_malloc_r+0xdc>
 80091d0:	2300      	movs	r3, #0
 80091d2:	6053      	str	r3, [r2, #4]
 80091d4:	e7de      	b.n	8009194 <_malloc_r+0xa8>
 80091d6:	230c      	movs	r3, #12
 80091d8:	6033      	str	r3, [r6, #0]
 80091da:	4630      	mov	r0, r6
 80091dc:	f000 f8ca 	bl	8009374 <__malloc_unlock>
 80091e0:	e794      	b.n	800910c <_malloc_r+0x20>
 80091e2:	6005      	str	r5, [r0, #0]
 80091e4:	e7d6      	b.n	8009194 <_malloc_r+0xa8>
 80091e6:	bf00      	nop
 80091e8:	20000444 	.word	0x20000444

080091ec <__ascii_mbtowc>:
 80091ec:	b082      	sub	sp, #8
 80091ee:	b901      	cbnz	r1, 80091f2 <__ascii_mbtowc+0x6>
 80091f0:	a901      	add	r1, sp, #4
 80091f2:	b142      	cbz	r2, 8009206 <__ascii_mbtowc+0x1a>
 80091f4:	b14b      	cbz	r3, 800920a <__ascii_mbtowc+0x1e>
 80091f6:	7813      	ldrb	r3, [r2, #0]
 80091f8:	600b      	str	r3, [r1, #0]
 80091fa:	7812      	ldrb	r2, [r2, #0]
 80091fc:	1e10      	subs	r0, r2, #0
 80091fe:	bf18      	it	ne
 8009200:	2001      	movne	r0, #1
 8009202:	b002      	add	sp, #8
 8009204:	4770      	bx	lr
 8009206:	4610      	mov	r0, r2
 8009208:	e7fb      	b.n	8009202 <__ascii_mbtowc+0x16>
 800920a:	f06f 0001 	mvn.w	r0, #1
 800920e:	e7f8      	b.n	8009202 <__ascii_mbtowc+0x16>

08009210 <__sflush_r>:
 8009210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009218:	0716      	lsls	r6, r2, #28
 800921a:	4605      	mov	r5, r0
 800921c:	460c      	mov	r4, r1
 800921e:	d454      	bmi.n	80092ca <__sflush_r+0xba>
 8009220:	684b      	ldr	r3, [r1, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	dc02      	bgt.n	800922c <__sflush_r+0x1c>
 8009226:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009228:	2b00      	cmp	r3, #0
 800922a:	dd48      	ble.n	80092be <__sflush_r+0xae>
 800922c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800922e:	2e00      	cmp	r6, #0
 8009230:	d045      	beq.n	80092be <__sflush_r+0xae>
 8009232:	2300      	movs	r3, #0
 8009234:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009238:	682f      	ldr	r7, [r5, #0]
 800923a:	6a21      	ldr	r1, [r4, #32]
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	d030      	beq.n	80092a2 <__sflush_r+0x92>
 8009240:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	0759      	lsls	r1, r3, #29
 8009246:	d505      	bpl.n	8009254 <__sflush_r+0x44>
 8009248:	6863      	ldr	r3, [r4, #4]
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800924e:	b10b      	cbz	r3, 8009254 <__sflush_r+0x44>
 8009250:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009252:	1ad2      	subs	r2, r2, r3
 8009254:	2300      	movs	r3, #0
 8009256:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009258:	6a21      	ldr	r1, [r4, #32]
 800925a:	4628      	mov	r0, r5
 800925c:	47b0      	blx	r6
 800925e:	1c43      	adds	r3, r0, #1
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	d106      	bne.n	8009272 <__sflush_r+0x62>
 8009264:	6829      	ldr	r1, [r5, #0]
 8009266:	291d      	cmp	r1, #29
 8009268:	d82b      	bhi.n	80092c2 <__sflush_r+0xb2>
 800926a:	4a2a      	ldr	r2, [pc, #168]	@ (8009314 <__sflush_r+0x104>)
 800926c:	410a      	asrs	r2, r1
 800926e:	07d6      	lsls	r6, r2, #31
 8009270:	d427      	bmi.n	80092c2 <__sflush_r+0xb2>
 8009272:	2200      	movs	r2, #0
 8009274:	6062      	str	r2, [r4, #4]
 8009276:	04d9      	lsls	r1, r3, #19
 8009278:	6922      	ldr	r2, [r4, #16]
 800927a:	6022      	str	r2, [r4, #0]
 800927c:	d504      	bpl.n	8009288 <__sflush_r+0x78>
 800927e:	1c42      	adds	r2, r0, #1
 8009280:	d101      	bne.n	8009286 <__sflush_r+0x76>
 8009282:	682b      	ldr	r3, [r5, #0]
 8009284:	b903      	cbnz	r3, 8009288 <__sflush_r+0x78>
 8009286:	6560      	str	r0, [r4, #84]	@ 0x54
 8009288:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800928a:	602f      	str	r7, [r5, #0]
 800928c:	b1b9      	cbz	r1, 80092be <__sflush_r+0xae>
 800928e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009292:	4299      	cmp	r1, r3
 8009294:	d002      	beq.n	800929c <__sflush_r+0x8c>
 8009296:	4628      	mov	r0, r5
 8009298:	f000 fe44 	bl	8009f24 <_free_r>
 800929c:	2300      	movs	r3, #0
 800929e:	6363      	str	r3, [r4, #52]	@ 0x34
 80092a0:	e00d      	b.n	80092be <__sflush_r+0xae>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b0      	blx	r6
 80092a8:	4602      	mov	r2, r0
 80092aa:	1c50      	adds	r0, r2, #1
 80092ac:	d1c9      	bne.n	8009242 <__sflush_r+0x32>
 80092ae:	682b      	ldr	r3, [r5, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d0c6      	beq.n	8009242 <__sflush_r+0x32>
 80092b4:	2b1d      	cmp	r3, #29
 80092b6:	d001      	beq.n	80092bc <__sflush_r+0xac>
 80092b8:	2b16      	cmp	r3, #22
 80092ba:	d11e      	bne.n	80092fa <__sflush_r+0xea>
 80092bc:	602f      	str	r7, [r5, #0]
 80092be:	2000      	movs	r0, #0
 80092c0:	e022      	b.n	8009308 <__sflush_r+0xf8>
 80092c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092c6:	b21b      	sxth	r3, r3
 80092c8:	e01b      	b.n	8009302 <__sflush_r+0xf2>
 80092ca:	690f      	ldr	r7, [r1, #16]
 80092cc:	2f00      	cmp	r7, #0
 80092ce:	d0f6      	beq.n	80092be <__sflush_r+0xae>
 80092d0:	0793      	lsls	r3, r2, #30
 80092d2:	680e      	ldr	r6, [r1, #0]
 80092d4:	bf08      	it	eq
 80092d6:	694b      	ldreq	r3, [r1, #20]
 80092d8:	600f      	str	r7, [r1, #0]
 80092da:	bf18      	it	ne
 80092dc:	2300      	movne	r3, #0
 80092de:	eba6 0807 	sub.w	r8, r6, r7
 80092e2:	608b      	str	r3, [r1, #8]
 80092e4:	f1b8 0f00 	cmp.w	r8, #0
 80092e8:	dde9      	ble.n	80092be <__sflush_r+0xae>
 80092ea:	6a21      	ldr	r1, [r4, #32]
 80092ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092ee:	4643      	mov	r3, r8
 80092f0:	463a      	mov	r2, r7
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b0      	blx	r6
 80092f6:	2800      	cmp	r0, #0
 80092f8:	dc08      	bgt.n	800930c <__sflush_r+0xfc>
 80092fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930c:	4407      	add	r7, r0
 800930e:	eba8 0800 	sub.w	r8, r8, r0
 8009312:	e7e7      	b.n	80092e4 <__sflush_r+0xd4>
 8009314:	dfbffffe 	.word	0xdfbffffe

08009318 <_fflush_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	690b      	ldr	r3, [r1, #16]
 800931c:	4605      	mov	r5, r0
 800931e:	460c      	mov	r4, r1
 8009320:	b913      	cbnz	r3, 8009328 <_fflush_r+0x10>
 8009322:	2500      	movs	r5, #0
 8009324:	4628      	mov	r0, r5
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	b118      	cbz	r0, 8009332 <_fflush_r+0x1a>
 800932a:	6a03      	ldr	r3, [r0, #32]
 800932c:	b90b      	cbnz	r3, 8009332 <_fflush_r+0x1a>
 800932e:	f7fd fcaf 	bl	8006c90 <__sinit>
 8009332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0f3      	beq.n	8009322 <_fflush_r+0xa>
 800933a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800933c:	07d0      	lsls	r0, r2, #31
 800933e:	d404      	bmi.n	800934a <_fflush_r+0x32>
 8009340:	0599      	lsls	r1, r3, #22
 8009342:	d402      	bmi.n	800934a <_fflush_r+0x32>
 8009344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009346:	f7fe fba8 	bl	8007a9a <__retarget_lock_acquire_recursive>
 800934a:	4628      	mov	r0, r5
 800934c:	4621      	mov	r1, r4
 800934e:	f7ff ff5f 	bl	8009210 <__sflush_r>
 8009352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009354:	07da      	lsls	r2, r3, #31
 8009356:	4605      	mov	r5, r0
 8009358:	d4e4      	bmi.n	8009324 <_fflush_r+0xc>
 800935a:	89a3      	ldrh	r3, [r4, #12]
 800935c:	059b      	lsls	r3, r3, #22
 800935e:	d4e1      	bmi.n	8009324 <_fflush_r+0xc>
 8009360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009362:	f7fe fb9b 	bl	8007a9c <__retarget_lock_release_recursive>
 8009366:	e7dd      	b.n	8009324 <_fflush_r+0xc>

08009368 <__malloc_lock>:
 8009368:	4801      	ldr	r0, [pc, #4]	@ (8009370 <__malloc_lock+0x8>)
 800936a:	f7fe bb96 	b.w	8007a9a <__retarget_lock_acquire_recursive>
 800936e:	bf00      	nop
 8009370:	2000043c 	.word	0x2000043c

08009374 <__malloc_unlock>:
 8009374:	4801      	ldr	r0, [pc, #4]	@ (800937c <__malloc_unlock+0x8>)
 8009376:	f7fe bb91 	b.w	8007a9c <__retarget_lock_release_recursive>
 800937a:	bf00      	nop
 800937c:	2000043c 	.word	0x2000043c

08009380 <_Balloc>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	69c6      	ldr	r6, [r0, #28]
 8009384:	4604      	mov	r4, r0
 8009386:	460d      	mov	r5, r1
 8009388:	b976      	cbnz	r6, 80093a8 <_Balloc+0x28>
 800938a:	2010      	movs	r0, #16
 800938c:	f7ff fe84 	bl	8009098 <malloc>
 8009390:	4602      	mov	r2, r0
 8009392:	61e0      	str	r0, [r4, #28]
 8009394:	b920      	cbnz	r0, 80093a0 <_Balloc+0x20>
 8009396:	4b18      	ldr	r3, [pc, #96]	@ (80093f8 <_Balloc+0x78>)
 8009398:	4818      	ldr	r0, [pc, #96]	@ (80093fc <_Balloc+0x7c>)
 800939a:	216b      	movs	r1, #107	@ 0x6b
 800939c:	f000 fd90 	bl	8009ec0 <__assert_func>
 80093a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093a4:	6006      	str	r6, [r0, #0]
 80093a6:	60c6      	str	r6, [r0, #12]
 80093a8:	69e6      	ldr	r6, [r4, #28]
 80093aa:	68f3      	ldr	r3, [r6, #12]
 80093ac:	b183      	cbz	r3, 80093d0 <_Balloc+0x50>
 80093ae:	69e3      	ldr	r3, [r4, #28]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093b6:	b9b8      	cbnz	r0, 80093e8 <_Balloc+0x68>
 80093b8:	2101      	movs	r1, #1
 80093ba:	fa01 f605 	lsl.w	r6, r1, r5
 80093be:	1d72      	adds	r2, r6, #5
 80093c0:	0092      	lsls	r2, r2, #2
 80093c2:	4620      	mov	r0, r4
 80093c4:	f000 fd9a 	bl	8009efc <_calloc_r>
 80093c8:	b160      	cbz	r0, 80093e4 <_Balloc+0x64>
 80093ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093ce:	e00e      	b.n	80093ee <_Balloc+0x6e>
 80093d0:	2221      	movs	r2, #33	@ 0x21
 80093d2:	2104      	movs	r1, #4
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 fd91 	bl	8009efc <_calloc_r>
 80093da:	69e3      	ldr	r3, [r4, #28]
 80093dc:	60f0      	str	r0, [r6, #12]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e4      	bne.n	80093ae <_Balloc+0x2e>
 80093e4:	2000      	movs	r0, #0
 80093e6:	bd70      	pop	{r4, r5, r6, pc}
 80093e8:	6802      	ldr	r2, [r0, #0]
 80093ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093ee:	2300      	movs	r3, #0
 80093f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093f4:	e7f7      	b.n	80093e6 <_Balloc+0x66>
 80093f6:	bf00      	nop
 80093f8:	0800af36 	.word	0x0800af36
 80093fc:	0800b027 	.word	0x0800b027

08009400 <_Bfree>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	69c6      	ldr	r6, [r0, #28]
 8009404:	4605      	mov	r5, r0
 8009406:	460c      	mov	r4, r1
 8009408:	b976      	cbnz	r6, 8009428 <_Bfree+0x28>
 800940a:	2010      	movs	r0, #16
 800940c:	f7ff fe44 	bl	8009098 <malloc>
 8009410:	4602      	mov	r2, r0
 8009412:	61e8      	str	r0, [r5, #28]
 8009414:	b920      	cbnz	r0, 8009420 <_Bfree+0x20>
 8009416:	4b09      	ldr	r3, [pc, #36]	@ (800943c <_Bfree+0x3c>)
 8009418:	4809      	ldr	r0, [pc, #36]	@ (8009440 <_Bfree+0x40>)
 800941a:	218f      	movs	r1, #143	@ 0x8f
 800941c:	f000 fd50 	bl	8009ec0 <__assert_func>
 8009420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009424:	6006      	str	r6, [r0, #0]
 8009426:	60c6      	str	r6, [r0, #12]
 8009428:	b13c      	cbz	r4, 800943a <_Bfree+0x3a>
 800942a:	69eb      	ldr	r3, [r5, #28]
 800942c:	6862      	ldr	r2, [r4, #4]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009434:	6021      	str	r1, [r4, #0]
 8009436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800943a:	bd70      	pop	{r4, r5, r6, pc}
 800943c:	0800af36 	.word	0x0800af36
 8009440:	0800b027 	.word	0x0800b027

08009444 <__multadd>:
 8009444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009448:	690d      	ldr	r5, [r1, #16]
 800944a:	4607      	mov	r7, r0
 800944c:	460c      	mov	r4, r1
 800944e:	461e      	mov	r6, r3
 8009450:	f101 0c14 	add.w	ip, r1, #20
 8009454:	2000      	movs	r0, #0
 8009456:	f8dc 3000 	ldr.w	r3, [ip]
 800945a:	b299      	uxth	r1, r3
 800945c:	fb02 6101 	mla	r1, r2, r1, r6
 8009460:	0c1e      	lsrs	r6, r3, #16
 8009462:	0c0b      	lsrs	r3, r1, #16
 8009464:	fb02 3306 	mla	r3, r2, r6, r3
 8009468:	b289      	uxth	r1, r1
 800946a:	3001      	adds	r0, #1
 800946c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009470:	4285      	cmp	r5, r0
 8009472:	f84c 1b04 	str.w	r1, [ip], #4
 8009476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800947a:	dcec      	bgt.n	8009456 <__multadd+0x12>
 800947c:	b30e      	cbz	r6, 80094c2 <__multadd+0x7e>
 800947e:	68a3      	ldr	r3, [r4, #8]
 8009480:	42ab      	cmp	r3, r5
 8009482:	dc19      	bgt.n	80094b8 <__multadd+0x74>
 8009484:	6861      	ldr	r1, [r4, #4]
 8009486:	4638      	mov	r0, r7
 8009488:	3101      	adds	r1, #1
 800948a:	f7ff ff79 	bl	8009380 <_Balloc>
 800948e:	4680      	mov	r8, r0
 8009490:	b928      	cbnz	r0, 800949e <__multadd+0x5a>
 8009492:	4602      	mov	r2, r0
 8009494:	4b0c      	ldr	r3, [pc, #48]	@ (80094c8 <__multadd+0x84>)
 8009496:	480d      	ldr	r0, [pc, #52]	@ (80094cc <__multadd+0x88>)
 8009498:	21ba      	movs	r1, #186	@ 0xba
 800949a:	f000 fd11 	bl	8009ec0 <__assert_func>
 800949e:	6922      	ldr	r2, [r4, #16]
 80094a0:	3202      	adds	r2, #2
 80094a2:	f104 010c 	add.w	r1, r4, #12
 80094a6:	0092      	lsls	r2, r2, #2
 80094a8:	300c      	adds	r0, #12
 80094aa:	f7fe faf8 	bl	8007a9e <memcpy>
 80094ae:	4621      	mov	r1, r4
 80094b0:	4638      	mov	r0, r7
 80094b2:	f7ff ffa5 	bl	8009400 <_Bfree>
 80094b6:	4644      	mov	r4, r8
 80094b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094bc:	3501      	adds	r5, #1
 80094be:	615e      	str	r6, [r3, #20]
 80094c0:	6125      	str	r5, [r4, #16]
 80094c2:	4620      	mov	r0, r4
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	0800afa5 	.word	0x0800afa5
 80094cc:	0800b027 	.word	0x0800b027

080094d0 <__s2b>:
 80094d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d4:	460c      	mov	r4, r1
 80094d6:	4615      	mov	r5, r2
 80094d8:	461f      	mov	r7, r3
 80094da:	2209      	movs	r2, #9
 80094dc:	3308      	adds	r3, #8
 80094de:	4606      	mov	r6, r0
 80094e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80094e4:	2100      	movs	r1, #0
 80094e6:	2201      	movs	r2, #1
 80094e8:	429a      	cmp	r2, r3
 80094ea:	db09      	blt.n	8009500 <__s2b+0x30>
 80094ec:	4630      	mov	r0, r6
 80094ee:	f7ff ff47 	bl	8009380 <_Balloc>
 80094f2:	b940      	cbnz	r0, 8009506 <__s2b+0x36>
 80094f4:	4602      	mov	r2, r0
 80094f6:	4b19      	ldr	r3, [pc, #100]	@ (800955c <__s2b+0x8c>)
 80094f8:	4819      	ldr	r0, [pc, #100]	@ (8009560 <__s2b+0x90>)
 80094fa:	21d3      	movs	r1, #211	@ 0xd3
 80094fc:	f000 fce0 	bl	8009ec0 <__assert_func>
 8009500:	0052      	lsls	r2, r2, #1
 8009502:	3101      	adds	r1, #1
 8009504:	e7f0      	b.n	80094e8 <__s2b+0x18>
 8009506:	9b08      	ldr	r3, [sp, #32]
 8009508:	6143      	str	r3, [r0, #20]
 800950a:	2d09      	cmp	r5, #9
 800950c:	f04f 0301 	mov.w	r3, #1
 8009510:	6103      	str	r3, [r0, #16]
 8009512:	dd16      	ble.n	8009542 <__s2b+0x72>
 8009514:	f104 0909 	add.w	r9, r4, #9
 8009518:	46c8      	mov	r8, r9
 800951a:	442c      	add	r4, r5
 800951c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009520:	4601      	mov	r1, r0
 8009522:	3b30      	subs	r3, #48	@ 0x30
 8009524:	220a      	movs	r2, #10
 8009526:	4630      	mov	r0, r6
 8009528:	f7ff ff8c 	bl	8009444 <__multadd>
 800952c:	45a0      	cmp	r8, r4
 800952e:	d1f5      	bne.n	800951c <__s2b+0x4c>
 8009530:	f1a5 0408 	sub.w	r4, r5, #8
 8009534:	444c      	add	r4, r9
 8009536:	1b2d      	subs	r5, r5, r4
 8009538:	1963      	adds	r3, r4, r5
 800953a:	42bb      	cmp	r3, r7
 800953c:	db04      	blt.n	8009548 <__s2b+0x78>
 800953e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009542:	340a      	adds	r4, #10
 8009544:	2509      	movs	r5, #9
 8009546:	e7f6      	b.n	8009536 <__s2b+0x66>
 8009548:	f814 3b01 	ldrb.w	r3, [r4], #1
 800954c:	4601      	mov	r1, r0
 800954e:	3b30      	subs	r3, #48	@ 0x30
 8009550:	220a      	movs	r2, #10
 8009552:	4630      	mov	r0, r6
 8009554:	f7ff ff76 	bl	8009444 <__multadd>
 8009558:	e7ee      	b.n	8009538 <__s2b+0x68>
 800955a:	bf00      	nop
 800955c:	0800afa5 	.word	0x0800afa5
 8009560:	0800b027 	.word	0x0800b027

08009564 <__hi0bits>:
 8009564:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009568:	4603      	mov	r3, r0
 800956a:	bf36      	itet	cc
 800956c:	0403      	lslcc	r3, r0, #16
 800956e:	2000      	movcs	r0, #0
 8009570:	2010      	movcc	r0, #16
 8009572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009576:	bf3c      	itt	cc
 8009578:	021b      	lslcc	r3, r3, #8
 800957a:	3008      	addcc	r0, #8
 800957c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009580:	bf3c      	itt	cc
 8009582:	011b      	lslcc	r3, r3, #4
 8009584:	3004      	addcc	r0, #4
 8009586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800958a:	bf3c      	itt	cc
 800958c:	009b      	lslcc	r3, r3, #2
 800958e:	3002      	addcc	r0, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	db05      	blt.n	80095a0 <__hi0bits+0x3c>
 8009594:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009598:	f100 0001 	add.w	r0, r0, #1
 800959c:	bf08      	it	eq
 800959e:	2020      	moveq	r0, #32
 80095a0:	4770      	bx	lr

080095a2 <__lo0bits>:
 80095a2:	6803      	ldr	r3, [r0, #0]
 80095a4:	4602      	mov	r2, r0
 80095a6:	f013 0007 	ands.w	r0, r3, #7
 80095aa:	d00b      	beq.n	80095c4 <__lo0bits+0x22>
 80095ac:	07d9      	lsls	r1, r3, #31
 80095ae:	d421      	bmi.n	80095f4 <__lo0bits+0x52>
 80095b0:	0798      	lsls	r0, r3, #30
 80095b2:	bf49      	itett	mi
 80095b4:	085b      	lsrmi	r3, r3, #1
 80095b6:	089b      	lsrpl	r3, r3, #2
 80095b8:	2001      	movmi	r0, #1
 80095ba:	6013      	strmi	r3, [r2, #0]
 80095bc:	bf5c      	itt	pl
 80095be:	6013      	strpl	r3, [r2, #0]
 80095c0:	2002      	movpl	r0, #2
 80095c2:	4770      	bx	lr
 80095c4:	b299      	uxth	r1, r3
 80095c6:	b909      	cbnz	r1, 80095cc <__lo0bits+0x2a>
 80095c8:	0c1b      	lsrs	r3, r3, #16
 80095ca:	2010      	movs	r0, #16
 80095cc:	b2d9      	uxtb	r1, r3
 80095ce:	b909      	cbnz	r1, 80095d4 <__lo0bits+0x32>
 80095d0:	3008      	adds	r0, #8
 80095d2:	0a1b      	lsrs	r3, r3, #8
 80095d4:	0719      	lsls	r1, r3, #28
 80095d6:	bf04      	itt	eq
 80095d8:	091b      	lsreq	r3, r3, #4
 80095da:	3004      	addeq	r0, #4
 80095dc:	0799      	lsls	r1, r3, #30
 80095de:	bf04      	itt	eq
 80095e0:	089b      	lsreq	r3, r3, #2
 80095e2:	3002      	addeq	r0, #2
 80095e4:	07d9      	lsls	r1, r3, #31
 80095e6:	d403      	bmi.n	80095f0 <__lo0bits+0x4e>
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	f100 0001 	add.w	r0, r0, #1
 80095ee:	d003      	beq.n	80095f8 <__lo0bits+0x56>
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	4770      	bx	lr
 80095f4:	2000      	movs	r0, #0
 80095f6:	4770      	bx	lr
 80095f8:	2020      	movs	r0, #32
 80095fa:	4770      	bx	lr

080095fc <__i2b>:
 80095fc:	b510      	push	{r4, lr}
 80095fe:	460c      	mov	r4, r1
 8009600:	2101      	movs	r1, #1
 8009602:	f7ff febd 	bl	8009380 <_Balloc>
 8009606:	4602      	mov	r2, r0
 8009608:	b928      	cbnz	r0, 8009616 <__i2b+0x1a>
 800960a:	4b05      	ldr	r3, [pc, #20]	@ (8009620 <__i2b+0x24>)
 800960c:	4805      	ldr	r0, [pc, #20]	@ (8009624 <__i2b+0x28>)
 800960e:	f240 1145 	movw	r1, #325	@ 0x145
 8009612:	f000 fc55 	bl	8009ec0 <__assert_func>
 8009616:	2301      	movs	r3, #1
 8009618:	6144      	str	r4, [r0, #20]
 800961a:	6103      	str	r3, [r0, #16]
 800961c:	bd10      	pop	{r4, pc}
 800961e:	bf00      	nop
 8009620:	0800afa5 	.word	0x0800afa5
 8009624:	0800b027 	.word	0x0800b027

08009628 <__multiply>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	4614      	mov	r4, r2
 800962e:	690a      	ldr	r2, [r1, #16]
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	429a      	cmp	r2, r3
 8009634:	bfa8      	it	ge
 8009636:	4623      	movge	r3, r4
 8009638:	460f      	mov	r7, r1
 800963a:	bfa4      	itt	ge
 800963c:	460c      	movge	r4, r1
 800963e:	461f      	movge	r7, r3
 8009640:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009644:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009648:	68a3      	ldr	r3, [r4, #8]
 800964a:	6861      	ldr	r1, [r4, #4]
 800964c:	eb0a 0609 	add.w	r6, sl, r9
 8009650:	42b3      	cmp	r3, r6
 8009652:	b085      	sub	sp, #20
 8009654:	bfb8      	it	lt
 8009656:	3101      	addlt	r1, #1
 8009658:	f7ff fe92 	bl	8009380 <_Balloc>
 800965c:	b930      	cbnz	r0, 800966c <__multiply+0x44>
 800965e:	4602      	mov	r2, r0
 8009660:	4b44      	ldr	r3, [pc, #272]	@ (8009774 <__multiply+0x14c>)
 8009662:	4845      	ldr	r0, [pc, #276]	@ (8009778 <__multiply+0x150>)
 8009664:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009668:	f000 fc2a 	bl	8009ec0 <__assert_func>
 800966c:	f100 0514 	add.w	r5, r0, #20
 8009670:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009674:	462b      	mov	r3, r5
 8009676:	2200      	movs	r2, #0
 8009678:	4543      	cmp	r3, r8
 800967a:	d321      	bcc.n	80096c0 <__multiply+0x98>
 800967c:	f107 0114 	add.w	r1, r7, #20
 8009680:	f104 0214 	add.w	r2, r4, #20
 8009684:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009688:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800968c:	9302      	str	r3, [sp, #8]
 800968e:	1b13      	subs	r3, r2, r4
 8009690:	3b15      	subs	r3, #21
 8009692:	f023 0303 	bic.w	r3, r3, #3
 8009696:	3304      	adds	r3, #4
 8009698:	f104 0715 	add.w	r7, r4, #21
 800969c:	42ba      	cmp	r2, r7
 800969e:	bf38      	it	cc
 80096a0:	2304      	movcc	r3, #4
 80096a2:	9301      	str	r3, [sp, #4]
 80096a4:	9b02      	ldr	r3, [sp, #8]
 80096a6:	9103      	str	r1, [sp, #12]
 80096a8:	428b      	cmp	r3, r1
 80096aa:	d80c      	bhi.n	80096c6 <__multiply+0x9e>
 80096ac:	2e00      	cmp	r6, #0
 80096ae:	dd03      	ble.n	80096b8 <__multiply+0x90>
 80096b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d05b      	beq.n	8009770 <__multiply+0x148>
 80096b8:	6106      	str	r6, [r0, #16]
 80096ba:	b005      	add	sp, #20
 80096bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c0:	f843 2b04 	str.w	r2, [r3], #4
 80096c4:	e7d8      	b.n	8009678 <__multiply+0x50>
 80096c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80096ca:	f1ba 0f00 	cmp.w	sl, #0
 80096ce:	d024      	beq.n	800971a <__multiply+0xf2>
 80096d0:	f104 0e14 	add.w	lr, r4, #20
 80096d4:	46a9      	mov	r9, r5
 80096d6:	f04f 0c00 	mov.w	ip, #0
 80096da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096de:	f8d9 3000 	ldr.w	r3, [r9]
 80096e2:	fa1f fb87 	uxth.w	fp, r7
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80096ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80096f0:	f8d9 7000 	ldr.w	r7, [r9]
 80096f4:	4463      	add	r3, ip
 80096f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80096fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80096fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009702:	b29b      	uxth	r3, r3
 8009704:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009708:	4572      	cmp	r2, lr
 800970a:	f849 3b04 	str.w	r3, [r9], #4
 800970e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009712:	d8e2      	bhi.n	80096da <__multiply+0xb2>
 8009714:	9b01      	ldr	r3, [sp, #4]
 8009716:	f845 c003 	str.w	ip, [r5, r3]
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009720:	3104      	adds	r1, #4
 8009722:	f1b9 0f00 	cmp.w	r9, #0
 8009726:	d021      	beq.n	800976c <__multiply+0x144>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	f104 0c14 	add.w	ip, r4, #20
 800972e:	46ae      	mov	lr, r5
 8009730:	f04f 0a00 	mov.w	sl, #0
 8009734:	f8bc b000 	ldrh.w	fp, [ip]
 8009738:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800973c:	fb09 770b 	mla	r7, r9, fp, r7
 8009740:	4457      	add	r7, sl
 8009742:	b29b      	uxth	r3, r3
 8009744:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009748:	f84e 3b04 	str.w	r3, [lr], #4
 800974c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009750:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009754:	f8be 3000 	ldrh.w	r3, [lr]
 8009758:	fb09 330a 	mla	r3, r9, sl, r3
 800975c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009760:	4562      	cmp	r2, ip
 8009762:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009766:	d8e5      	bhi.n	8009734 <__multiply+0x10c>
 8009768:	9f01      	ldr	r7, [sp, #4]
 800976a:	51eb      	str	r3, [r5, r7]
 800976c:	3504      	adds	r5, #4
 800976e:	e799      	b.n	80096a4 <__multiply+0x7c>
 8009770:	3e01      	subs	r6, #1
 8009772:	e79b      	b.n	80096ac <__multiply+0x84>
 8009774:	0800afa5 	.word	0x0800afa5
 8009778:	0800b027 	.word	0x0800b027

0800977c <__pow5mult>:
 800977c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009780:	4615      	mov	r5, r2
 8009782:	f012 0203 	ands.w	r2, r2, #3
 8009786:	4607      	mov	r7, r0
 8009788:	460e      	mov	r6, r1
 800978a:	d007      	beq.n	800979c <__pow5mult+0x20>
 800978c:	4c25      	ldr	r4, [pc, #148]	@ (8009824 <__pow5mult+0xa8>)
 800978e:	3a01      	subs	r2, #1
 8009790:	2300      	movs	r3, #0
 8009792:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009796:	f7ff fe55 	bl	8009444 <__multadd>
 800979a:	4606      	mov	r6, r0
 800979c:	10ad      	asrs	r5, r5, #2
 800979e:	d03d      	beq.n	800981c <__pow5mult+0xa0>
 80097a0:	69fc      	ldr	r4, [r7, #28]
 80097a2:	b97c      	cbnz	r4, 80097c4 <__pow5mult+0x48>
 80097a4:	2010      	movs	r0, #16
 80097a6:	f7ff fc77 	bl	8009098 <malloc>
 80097aa:	4602      	mov	r2, r0
 80097ac:	61f8      	str	r0, [r7, #28]
 80097ae:	b928      	cbnz	r0, 80097bc <__pow5mult+0x40>
 80097b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009828 <__pow5mult+0xac>)
 80097b2:	481e      	ldr	r0, [pc, #120]	@ (800982c <__pow5mult+0xb0>)
 80097b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80097b8:	f000 fb82 	bl	8009ec0 <__assert_func>
 80097bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097c0:	6004      	str	r4, [r0, #0]
 80097c2:	60c4      	str	r4, [r0, #12]
 80097c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80097c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097cc:	b94c      	cbnz	r4, 80097e2 <__pow5mult+0x66>
 80097ce:	f240 2171 	movw	r1, #625	@ 0x271
 80097d2:	4638      	mov	r0, r7
 80097d4:	f7ff ff12 	bl	80095fc <__i2b>
 80097d8:	2300      	movs	r3, #0
 80097da:	f8c8 0008 	str.w	r0, [r8, #8]
 80097de:	4604      	mov	r4, r0
 80097e0:	6003      	str	r3, [r0, #0]
 80097e2:	f04f 0900 	mov.w	r9, #0
 80097e6:	07eb      	lsls	r3, r5, #31
 80097e8:	d50a      	bpl.n	8009800 <__pow5mult+0x84>
 80097ea:	4631      	mov	r1, r6
 80097ec:	4622      	mov	r2, r4
 80097ee:	4638      	mov	r0, r7
 80097f0:	f7ff ff1a 	bl	8009628 <__multiply>
 80097f4:	4631      	mov	r1, r6
 80097f6:	4680      	mov	r8, r0
 80097f8:	4638      	mov	r0, r7
 80097fa:	f7ff fe01 	bl	8009400 <_Bfree>
 80097fe:	4646      	mov	r6, r8
 8009800:	106d      	asrs	r5, r5, #1
 8009802:	d00b      	beq.n	800981c <__pow5mult+0xa0>
 8009804:	6820      	ldr	r0, [r4, #0]
 8009806:	b938      	cbnz	r0, 8009818 <__pow5mult+0x9c>
 8009808:	4622      	mov	r2, r4
 800980a:	4621      	mov	r1, r4
 800980c:	4638      	mov	r0, r7
 800980e:	f7ff ff0b 	bl	8009628 <__multiply>
 8009812:	6020      	str	r0, [r4, #0]
 8009814:	f8c0 9000 	str.w	r9, [r0]
 8009818:	4604      	mov	r4, r0
 800981a:	e7e4      	b.n	80097e6 <__pow5mult+0x6a>
 800981c:	4630      	mov	r0, r6
 800981e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009822:	bf00      	nop
 8009824:	0800b080 	.word	0x0800b080
 8009828:	0800af36 	.word	0x0800af36
 800982c:	0800b027 	.word	0x0800b027

08009830 <__lshift>:
 8009830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009834:	460c      	mov	r4, r1
 8009836:	6849      	ldr	r1, [r1, #4]
 8009838:	6923      	ldr	r3, [r4, #16]
 800983a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800983e:	68a3      	ldr	r3, [r4, #8]
 8009840:	4607      	mov	r7, r0
 8009842:	4691      	mov	r9, r2
 8009844:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009848:	f108 0601 	add.w	r6, r8, #1
 800984c:	42b3      	cmp	r3, r6
 800984e:	db0b      	blt.n	8009868 <__lshift+0x38>
 8009850:	4638      	mov	r0, r7
 8009852:	f7ff fd95 	bl	8009380 <_Balloc>
 8009856:	4605      	mov	r5, r0
 8009858:	b948      	cbnz	r0, 800986e <__lshift+0x3e>
 800985a:	4602      	mov	r2, r0
 800985c:	4b28      	ldr	r3, [pc, #160]	@ (8009900 <__lshift+0xd0>)
 800985e:	4829      	ldr	r0, [pc, #164]	@ (8009904 <__lshift+0xd4>)
 8009860:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009864:	f000 fb2c 	bl	8009ec0 <__assert_func>
 8009868:	3101      	adds	r1, #1
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	e7ee      	b.n	800984c <__lshift+0x1c>
 800986e:	2300      	movs	r3, #0
 8009870:	f100 0114 	add.w	r1, r0, #20
 8009874:	f100 0210 	add.w	r2, r0, #16
 8009878:	4618      	mov	r0, r3
 800987a:	4553      	cmp	r3, sl
 800987c:	db33      	blt.n	80098e6 <__lshift+0xb6>
 800987e:	6920      	ldr	r0, [r4, #16]
 8009880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009884:	f104 0314 	add.w	r3, r4, #20
 8009888:	f019 091f 	ands.w	r9, r9, #31
 800988c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009890:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009894:	d02b      	beq.n	80098ee <__lshift+0xbe>
 8009896:	f1c9 0e20 	rsb	lr, r9, #32
 800989a:	468a      	mov	sl, r1
 800989c:	2200      	movs	r2, #0
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	fa00 f009 	lsl.w	r0, r0, r9
 80098a4:	4310      	orrs	r0, r2
 80098a6:	f84a 0b04 	str.w	r0, [sl], #4
 80098aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ae:	459c      	cmp	ip, r3
 80098b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80098b4:	d8f3      	bhi.n	800989e <__lshift+0x6e>
 80098b6:	ebac 0304 	sub.w	r3, ip, r4
 80098ba:	3b15      	subs	r3, #21
 80098bc:	f023 0303 	bic.w	r3, r3, #3
 80098c0:	3304      	adds	r3, #4
 80098c2:	f104 0015 	add.w	r0, r4, #21
 80098c6:	4584      	cmp	ip, r0
 80098c8:	bf38      	it	cc
 80098ca:	2304      	movcc	r3, #4
 80098cc:	50ca      	str	r2, [r1, r3]
 80098ce:	b10a      	cbz	r2, 80098d4 <__lshift+0xa4>
 80098d0:	f108 0602 	add.w	r6, r8, #2
 80098d4:	3e01      	subs	r6, #1
 80098d6:	4638      	mov	r0, r7
 80098d8:	612e      	str	r6, [r5, #16]
 80098da:	4621      	mov	r1, r4
 80098dc:	f7ff fd90 	bl	8009400 <_Bfree>
 80098e0:	4628      	mov	r0, r5
 80098e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ea:	3301      	adds	r3, #1
 80098ec:	e7c5      	b.n	800987a <__lshift+0x4a>
 80098ee:	3904      	subs	r1, #4
 80098f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80098f8:	459c      	cmp	ip, r3
 80098fa:	d8f9      	bhi.n	80098f0 <__lshift+0xc0>
 80098fc:	e7ea      	b.n	80098d4 <__lshift+0xa4>
 80098fe:	bf00      	nop
 8009900:	0800afa5 	.word	0x0800afa5
 8009904:	0800b027 	.word	0x0800b027

08009908 <__mcmp>:
 8009908:	690a      	ldr	r2, [r1, #16]
 800990a:	4603      	mov	r3, r0
 800990c:	6900      	ldr	r0, [r0, #16]
 800990e:	1a80      	subs	r0, r0, r2
 8009910:	b530      	push	{r4, r5, lr}
 8009912:	d10e      	bne.n	8009932 <__mcmp+0x2a>
 8009914:	3314      	adds	r3, #20
 8009916:	3114      	adds	r1, #20
 8009918:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800991c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009920:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009924:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009928:	4295      	cmp	r5, r2
 800992a:	d003      	beq.n	8009934 <__mcmp+0x2c>
 800992c:	d205      	bcs.n	800993a <__mcmp+0x32>
 800992e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009932:	bd30      	pop	{r4, r5, pc}
 8009934:	42a3      	cmp	r3, r4
 8009936:	d3f3      	bcc.n	8009920 <__mcmp+0x18>
 8009938:	e7fb      	b.n	8009932 <__mcmp+0x2a>
 800993a:	2001      	movs	r0, #1
 800993c:	e7f9      	b.n	8009932 <__mcmp+0x2a>
	...

08009940 <__mdiff>:
 8009940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	4689      	mov	r9, r1
 8009946:	4606      	mov	r6, r0
 8009948:	4611      	mov	r1, r2
 800994a:	4648      	mov	r0, r9
 800994c:	4614      	mov	r4, r2
 800994e:	f7ff ffdb 	bl	8009908 <__mcmp>
 8009952:	1e05      	subs	r5, r0, #0
 8009954:	d112      	bne.n	800997c <__mdiff+0x3c>
 8009956:	4629      	mov	r1, r5
 8009958:	4630      	mov	r0, r6
 800995a:	f7ff fd11 	bl	8009380 <_Balloc>
 800995e:	4602      	mov	r2, r0
 8009960:	b928      	cbnz	r0, 800996e <__mdiff+0x2e>
 8009962:	4b3f      	ldr	r3, [pc, #252]	@ (8009a60 <__mdiff+0x120>)
 8009964:	f240 2137 	movw	r1, #567	@ 0x237
 8009968:	483e      	ldr	r0, [pc, #248]	@ (8009a64 <__mdiff+0x124>)
 800996a:	f000 faa9 	bl	8009ec0 <__assert_func>
 800996e:	2301      	movs	r3, #1
 8009970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009974:	4610      	mov	r0, r2
 8009976:	b003      	add	sp, #12
 8009978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997c:	bfbc      	itt	lt
 800997e:	464b      	movlt	r3, r9
 8009980:	46a1      	movlt	r9, r4
 8009982:	4630      	mov	r0, r6
 8009984:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009988:	bfba      	itte	lt
 800998a:	461c      	movlt	r4, r3
 800998c:	2501      	movlt	r5, #1
 800998e:	2500      	movge	r5, #0
 8009990:	f7ff fcf6 	bl	8009380 <_Balloc>
 8009994:	4602      	mov	r2, r0
 8009996:	b918      	cbnz	r0, 80099a0 <__mdiff+0x60>
 8009998:	4b31      	ldr	r3, [pc, #196]	@ (8009a60 <__mdiff+0x120>)
 800999a:	f240 2145 	movw	r1, #581	@ 0x245
 800999e:	e7e3      	b.n	8009968 <__mdiff+0x28>
 80099a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80099a4:	6926      	ldr	r6, [r4, #16]
 80099a6:	60c5      	str	r5, [r0, #12]
 80099a8:	f109 0310 	add.w	r3, r9, #16
 80099ac:	f109 0514 	add.w	r5, r9, #20
 80099b0:	f104 0e14 	add.w	lr, r4, #20
 80099b4:	f100 0b14 	add.w	fp, r0, #20
 80099b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80099bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80099c0:	9301      	str	r3, [sp, #4]
 80099c2:	46d9      	mov	r9, fp
 80099c4:	f04f 0c00 	mov.w	ip, #0
 80099c8:	9b01      	ldr	r3, [sp, #4]
 80099ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80099ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80099d2:	9301      	str	r3, [sp, #4]
 80099d4:	fa1f f38a 	uxth.w	r3, sl
 80099d8:	4619      	mov	r1, r3
 80099da:	b283      	uxth	r3, r0
 80099dc:	1acb      	subs	r3, r1, r3
 80099de:	0c00      	lsrs	r0, r0, #16
 80099e0:	4463      	add	r3, ip
 80099e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80099e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80099f0:	4576      	cmp	r6, lr
 80099f2:	f849 3b04 	str.w	r3, [r9], #4
 80099f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099fa:	d8e5      	bhi.n	80099c8 <__mdiff+0x88>
 80099fc:	1b33      	subs	r3, r6, r4
 80099fe:	3b15      	subs	r3, #21
 8009a00:	f023 0303 	bic.w	r3, r3, #3
 8009a04:	3415      	adds	r4, #21
 8009a06:	3304      	adds	r3, #4
 8009a08:	42a6      	cmp	r6, r4
 8009a0a:	bf38      	it	cc
 8009a0c:	2304      	movcc	r3, #4
 8009a0e:	441d      	add	r5, r3
 8009a10:	445b      	add	r3, fp
 8009a12:	461e      	mov	r6, r3
 8009a14:	462c      	mov	r4, r5
 8009a16:	4544      	cmp	r4, r8
 8009a18:	d30e      	bcc.n	8009a38 <__mdiff+0xf8>
 8009a1a:	f108 0103 	add.w	r1, r8, #3
 8009a1e:	1b49      	subs	r1, r1, r5
 8009a20:	f021 0103 	bic.w	r1, r1, #3
 8009a24:	3d03      	subs	r5, #3
 8009a26:	45a8      	cmp	r8, r5
 8009a28:	bf38      	it	cc
 8009a2a:	2100      	movcc	r1, #0
 8009a2c:	440b      	add	r3, r1
 8009a2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a32:	b191      	cbz	r1, 8009a5a <__mdiff+0x11a>
 8009a34:	6117      	str	r7, [r2, #16]
 8009a36:	e79d      	b.n	8009974 <__mdiff+0x34>
 8009a38:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a3c:	46e6      	mov	lr, ip
 8009a3e:	0c08      	lsrs	r0, r1, #16
 8009a40:	fa1c fc81 	uxtah	ip, ip, r1
 8009a44:	4471      	add	r1, lr
 8009a46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009a4a:	b289      	uxth	r1, r1
 8009a4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a50:	f846 1b04 	str.w	r1, [r6], #4
 8009a54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a58:	e7dd      	b.n	8009a16 <__mdiff+0xd6>
 8009a5a:	3f01      	subs	r7, #1
 8009a5c:	e7e7      	b.n	8009a2e <__mdiff+0xee>
 8009a5e:	bf00      	nop
 8009a60:	0800afa5 	.word	0x0800afa5
 8009a64:	0800b027 	.word	0x0800b027

08009a68 <__ulp>:
 8009a68:	b082      	sub	sp, #8
 8009a6a:	ed8d 0b00 	vstr	d0, [sp]
 8009a6e:	9a01      	ldr	r2, [sp, #4]
 8009a70:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab0 <__ulp+0x48>)
 8009a72:	4013      	ands	r3, r2
 8009a74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	dc08      	bgt.n	8009a8e <__ulp+0x26>
 8009a7c:	425b      	negs	r3, r3
 8009a7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009a82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a86:	da04      	bge.n	8009a92 <__ulp+0x2a>
 8009a88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009a8c:	4113      	asrs	r3, r2
 8009a8e:	2200      	movs	r2, #0
 8009a90:	e008      	b.n	8009aa4 <__ulp+0x3c>
 8009a92:	f1a2 0314 	sub.w	r3, r2, #20
 8009a96:	2b1e      	cmp	r3, #30
 8009a98:	bfda      	itte	le
 8009a9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009a9e:	40da      	lsrle	r2, r3
 8009aa0:	2201      	movgt	r2, #1
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	ec41 0b10 	vmov	d0, r0, r1
 8009aac:	b002      	add	sp, #8
 8009aae:	4770      	bx	lr
 8009ab0:	7ff00000 	.word	0x7ff00000

08009ab4 <__b2d>:
 8009ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab8:	6906      	ldr	r6, [r0, #16]
 8009aba:	f100 0814 	add.w	r8, r0, #20
 8009abe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009ac2:	1f37      	subs	r7, r6, #4
 8009ac4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ac8:	4610      	mov	r0, r2
 8009aca:	f7ff fd4b 	bl	8009564 <__hi0bits>
 8009ace:	f1c0 0320 	rsb	r3, r0, #32
 8009ad2:	280a      	cmp	r0, #10
 8009ad4:	600b      	str	r3, [r1, #0]
 8009ad6:	491b      	ldr	r1, [pc, #108]	@ (8009b44 <__b2d+0x90>)
 8009ad8:	dc15      	bgt.n	8009b06 <__b2d+0x52>
 8009ada:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ade:	fa22 f30c 	lsr.w	r3, r2, ip
 8009ae2:	45b8      	cmp	r8, r7
 8009ae4:	ea43 0501 	orr.w	r5, r3, r1
 8009ae8:	bf34      	ite	cc
 8009aea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009aee:	2300      	movcs	r3, #0
 8009af0:	3015      	adds	r0, #21
 8009af2:	fa02 f000 	lsl.w	r0, r2, r0
 8009af6:	fa23 f30c 	lsr.w	r3, r3, ip
 8009afa:	4303      	orrs	r3, r0
 8009afc:	461c      	mov	r4, r3
 8009afe:	ec45 4b10 	vmov	d0, r4, r5
 8009b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b06:	45b8      	cmp	r8, r7
 8009b08:	bf3a      	itte	cc
 8009b0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b0e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009b12:	2300      	movcs	r3, #0
 8009b14:	380b      	subs	r0, #11
 8009b16:	d012      	beq.n	8009b3e <__b2d+0x8a>
 8009b18:	f1c0 0120 	rsb	r1, r0, #32
 8009b1c:	fa23 f401 	lsr.w	r4, r3, r1
 8009b20:	4082      	lsls	r2, r0
 8009b22:	4322      	orrs	r2, r4
 8009b24:	4547      	cmp	r7, r8
 8009b26:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009b2a:	bf8c      	ite	hi
 8009b2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009b30:	2200      	movls	r2, #0
 8009b32:	4083      	lsls	r3, r0
 8009b34:	40ca      	lsrs	r2, r1
 8009b36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	e7de      	b.n	8009afc <__b2d+0x48>
 8009b3e:	ea42 0501 	orr.w	r5, r2, r1
 8009b42:	e7db      	b.n	8009afc <__b2d+0x48>
 8009b44:	3ff00000 	.word	0x3ff00000

08009b48 <__d2b>:
 8009b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	2101      	movs	r1, #1
 8009b50:	ec59 8b10 	vmov	r8, r9, d0
 8009b54:	4616      	mov	r6, r2
 8009b56:	f7ff fc13 	bl	8009380 <_Balloc>
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	b930      	cbnz	r0, 8009b6c <__d2b+0x24>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	4b23      	ldr	r3, [pc, #140]	@ (8009bf0 <__d2b+0xa8>)
 8009b62:	4824      	ldr	r0, [pc, #144]	@ (8009bf4 <__d2b+0xac>)
 8009b64:	f240 310f 	movw	r1, #783	@ 0x30f
 8009b68:	f000 f9aa 	bl	8009ec0 <__assert_func>
 8009b6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b74:	b10d      	cbz	r5, 8009b7a <__d2b+0x32>
 8009b76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b7a:	9301      	str	r3, [sp, #4]
 8009b7c:	f1b8 0300 	subs.w	r3, r8, #0
 8009b80:	d023      	beq.n	8009bca <__d2b+0x82>
 8009b82:	4668      	mov	r0, sp
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	f7ff fd0c 	bl	80095a2 <__lo0bits>
 8009b8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b8e:	b1d0      	cbz	r0, 8009bc6 <__d2b+0x7e>
 8009b90:	f1c0 0320 	rsb	r3, r0, #32
 8009b94:	fa02 f303 	lsl.w	r3, r2, r3
 8009b98:	430b      	orrs	r3, r1
 8009b9a:	40c2      	lsrs	r2, r0
 8009b9c:	6163      	str	r3, [r4, #20]
 8009b9e:	9201      	str	r2, [sp, #4]
 8009ba0:	9b01      	ldr	r3, [sp, #4]
 8009ba2:	61a3      	str	r3, [r4, #24]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bf0c      	ite	eq
 8009ba8:	2201      	moveq	r2, #1
 8009baa:	2202      	movne	r2, #2
 8009bac:	6122      	str	r2, [r4, #16]
 8009bae:	b1a5      	cbz	r5, 8009bda <__d2b+0x92>
 8009bb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009bb4:	4405      	add	r5, r0
 8009bb6:	603d      	str	r5, [r7, #0]
 8009bb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009bbc:	6030      	str	r0, [r6, #0]
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	b003      	add	sp, #12
 8009bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc6:	6161      	str	r1, [r4, #20]
 8009bc8:	e7ea      	b.n	8009ba0 <__d2b+0x58>
 8009bca:	a801      	add	r0, sp, #4
 8009bcc:	f7ff fce9 	bl	80095a2 <__lo0bits>
 8009bd0:	9b01      	ldr	r3, [sp, #4]
 8009bd2:	6163      	str	r3, [r4, #20]
 8009bd4:	3020      	adds	r0, #32
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	e7e8      	b.n	8009bac <__d2b+0x64>
 8009bda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009bde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009be2:	6038      	str	r0, [r7, #0]
 8009be4:	6918      	ldr	r0, [r3, #16]
 8009be6:	f7ff fcbd 	bl	8009564 <__hi0bits>
 8009bea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bee:	e7e5      	b.n	8009bbc <__d2b+0x74>
 8009bf0:	0800afa5 	.word	0x0800afa5
 8009bf4:	0800b027 	.word	0x0800b027

08009bf8 <__ratio>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	b085      	sub	sp, #20
 8009bfe:	e9cd 1000 	strd	r1, r0, [sp]
 8009c02:	a902      	add	r1, sp, #8
 8009c04:	f7ff ff56 	bl	8009ab4 <__b2d>
 8009c08:	9800      	ldr	r0, [sp, #0]
 8009c0a:	a903      	add	r1, sp, #12
 8009c0c:	ec55 4b10 	vmov	r4, r5, d0
 8009c10:	f7ff ff50 	bl	8009ab4 <__b2d>
 8009c14:	9b01      	ldr	r3, [sp, #4]
 8009c16:	6919      	ldr	r1, [r3, #16]
 8009c18:	9b00      	ldr	r3, [sp, #0]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	1ac9      	subs	r1, r1, r3
 8009c1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009c22:	1a9b      	subs	r3, r3, r2
 8009c24:	ec5b ab10 	vmov	sl, fp, d0
 8009c28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	bfce      	itee	gt
 8009c30:	462a      	movgt	r2, r5
 8009c32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c36:	465a      	movle	r2, fp
 8009c38:	462f      	mov	r7, r5
 8009c3a:	46d9      	mov	r9, fp
 8009c3c:	bfcc      	ite	gt
 8009c3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c42:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009c46:	464b      	mov	r3, r9
 8009c48:	4652      	mov	r2, sl
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	f7f6 fe0d 	bl	800086c <__aeabi_ddiv>
 8009c52:	ec41 0b10 	vmov	d0, r0, r1
 8009c56:	b005      	add	sp, #20
 8009c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c5c <__copybits>:
 8009c5c:	3901      	subs	r1, #1
 8009c5e:	b570      	push	{r4, r5, r6, lr}
 8009c60:	1149      	asrs	r1, r1, #5
 8009c62:	6914      	ldr	r4, [r2, #16]
 8009c64:	3101      	adds	r1, #1
 8009c66:	f102 0314 	add.w	r3, r2, #20
 8009c6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c72:	1f05      	subs	r5, r0, #4
 8009c74:	42a3      	cmp	r3, r4
 8009c76:	d30c      	bcc.n	8009c92 <__copybits+0x36>
 8009c78:	1aa3      	subs	r3, r4, r2
 8009c7a:	3b11      	subs	r3, #17
 8009c7c:	f023 0303 	bic.w	r3, r3, #3
 8009c80:	3211      	adds	r2, #17
 8009c82:	42a2      	cmp	r2, r4
 8009c84:	bf88      	it	hi
 8009c86:	2300      	movhi	r3, #0
 8009c88:	4418      	add	r0, r3
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4288      	cmp	r0, r1
 8009c8e:	d305      	bcc.n	8009c9c <__copybits+0x40>
 8009c90:	bd70      	pop	{r4, r5, r6, pc}
 8009c92:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c96:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c9a:	e7eb      	b.n	8009c74 <__copybits+0x18>
 8009c9c:	f840 3b04 	str.w	r3, [r0], #4
 8009ca0:	e7f4      	b.n	8009c8c <__copybits+0x30>

08009ca2 <__any_on>:
 8009ca2:	f100 0214 	add.w	r2, r0, #20
 8009ca6:	6900      	ldr	r0, [r0, #16]
 8009ca8:	114b      	asrs	r3, r1, #5
 8009caa:	4298      	cmp	r0, r3
 8009cac:	b510      	push	{r4, lr}
 8009cae:	db11      	blt.n	8009cd4 <__any_on+0x32>
 8009cb0:	dd0a      	ble.n	8009cc8 <__any_on+0x26>
 8009cb2:	f011 011f 	ands.w	r1, r1, #31
 8009cb6:	d007      	beq.n	8009cc8 <__any_on+0x26>
 8009cb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009cbc:	fa24 f001 	lsr.w	r0, r4, r1
 8009cc0:	fa00 f101 	lsl.w	r1, r0, r1
 8009cc4:	428c      	cmp	r4, r1
 8009cc6:	d10b      	bne.n	8009ce0 <__any_on+0x3e>
 8009cc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d803      	bhi.n	8009cd8 <__any_on+0x36>
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	bd10      	pop	{r4, pc}
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	e7f7      	b.n	8009cc8 <__any_on+0x26>
 8009cd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cdc:	2900      	cmp	r1, #0
 8009cde:	d0f5      	beq.n	8009ccc <__any_on+0x2a>
 8009ce0:	2001      	movs	r0, #1
 8009ce2:	e7f6      	b.n	8009cd2 <__any_on+0x30>

08009ce4 <__sread>:
 8009ce4:	b510      	push	{r4, lr}
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cec:	f000 f8b4 	bl	8009e58 <_read_r>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	bfab      	itete	ge
 8009cf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8009cf8:	181b      	addge	r3, r3, r0
 8009cfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009cfe:	bfac      	ite	ge
 8009d00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d02:	81a3      	strhlt	r3, [r4, #12]
 8009d04:	bd10      	pop	{r4, pc}

08009d06 <__swrite>:
 8009d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0a:	461f      	mov	r7, r3
 8009d0c:	898b      	ldrh	r3, [r1, #12]
 8009d0e:	05db      	lsls	r3, r3, #23
 8009d10:	4605      	mov	r5, r0
 8009d12:	460c      	mov	r4, r1
 8009d14:	4616      	mov	r6, r2
 8009d16:	d505      	bpl.n	8009d24 <__swrite+0x1e>
 8009d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f000 f888 	bl	8009e34 <_lseek_r>
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d2e:	81a3      	strh	r3, [r4, #12]
 8009d30:	4632      	mov	r2, r6
 8009d32:	463b      	mov	r3, r7
 8009d34:	4628      	mov	r0, r5
 8009d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3a:	f000 b8af 	b.w	8009e9c <_write_r>

08009d3e <__sseek>:
 8009d3e:	b510      	push	{r4, lr}
 8009d40:	460c      	mov	r4, r1
 8009d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d46:	f000 f875 	bl	8009e34 <_lseek_r>
 8009d4a:	1c43      	adds	r3, r0, #1
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	bf15      	itete	ne
 8009d50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d5a:	81a3      	strheq	r3, [r4, #12]
 8009d5c:	bf18      	it	ne
 8009d5e:	81a3      	strhne	r3, [r4, #12]
 8009d60:	bd10      	pop	{r4, pc}

08009d62 <__sclose>:
 8009d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d66:	f000 b855 	b.w	8009e14 <_close_r>

08009d6a <_realloc_r>:
 8009d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6e:	4680      	mov	r8, r0
 8009d70:	4615      	mov	r5, r2
 8009d72:	460c      	mov	r4, r1
 8009d74:	b921      	cbnz	r1, 8009d80 <_realloc_r+0x16>
 8009d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7a:	4611      	mov	r1, r2
 8009d7c:	f7ff b9b6 	b.w	80090ec <_malloc_r>
 8009d80:	b92a      	cbnz	r2, 8009d8e <_realloc_r+0x24>
 8009d82:	f000 f8cf 	bl	8009f24 <_free_r>
 8009d86:	2400      	movs	r4, #0
 8009d88:	4620      	mov	r0, r4
 8009d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d8e:	f000 f913 	bl	8009fb8 <_malloc_usable_size_r>
 8009d92:	4285      	cmp	r5, r0
 8009d94:	4606      	mov	r6, r0
 8009d96:	d802      	bhi.n	8009d9e <_realloc_r+0x34>
 8009d98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d9c:	d8f4      	bhi.n	8009d88 <_realloc_r+0x1e>
 8009d9e:	4629      	mov	r1, r5
 8009da0:	4640      	mov	r0, r8
 8009da2:	f7ff f9a3 	bl	80090ec <_malloc_r>
 8009da6:	4607      	mov	r7, r0
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d0ec      	beq.n	8009d86 <_realloc_r+0x1c>
 8009dac:	42b5      	cmp	r5, r6
 8009dae:	462a      	mov	r2, r5
 8009db0:	4621      	mov	r1, r4
 8009db2:	bf28      	it	cs
 8009db4:	4632      	movcs	r2, r6
 8009db6:	f7fd fe72 	bl	8007a9e <memcpy>
 8009dba:	4621      	mov	r1, r4
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	f000 f8b1 	bl	8009f24 <_free_r>
 8009dc2:	463c      	mov	r4, r7
 8009dc4:	e7e0      	b.n	8009d88 <_realloc_r+0x1e>

08009dc6 <__ascii_wctomb>:
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	4608      	mov	r0, r1
 8009dca:	b141      	cbz	r1, 8009dde <__ascii_wctomb+0x18>
 8009dcc:	2aff      	cmp	r2, #255	@ 0xff
 8009dce:	d904      	bls.n	8009dda <__ascii_wctomb+0x14>
 8009dd0:	228a      	movs	r2, #138	@ 0x8a
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dd8:	4770      	bx	lr
 8009dda:	700a      	strb	r2, [r1, #0]
 8009ddc:	2001      	movs	r0, #1
 8009dde:	4770      	bx	lr

08009de0 <memmove>:
 8009de0:	4288      	cmp	r0, r1
 8009de2:	b510      	push	{r4, lr}
 8009de4:	eb01 0402 	add.w	r4, r1, r2
 8009de8:	d902      	bls.n	8009df0 <memmove+0x10>
 8009dea:	4284      	cmp	r4, r0
 8009dec:	4623      	mov	r3, r4
 8009dee:	d807      	bhi.n	8009e00 <memmove+0x20>
 8009df0:	1e43      	subs	r3, r0, #1
 8009df2:	42a1      	cmp	r1, r4
 8009df4:	d008      	beq.n	8009e08 <memmove+0x28>
 8009df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dfe:	e7f8      	b.n	8009df2 <memmove+0x12>
 8009e00:	4402      	add	r2, r0
 8009e02:	4601      	mov	r1, r0
 8009e04:	428a      	cmp	r2, r1
 8009e06:	d100      	bne.n	8009e0a <memmove+0x2a>
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e12:	e7f7      	b.n	8009e04 <memmove+0x24>

08009e14 <_close_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d06      	ldr	r5, [pc, #24]	@ (8009e30 <_close_r+0x1c>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	f7f7 ffb8 	bl	8001d94 <_close>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_close_r+0x1a>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_close_r+0x1a>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	20000448 	.word	0x20000448

08009e34 <_lseek_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	@ (8009e54 <_lseek_r+0x20>)
 8009e38:	4604      	mov	r4, r0
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7f7 ffcd 	bl	8001de2 <_lseek>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_lseek_r+0x1e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_lseek_r+0x1e>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	20000448 	.word	0x20000448

08009e58 <_read_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d07      	ldr	r5, [pc, #28]	@ (8009e78 <_read_r+0x20>)
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	4608      	mov	r0, r1
 8009e60:	4611      	mov	r1, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	602a      	str	r2, [r5, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f7f7 ff5b 	bl	8001d22 <_read>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_read_r+0x1e>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_read_r+0x1e>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	20000448 	.word	0x20000448

08009e7c <_sbrk_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d06      	ldr	r5, [pc, #24]	@ (8009e98 <_sbrk_r+0x1c>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	f7f7 ffb8 	bl	8001dfc <_sbrk>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_sbrk_r+0x1a>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_sbrk_r+0x1a>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	20000448 	.word	0x20000448

08009e9c <_write_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d07      	ldr	r5, [pc, #28]	@ (8009ebc <_write_r+0x20>)
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	602a      	str	r2, [r5, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f7f7 ff56 	bl	8001d5c <_write>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d102      	bne.n	8009eba <_write_r+0x1e>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	b103      	cbz	r3, 8009eba <_write_r+0x1e>
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	20000448 	.word	0x20000448

08009ec0 <__assert_func>:
 8009ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ec2:	4614      	mov	r4, r2
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	4b09      	ldr	r3, [pc, #36]	@ (8009eec <__assert_func+0x2c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4605      	mov	r5, r0
 8009ecc:	68d8      	ldr	r0, [r3, #12]
 8009ece:	b954      	cbnz	r4, 8009ee6 <__assert_func+0x26>
 8009ed0:	4b07      	ldr	r3, [pc, #28]	@ (8009ef0 <__assert_func+0x30>)
 8009ed2:	461c      	mov	r4, r3
 8009ed4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ed8:	9100      	str	r1, [sp, #0]
 8009eda:	462b      	mov	r3, r5
 8009edc:	4905      	ldr	r1, [pc, #20]	@ (8009ef4 <__assert_func+0x34>)
 8009ede:	f000 f873 	bl	8009fc8 <fiprintf>
 8009ee2:	f000 f883 	bl	8009fec <abort>
 8009ee6:	4b04      	ldr	r3, [pc, #16]	@ (8009ef8 <__assert_func+0x38>)
 8009ee8:	e7f4      	b.n	8009ed4 <__assert_func+0x14>
 8009eea:	bf00      	nop
 8009eec:	2000018c 	.word	0x2000018c
 8009ef0:	0800b1bb 	.word	0x0800b1bb
 8009ef4:	0800b18d 	.word	0x0800b18d
 8009ef8:	0800b180 	.word	0x0800b180

08009efc <_calloc_r>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	fba1 5402 	umull	r5, r4, r1, r2
 8009f02:	b93c      	cbnz	r4, 8009f14 <_calloc_r+0x18>
 8009f04:	4629      	mov	r1, r5
 8009f06:	f7ff f8f1 	bl	80090ec <_malloc_r>
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	b928      	cbnz	r0, 8009f1a <_calloc_r+0x1e>
 8009f0e:	2600      	movs	r6, #0
 8009f10:	4630      	mov	r0, r6
 8009f12:	bd70      	pop	{r4, r5, r6, pc}
 8009f14:	220c      	movs	r2, #12
 8009f16:	6002      	str	r2, [r0, #0]
 8009f18:	e7f9      	b.n	8009f0e <_calloc_r+0x12>
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	f7fd fd85 	bl	8007a2c <memset>
 8009f22:	e7f5      	b.n	8009f10 <_calloc_r+0x14>

08009f24 <_free_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4605      	mov	r5, r0
 8009f28:	2900      	cmp	r1, #0
 8009f2a:	d041      	beq.n	8009fb0 <_free_r+0x8c>
 8009f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f30:	1f0c      	subs	r4, r1, #4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	bfb8      	it	lt
 8009f36:	18e4      	addlt	r4, r4, r3
 8009f38:	f7ff fa16 	bl	8009368 <__malloc_lock>
 8009f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009fb4 <_free_r+0x90>)
 8009f3e:	6813      	ldr	r3, [r2, #0]
 8009f40:	b933      	cbnz	r3, 8009f50 <_free_r+0x2c>
 8009f42:	6063      	str	r3, [r4, #4]
 8009f44:	6014      	str	r4, [r2, #0]
 8009f46:	4628      	mov	r0, r5
 8009f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f4c:	f7ff ba12 	b.w	8009374 <__malloc_unlock>
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	d908      	bls.n	8009f66 <_free_r+0x42>
 8009f54:	6820      	ldr	r0, [r4, #0]
 8009f56:	1821      	adds	r1, r4, r0
 8009f58:	428b      	cmp	r3, r1
 8009f5a:	bf01      	itttt	eq
 8009f5c:	6819      	ldreq	r1, [r3, #0]
 8009f5e:	685b      	ldreq	r3, [r3, #4]
 8009f60:	1809      	addeq	r1, r1, r0
 8009f62:	6021      	streq	r1, [r4, #0]
 8009f64:	e7ed      	b.n	8009f42 <_free_r+0x1e>
 8009f66:	461a      	mov	r2, r3
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	b10b      	cbz	r3, 8009f70 <_free_r+0x4c>
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d9fa      	bls.n	8009f66 <_free_r+0x42>
 8009f70:	6811      	ldr	r1, [r2, #0]
 8009f72:	1850      	adds	r0, r2, r1
 8009f74:	42a0      	cmp	r0, r4
 8009f76:	d10b      	bne.n	8009f90 <_free_r+0x6c>
 8009f78:	6820      	ldr	r0, [r4, #0]
 8009f7a:	4401      	add	r1, r0
 8009f7c:	1850      	adds	r0, r2, r1
 8009f7e:	4283      	cmp	r3, r0
 8009f80:	6011      	str	r1, [r2, #0]
 8009f82:	d1e0      	bne.n	8009f46 <_free_r+0x22>
 8009f84:	6818      	ldr	r0, [r3, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	6053      	str	r3, [r2, #4]
 8009f8a:	4408      	add	r0, r1
 8009f8c:	6010      	str	r0, [r2, #0]
 8009f8e:	e7da      	b.n	8009f46 <_free_r+0x22>
 8009f90:	d902      	bls.n	8009f98 <_free_r+0x74>
 8009f92:	230c      	movs	r3, #12
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	e7d6      	b.n	8009f46 <_free_r+0x22>
 8009f98:	6820      	ldr	r0, [r4, #0]
 8009f9a:	1821      	adds	r1, r4, r0
 8009f9c:	428b      	cmp	r3, r1
 8009f9e:	bf04      	itt	eq
 8009fa0:	6819      	ldreq	r1, [r3, #0]
 8009fa2:	685b      	ldreq	r3, [r3, #4]
 8009fa4:	6063      	str	r3, [r4, #4]
 8009fa6:	bf04      	itt	eq
 8009fa8:	1809      	addeq	r1, r1, r0
 8009faa:	6021      	streq	r1, [r4, #0]
 8009fac:	6054      	str	r4, [r2, #4]
 8009fae:	e7ca      	b.n	8009f46 <_free_r+0x22>
 8009fb0:	bd38      	pop	{r3, r4, r5, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20000444 	.word	0x20000444

08009fb8 <_malloc_usable_size_r>:
 8009fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fbc:	1f18      	subs	r0, r3, #4
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	bfbc      	itt	lt
 8009fc2:	580b      	ldrlt	r3, [r1, r0]
 8009fc4:	18c0      	addlt	r0, r0, r3
 8009fc6:	4770      	bx	lr

08009fc8 <fiprintf>:
 8009fc8:	b40e      	push	{r1, r2, r3}
 8009fca:	b503      	push	{r0, r1, lr}
 8009fcc:	4601      	mov	r1, r0
 8009fce:	ab03      	add	r3, sp, #12
 8009fd0:	4805      	ldr	r0, [pc, #20]	@ (8009fe8 <fiprintf+0x20>)
 8009fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd6:	6800      	ldr	r0, [r0, #0]
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	f000 f837 	bl	800a04c <_vfiprintf_r>
 8009fde:	b002      	add	sp, #8
 8009fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fe4:	b003      	add	sp, #12
 8009fe6:	4770      	bx	lr
 8009fe8:	2000018c 	.word	0x2000018c

08009fec <abort>:
 8009fec:	b508      	push	{r3, lr}
 8009fee:	2006      	movs	r0, #6
 8009ff0:	f000 fa84 	bl	800a4fc <raise>
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	f7f7 fe89 	bl	8001d0c <_exit>

08009ffa <__sfputc_r>:
 8009ffa:	6893      	ldr	r3, [r2, #8]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	b410      	push	{r4}
 800a002:	6093      	str	r3, [r2, #8]
 800a004:	da08      	bge.n	800a018 <__sfputc_r+0x1e>
 800a006:	6994      	ldr	r4, [r2, #24]
 800a008:	42a3      	cmp	r3, r4
 800a00a:	db01      	blt.n	800a010 <__sfputc_r+0x16>
 800a00c:	290a      	cmp	r1, #10
 800a00e:	d103      	bne.n	800a018 <__sfputc_r+0x1e>
 800a010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a014:	f000 b932 	b.w	800a27c <__swbuf_r>
 800a018:	6813      	ldr	r3, [r2, #0]
 800a01a:	1c58      	adds	r0, r3, #1
 800a01c:	6010      	str	r0, [r2, #0]
 800a01e:	7019      	strb	r1, [r3, #0]
 800a020:	4608      	mov	r0, r1
 800a022:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <__sfputs_r>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	4606      	mov	r6, r0
 800a02c:	460f      	mov	r7, r1
 800a02e:	4614      	mov	r4, r2
 800a030:	18d5      	adds	r5, r2, r3
 800a032:	42ac      	cmp	r4, r5
 800a034:	d101      	bne.n	800a03a <__sfputs_r+0x12>
 800a036:	2000      	movs	r0, #0
 800a038:	e007      	b.n	800a04a <__sfputs_r+0x22>
 800a03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a03e:	463a      	mov	r2, r7
 800a040:	4630      	mov	r0, r6
 800a042:	f7ff ffda 	bl	8009ffa <__sfputc_r>
 800a046:	1c43      	adds	r3, r0, #1
 800a048:	d1f3      	bne.n	800a032 <__sfputs_r+0xa>
 800a04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a04c <_vfiprintf_r>:
 800a04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a050:	460d      	mov	r5, r1
 800a052:	b09d      	sub	sp, #116	@ 0x74
 800a054:	4614      	mov	r4, r2
 800a056:	4698      	mov	r8, r3
 800a058:	4606      	mov	r6, r0
 800a05a:	b118      	cbz	r0, 800a064 <_vfiprintf_r+0x18>
 800a05c:	6a03      	ldr	r3, [r0, #32]
 800a05e:	b90b      	cbnz	r3, 800a064 <_vfiprintf_r+0x18>
 800a060:	f7fc fe16 	bl	8006c90 <__sinit>
 800a064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a066:	07d9      	lsls	r1, r3, #31
 800a068:	d405      	bmi.n	800a076 <_vfiprintf_r+0x2a>
 800a06a:	89ab      	ldrh	r3, [r5, #12]
 800a06c:	059a      	lsls	r2, r3, #22
 800a06e:	d402      	bmi.n	800a076 <_vfiprintf_r+0x2a>
 800a070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a072:	f7fd fd12 	bl	8007a9a <__retarget_lock_acquire_recursive>
 800a076:	89ab      	ldrh	r3, [r5, #12]
 800a078:	071b      	lsls	r3, r3, #28
 800a07a:	d501      	bpl.n	800a080 <_vfiprintf_r+0x34>
 800a07c:	692b      	ldr	r3, [r5, #16]
 800a07e:	b99b      	cbnz	r3, 800a0a8 <_vfiprintf_r+0x5c>
 800a080:	4629      	mov	r1, r5
 800a082:	4630      	mov	r0, r6
 800a084:	f000 f938 	bl	800a2f8 <__swsetup_r>
 800a088:	b170      	cbz	r0, 800a0a8 <_vfiprintf_r+0x5c>
 800a08a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a08c:	07dc      	lsls	r4, r3, #31
 800a08e:	d504      	bpl.n	800a09a <_vfiprintf_r+0x4e>
 800a090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a094:	b01d      	add	sp, #116	@ 0x74
 800a096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09a:	89ab      	ldrh	r3, [r5, #12]
 800a09c:	0598      	lsls	r0, r3, #22
 800a09e:	d4f7      	bmi.n	800a090 <_vfiprintf_r+0x44>
 800a0a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0a2:	f7fd fcfb 	bl	8007a9c <__retarget_lock_release_recursive>
 800a0a6:	e7f3      	b.n	800a090 <_vfiprintf_r+0x44>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ac:	2320      	movs	r3, #32
 800a0ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0b6:	2330      	movs	r3, #48	@ 0x30
 800a0b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a268 <_vfiprintf_r+0x21c>
 800a0bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0c0:	f04f 0901 	mov.w	r9, #1
 800a0c4:	4623      	mov	r3, r4
 800a0c6:	469a      	mov	sl, r3
 800a0c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0cc:	b10a      	cbz	r2, 800a0d2 <_vfiprintf_r+0x86>
 800a0ce:	2a25      	cmp	r2, #37	@ 0x25
 800a0d0:	d1f9      	bne.n	800a0c6 <_vfiprintf_r+0x7a>
 800a0d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a0d6:	d00b      	beq.n	800a0f0 <_vfiprintf_r+0xa4>
 800a0d8:	465b      	mov	r3, fp
 800a0da:	4622      	mov	r2, r4
 800a0dc:	4629      	mov	r1, r5
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f7ff ffa2 	bl	800a028 <__sfputs_r>
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	f000 80a7 	beq.w	800a238 <_vfiprintf_r+0x1ec>
 800a0ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0ec:	445a      	add	r2, fp
 800a0ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 809f 	beq.w	800a238 <_vfiprintf_r+0x1ec>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a104:	f10a 0a01 	add.w	sl, sl, #1
 800a108:	9304      	str	r3, [sp, #16]
 800a10a:	9307      	str	r3, [sp, #28]
 800a10c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a110:	931a      	str	r3, [sp, #104]	@ 0x68
 800a112:	4654      	mov	r4, sl
 800a114:	2205      	movs	r2, #5
 800a116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a11a:	4853      	ldr	r0, [pc, #332]	@ (800a268 <_vfiprintf_r+0x21c>)
 800a11c:	f7f6 f868 	bl	80001f0 <memchr>
 800a120:	9a04      	ldr	r2, [sp, #16]
 800a122:	b9d8      	cbnz	r0, 800a15c <_vfiprintf_r+0x110>
 800a124:	06d1      	lsls	r1, r2, #27
 800a126:	bf44      	itt	mi
 800a128:	2320      	movmi	r3, #32
 800a12a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a12e:	0713      	lsls	r3, r2, #28
 800a130:	bf44      	itt	mi
 800a132:	232b      	movmi	r3, #43	@ 0x2b
 800a134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a138:	f89a 3000 	ldrb.w	r3, [sl]
 800a13c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a13e:	d015      	beq.n	800a16c <_vfiprintf_r+0x120>
 800a140:	9a07      	ldr	r2, [sp, #28]
 800a142:	4654      	mov	r4, sl
 800a144:	2000      	movs	r0, #0
 800a146:	f04f 0c0a 	mov.w	ip, #10
 800a14a:	4621      	mov	r1, r4
 800a14c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a150:	3b30      	subs	r3, #48	@ 0x30
 800a152:	2b09      	cmp	r3, #9
 800a154:	d94b      	bls.n	800a1ee <_vfiprintf_r+0x1a2>
 800a156:	b1b0      	cbz	r0, 800a186 <_vfiprintf_r+0x13a>
 800a158:	9207      	str	r2, [sp, #28]
 800a15a:	e014      	b.n	800a186 <_vfiprintf_r+0x13a>
 800a15c:	eba0 0308 	sub.w	r3, r0, r8
 800a160:	fa09 f303 	lsl.w	r3, r9, r3
 800a164:	4313      	orrs	r3, r2
 800a166:	9304      	str	r3, [sp, #16]
 800a168:	46a2      	mov	sl, r4
 800a16a:	e7d2      	b.n	800a112 <_vfiprintf_r+0xc6>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	1d19      	adds	r1, r3, #4
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	9103      	str	r1, [sp, #12]
 800a174:	2b00      	cmp	r3, #0
 800a176:	bfbb      	ittet	lt
 800a178:	425b      	neglt	r3, r3
 800a17a:	f042 0202 	orrlt.w	r2, r2, #2
 800a17e:	9307      	strge	r3, [sp, #28]
 800a180:	9307      	strlt	r3, [sp, #28]
 800a182:	bfb8      	it	lt
 800a184:	9204      	strlt	r2, [sp, #16]
 800a186:	7823      	ldrb	r3, [r4, #0]
 800a188:	2b2e      	cmp	r3, #46	@ 0x2e
 800a18a:	d10a      	bne.n	800a1a2 <_vfiprintf_r+0x156>
 800a18c:	7863      	ldrb	r3, [r4, #1]
 800a18e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a190:	d132      	bne.n	800a1f8 <_vfiprintf_r+0x1ac>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	1d1a      	adds	r2, r3, #4
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	9203      	str	r2, [sp, #12]
 800a19a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a19e:	3402      	adds	r4, #2
 800a1a0:	9305      	str	r3, [sp, #20]
 800a1a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a278 <_vfiprintf_r+0x22c>
 800a1a6:	7821      	ldrb	r1, [r4, #0]
 800a1a8:	2203      	movs	r2, #3
 800a1aa:	4650      	mov	r0, sl
 800a1ac:	f7f6 f820 	bl	80001f0 <memchr>
 800a1b0:	b138      	cbz	r0, 800a1c2 <_vfiprintf_r+0x176>
 800a1b2:	9b04      	ldr	r3, [sp, #16]
 800a1b4:	eba0 000a 	sub.w	r0, r0, sl
 800a1b8:	2240      	movs	r2, #64	@ 0x40
 800a1ba:	4082      	lsls	r2, r0
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	3401      	adds	r4, #1
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1c6:	4829      	ldr	r0, [pc, #164]	@ (800a26c <_vfiprintf_r+0x220>)
 800a1c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1cc:	2206      	movs	r2, #6
 800a1ce:	f7f6 f80f 	bl	80001f0 <memchr>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d03f      	beq.n	800a256 <_vfiprintf_r+0x20a>
 800a1d6:	4b26      	ldr	r3, [pc, #152]	@ (800a270 <_vfiprintf_r+0x224>)
 800a1d8:	bb1b      	cbnz	r3, 800a222 <_vfiprintf_r+0x1d6>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	3307      	adds	r3, #7
 800a1de:	f023 0307 	bic.w	r3, r3, #7
 800a1e2:	3308      	adds	r3, #8
 800a1e4:	9303      	str	r3, [sp, #12]
 800a1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e8:	443b      	add	r3, r7
 800a1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1ec:	e76a      	b.n	800a0c4 <_vfiprintf_r+0x78>
 800a1ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	e7a8      	b.n	800a14a <_vfiprintf_r+0xfe>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	3401      	adds	r4, #1
 800a1fc:	9305      	str	r3, [sp, #20]
 800a1fe:	4619      	mov	r1, r3
 800a200:	f04f 0c0a 	mov.w	ip, #10
 800a204:	4620      	mov	r0, r4
 800a206:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a20a:	3a30      	subs	r2, #48	@ 0x30
 800a20c:	2a09      	cmp	r2, #9
 800a20e:	d903      	bls.n	800a218 <_vfiprintf_r+0x1cc>
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0c6      	beq.n	800a1a2 <_vfiprintf_r+0x156>
 800a214:	9105      	str	r1, [sp, #20]
 800a216:	e7c4      	b.n	800a1a2 <_vfiprintf_r+0x156>
 800a218:	fb0c 2101 	mla	r1, ip, r1, r2
 800a21c:	4604      	mov	r4, r0
 800a21e:	2301      	movs	r3, #1
 800a220:	e7f0      	b.n	800a204 <_vfiprintf_r+0x1b8>
 800a222:	ab03      	add	r3, sp, #12
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	462a      	mov	r2, r5
 800a228:	4b12      	ldr	r3, [pc, #72]	@ (800a274 <_vfiprintf_r+0x228>)
 800a22a:	a904      	add	r1, sp, #16
 800a22c:	4630      	mov	r0, r6
 800a22e:	f7fb fe83 	bl	8005f38 <_printf_float>
 800a232:	4607      	mov	r7, r0
 800a234:	1c78      	adds	r0, r7, #1
 800a236:	d1d6      	bne.n	800a1e6 <_vfiprintf_r+0x19a>
 800a238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a23a:	07d9      	lsls	r1, r3, #31
 800a23c:	d405      	bmi.n	800a24a <_vfiprintf_r+0x1fe>
 800a23e:	89ab      	ldrh	r3, [r5, #12]
 800a240:	059a      	lsls	r2, r3, #22
 800a242:	d402      	bmi.n	800a24a <_vfiprintf_r+0x1fe>
 800a244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a246:	f7fd fc29 	bl	8007a9c <__retarget_lock_release_recursive>
 800a24a:	89ab      	ldrh	r3, [r5, #12]
 800a24c:	065b      	lsls	r3, r3, #25
 800a24e:	f53f af1f 	bmi.w	800a090 <_vfiprintf_r+0x44>
 800a252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a254:	e71e      	b.n	800a094 <_vfiprintf_r+0x48>
 800a256:	ab03      	add	r3, sp, #12
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	462a      	mov	r2, r5
 800a25c:	4b05      	ldr	r3, [pc, #20]	@ (800a274 <_vfiprintf_r+0x228>)
 800a25e:	a904      	add	r1, sp, #16
 800a260:	4630      	mov	r0, r6
 800a262:	f7fc f901 	bl	8006468 <_printf_i>
 800a266:	e7e4      	b.n	800a232 <_vfiprintf_r+0x1e6>
 800a268:	0800b016 	.word	0x0800b016
 800a26c:	0800b020 	.word	0x0800b020
 800a270:	08005f39 	.word	0x08005f39
 800a274:	0800a029 	.word	0x0800a029
 800a278:	0800b01c 	.word	0x0800b01c

0800a27c <__swbuf_r>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	460e      	mov	r6, r1
 800a280:	4614      	mov	r4, r2
 800a282:	4605      	mov	r5, r0
 800a284:	b118      	cbz	r0, 800a28e <__swbuf_r+0x12>
 800a286:	6a03      	ldr	r3, [r0, #32]
 800a288:	b90b      	cbnz	r3, 800a28e <__swbuf_r+0x12>
 800a28a:	f7fc fd01 	bl	8006c90 <__sinit>
 800a28e:	69a3      	ldr	r3, [r4, #24]
 800a290:	60a3      	str	r3, [r4, #8]
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	071a      	lsls	r2, r3, #28
 800a296:	d501      	bpl.n	800a29c <__swbuf_r+0x20>
 800a298:	6923      	ldr	r3, [r4, #16]
 800a29a:	b943      	cbnz	r3, 800a2ae <__swbuf_r+0x32>
 800a29c:	4621      	mov	r1, r4
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f000 f82a 	bl	800a2f8 <__swsetup_r>
 800a2a4:	b118      	cbz	r0, 800a2ae <__swbuf_r+0x32>
 800a2a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	6922      	ldr	r2, [r4, #16]
 800a2b2:	1a98      	subs	r0, r3, r2
 800a2b4:	6963      	ldr	r3, [r4, #20]
 800a2b6:	b2f6      	uxtb	r6, r6
 800a2b8:	4283      	cmp	r3, r0
 800a2ba:	4637      	mov	r7, r6
 800a2bc:	dc05      	bgt.n	800a2ca <__swbuf_r+0x4e>
 800a2be:	4621      	mov	r1, r4
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f7ff f829 	bl	8009318 <_fflush_r>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d1ed      	bne.n	800a2a6 <__swbuf_r+0x2a>
 800a2ca:	68a3      	ldr	r3, [r4, #8]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	60a3      	str	r3, [r4, #8]
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	6022      	str	r2, [r4, #0]
 800a2d6:	701e      	strb	r6, [r3, #0]
 800a2d8:	6962      	ldr	r2, [r4, #20]
 800a2da:	1c43      	adds	r3, r0, #1
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d004      	beq.n	800a2ea <__swbuf_r+0x6e>
 800a2e0:	89a3      	ldrh	r3, [r4, #12]
 800a2e2:	07db      	lsls	r3, r3, #31
 800a2e4:	d5e1      	bpl.n	800a2aa <__swbuf_r+0x2e>
 800a2e6:	2e0a      	cmp	r6, #10
 800a2e8:	d1df      	bne.n	800a2aa <__swbuf_r+0x2e>
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	f7ff f813 	bl	8009318 <_fflush_r>
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d0d9      	beq.n	800a2aa <__swbuf_r+0x2e>
 800a2f6:	e7d6      	b.n	800a2a6 <__swbuf_r+0x2a>

0800a2f8 <__swsetup_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4b29      	ldr	r3, [pc, #164]	@ (800a3a0 <__swsetup_r+0xa8>)
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	6818      	ldr	r0, [r3, #0]
 800a300:	460c      	mov	r4, r1
 800a302:	b118      	cbz	r0, 800a30c <__swsetup_r+0x14>
 800a304:	6a03      	ldr	r3, [r0, #32]
 800a306:	b90b      	cbnz	r3, 800a30c <__swsetup_r+0x14>
 800a308:	f7fc fcc2 	bl	8006c90 <__sinit>
 800a30c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a310:	0719      	lsls	r1, r3, #28
 800a312:	d422      	bmi.n	800a35a <__swsetup_r+0x62>
 800a314:	06da      	lsls	r2, r3, #27
 800a316:	d407      	bmi.n	800a328 <__swsetup_r+0x30>
 800a318:	2209      	movs	r2, #9
 800a31a:	602a      	str	r2, [r5, #0]
 800a31c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a320:	81a3      	strh	r3, [r4, #12]
 800a322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a326:	e033      	b.n	800a390 <__swsetup_r+0x98>
 800a328:	0758      	lsls	r0, r3, #29
 800a32a:	d512      	bpl.n	800a352 <__swsetup_r+0x5a>
 800a32c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a32e:	b141      	cbz	r1, 800a342 <__swsetup_r+0x4a>
 800a330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a334:	4299      	cmp	r1, r3
 800a336:	d002      	beq.n	800a33e <__swsetup_r+0x46>
 800a338:	4628      	mov	r0, r5
 800a33a:	f7ff fdf3 	bl	8009f24 <_free_r>
 800a33e:	2300      	movs	r3, #0
 800a340:	6363      	str	r3, [r4, #52]	@ 0x34
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a348:	81a3      	strh	r3, [r4, #12]
 800a34a:	2300      	movs	r3, #0
 800a34c:	6063      	str	r3, [r4, #4]
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	f043 0308 	orr.w	r3, r3, #8
 800a358:	81a3      	strh	r3, [r4, #12]
 800a35a:	6923      	ldr	r3, [r4, #16]
 800a35c:	b94b      	cbnz	r3, 800a372 <__swsetup_r+0x7a>
 800a35e:	89a3      	ldrh	r3, [r4, #12]
 800a360:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a368:	d003      	beq.n	800a372 <__swsetup_r+0x7a>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4628      	mov	r0, r5
 800a36e:	f000 f83f 	bl	800a3f0 <__smakebuf_r>
 800a372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a376:	f013 0201 	ands.w	r2, r3, #1
 800a37a:	d00a      	beq.n	800a392 <__swsetup_r+0x9a>
 800a37c:	2200      	movs	r2, #0
 800a37e:	60a2      	str	r2, [r4, #8]
 800a380:	6962      	ldr	r2, [r4, #20]
 800a382:	4252      	negs	r2, r2
 800a384:	61a2      	str	r2, [r4, #24]
 800a386:	6922      	ldr	r2, [r4, #16]
 800a388:	b942      	cbnz	r2, 800a39c <__swsetup_r+0xa4>
 800a38a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a38e:	d1c5      	bne.n	800a31c <__swsetup_r+0x24>
 800a390:	bd38      	pop	{r3, r4, r5, pc}
 800a392:	0799      	lsls	r1, r3, #30
 800a394:	bf58      	it	pl
 800a396:	6962      	ldrpl	r2, [r4, #20]
 800a398:	60a2      	str	r2, [r4, #8]
 800a39a:	e7f4      	b.n	800a386 <__swsetup_r+0x8e>
 800a39c:	2000      	movs	r0, #0
 800a39e:	e7f7      	b.n	800a390 <__swsetup_r+0x98>
 800a3a0:	2000018c 	.word	0x2000018c

0800a3a4 <__swhatbuf_r>:
 800a3a4:	b570      	push	{r4, r5, r6, lr}
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ac:	2900      	cmp	r1, #0
 800a3ae:	b096      	sub	sp, #88	@ 0x58
 800a3b0:	4615      	mov	r5, r2
 800a3b2:	461e      	mov	r6, r3
 800a3b4:	da0d      	bge.n	800a3d2 <__swhatbuf_r+0x2e>
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3bc:	f04f 0100 	mov.w	r1, #0
 800a3c0:	bf14      	ite	ne
 800a3c2:	2340      	movne	r3, #64	@ 0x40
 800a3c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	6031      	str	r1, [r6, #0]
 800a3cc:	602b      	str	r3, [r5, #0]
 800a3ce:	b016      	add	sp, #88	@ 0x58
 800a3d0:	bd70      	pop	{r4, r5, r6, pc}
 800a3d2:	466a      	mov	r2, sp
 800a3d4:	f000 f848 	bl	800a468 <_fstat_r>
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	dbec      	blt.n	800a3b6 <__swhatbuf_r+0x12>
 800a3dc:	9901      	ldr	r1, [sp, #4]
 800a3de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3e6:	4259      	negs	r1, r3
 800a3e8:	4159      	adcs	r1, r3
 800a3ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3ee:	e7eb      	b.n	800a3c8 <__swhatbuf_r+0x24>

0800a3f0 <__smakebuf_r>:
 800a3f0:	898b      	ldrh	r3, [r1, #12]
 800a3f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3f4:	079d      	lsls	r5, r3, #30
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	d507      	bpl.n	800a40c <__smakebuf_r+0x1c>
 800a3fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	6123      	str	r3, [r4, #16]
 800a404:	2301      	movs	r3, #1
 800a406:	6163      	str	r3, [r4, #20]
 800a408:	b003      	add	sp, #12
 800a40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a40c:	ab01      	add	r3, sp, #4
 800a40e:	466a      	mov	r2, sp
 800a410:	f7ff ffc8 	bl	800a3a4 <__swhatbuf_r>
 800a414:	9f00      	ldr	r7, [sp, #0]
 800a416:	4605      	mov	r5, r0
 800a418:	4639      	mov	r1, r7
 800a41a:	4630      	mov	r0, r6
 800a41c:	f7fe fe66 	bl	80090ec <_malloc_r>
 800a420:	b948      	cbnz	r0, 800a436 <__smakebuf_r+0x46>
 800a422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a426:	059a      	lsls	r2, r3, #22
 800a428:	d4ee      	bmi.n	800a408 <__smakebuf_r+0x18>
 800a42a:	f023 0303 	bic.w	r3, r3, #3
 800a42e:	f043 0302 	orr.w	r3, r3, #2
 800a432:	81a3      	strh	r3, [r4, #12]
 800a434:	e7e2      	b.n	800a3fc <__smakebuf_r+0xc>
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	6020      	str	r0, [r4, #0]
 800a43a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a43e:	81a3      	strh	r3, [r4, #12]
 800a440:	9b01      	ldr	r3, [sp, #4]
 800a442:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a446:	b15b      	cbz	r3, 800a460 <__smakebuf_r+0x70>
 800a448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a44c:	4630      	mov	r0, r6
 800a44e:	f000 f81d 	bl	800a48c <_isatty_r>
 800a452:	b128      	cbz	r0, 800a460 <__smakebuf_r+0x70>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	f023 0303 	bic.w	r3, r3, #3
 800a45a:	f043 0301 	orr.w	r3, r3, #1
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	431d      	orrs	r5, r3
 800a464:	81a5      	strh	r5, [r4, #12]
 800a466:	e7cf      	b.n	800a408 <__smakebuf_r+0x18>

0800a468 <_fstat_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d07      	ldr	r5, [pc, #28]	@ (800a488 <_fstat_r+0x20>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	4611      	mov	r1, r2
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	f7f7 fc99 	bl	8001dac <_fstat>
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	d102      	bne.n	800a484 <_fstat_r+0x1c>
 800a47e:	682b      	ldr	r3, [r5, #0]
 800a480:	b103      	cbz	r3, 800a484 <_fstat_r+0x1c>
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	bd38      	pop	{r3, r4, r5, pc}
 800a486:	bf00      	nop
 800a488:	20000448 	.word	0x20000448

0800a48c <_isatty_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d06      	ldr	r5, [pc, #24]	@ (800a4a8 <_isatty_r+0x1c>)
 800a490:	2300      	movs	r3, #0
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	f7f7 fc98 	bl	8001dcc <_isatty>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_isatty_r+0x1a>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_isatty_r+0x1a>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	20000448 	.word	0x20000448

0800a4ac <_raise_r>:
 800a4ac:	291f      	cmp	r1, #31
 800a4ae:	b538      	push	{r3, r4, r5, lr}
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	d904      	bls.n	800a4c0 <_raise_r+0x14>
 800a4b6:	2316      	movs	r3, #22
 800a4b8:	6003      	str	r3, [r0, #0]
 800a4ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a4c2:	b112      	cbz	r2, 800a4ca <_raise_r+0x1e>
 800a4c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4c8:	b94b      	cbnz	r3, 800a4de <_raise_r+0x32>
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f000 f830 	bl	800a530 <_getpid_r>
 800a4d0:	4622      	mov	r2, r4
 800a4d2:	4601      	mov	r1, r0
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4da:	f000 b817 	b.w	800a50c <_kill_r>
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d00a      	beq.n	800a4f8 <_raise_r+0x4c>
 800a4e2:	1c59      	adds	r1, r3, #1
 800a4e4:	d103      	bne.n	800a4ee <_raise_r+0x42>
 800a4e6:	2316      	movs	r3, #22
 800a4e8:	6003      	str	r3, [r0, #0]
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	e7e7      	b.n	800a4be <_raise_r+0x12>
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	4798      	blx	r3
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e7e0      	b.n	800a4be <_raise_r+0x12>

0800a4fc <raise>:
 800a4fc:	4b02      	ldr	r3, [pc, #8]	@ (800a508 <raise+0xc>)
 800a4fe:	4601      	mov	r1, r0
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	f7ff bfd3 	b.w	800a4ac <_raise_r>
 800a506:	bf00      	nop
 800a508:	2000018c 	.word	0x2000018c

0800a50c <_kill_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d07      	ldr	r5, [pc, #28]	@ (800a52c <_kill_r+0x20>)
 800a510:	2300      	movs	r3, #0
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	4611      	mov	r1, r2
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	f7f7 fbe7 	bl	8001cec <_kill>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	d102      	bne.n	800a528 <_kill_r+0x1c>
 800a522:	682b      	ldr	r3, [r5, #0]
 800a524:	b103      	cbz	r3, 800a528 <_kill_r+0x1c>
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	bd38      	pop	{r3, r4, r5, pc}
 800a52a:	bf00      	nop
 800a52c:	20000448 	.word	0x20000448

0800a530 <_getpid_r>:
 800a530:	f7f7 bbd4 	b.w	8001cdc <_getpid>

0800a534 <powf>:
 800a534:	b508      	push	{r3, lr}
 800a536:	ed2d 8b04 	vpush	{d8-d9}
 800a53a:	eeb0 8a60 	vmov.f32	s16, s1
 800a53e:	eeb0 9a40 	vmov.f32	s18, s0
 800a542:	f000 f859 	bl	800a5f8 <__ieee754_powf>
 800a546:	eeb4 8a48 	vcmp.f32	s16, s16
 800a54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a54e:	eef0 8a40 	vmov.f32	s17, s0
 800a552:	d63e      	bvs.n	800a5d2 <powf+0x9e>
 800a554:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55c:	d112      	bne.n	800a584 <powf+0x50>
 800a55e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a566:	d039      	beq.n	800a5dc <powf+0xa8>
 800a568:	eeb0 0a48 	vmov.f32	s0, s16
 800a56c:	f000 f839 	bl	800a5e2 <finitef>
 800a570:	b378      	cbz	r0, 800a5d2 <powf+0x9e>
 800a572:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a57a:	d52a      	bpl.n	800a5d2 <powf+0x9e>
 800a57c:	f7fd fa62 	bl	8007a44 <__errno>
 800a580:	2322      	movs	r3, #34	@ 0x22
 800a582:	e014      	b.n	800a5ae <powf+0x7a>
 800a584:	f000 f82d 	bl	800a5e2 <finitef>
 800a588:	b998      	cbnz	r0, 800a5b2 <powf+0x7e>
 800a58a:	eeb0 0a49 	vmov.f32	s0, s18
 800a58e:	f000 f828 	bl	800a5e2 <finitef>
 800a592:	b170      	cbz	r0, 800a5b2 <powf+0x7e>
 800a594:	eeb0 0a48 	vmov.f32	s0, s16
 800a598:	f000 f823 	bl	800a5e2 <finitef>
 800a59c:	b148      	cbz	r0, 800a5b2 <powf+0x7e>
 800a59e:	eef4 8a68 	vcmp.f32	s17, s17
 800a5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a6:	d7e9      	bvc.n	800a57c <powf+0x48>
 800a5a8:	f7fd fa4c 	bl	8007a44 <__errno>
 800a5ac:	2321      	movs	r3, #33	@ 0x21
 800a5ae:	6003      	str	r3, [r0, #0]
 800a5b0:	e00f      	b.n	800a5d2 <powf+0x9e>
 800a5b2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ba:	d10a      	bne.n	800a5d2 <powf+0x9e>
 800a5bc:	eeb0 0a49 	vmov.f32	s0, s18
 800a5c0:	f000 f80f 	bl	800a5e2 <finitef>
 800a5c4:	b128      	cbz	r0, 800a5d2 <powf+0x9e>
 800a5c6:	eeb0 0a48 	vmov.f32	s0, s16
 800a5ca:	f000 f80a 	bl	800a5e2 <finitef>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d1d4      	bne.n	800a57c <powf+0x48>
 800a5d2:	eeb0 0a68 	vmov.f32	s0, s17
 800a5d6:	ecbd 8b04 	vpop	{d8-d9}
 800a5da:	bd08      	pop	{r3, pc}
 800a5dc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a5e0:	e7f7      	b.n	800a5d2 <powf+0x9e>

0800a5e2 <finitef>:
 800a5e2:	ee10 3a10 	vmov	r3, s0
 800a5e6:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800a5ea:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800a5ee:	bfac      	ite	ge
 800a5f0:	2000      	movge	r0, #0
 800a5f2:	2001      	movlt	r0, #1
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <__ieee754_powf>:
 800a5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5fc:	ee10 4a90 	vmov	r4, s1
 800a600:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800a604:	ed2d 8b02 	vpush	{d8}
 800a608:	ee10 6a10 	vmov	r6, s0
 800a60c:	eeb0 8a40 	vmov.f32	s16, s0
 800a610:	eef0 8a60 	vmov.f32	s17, s1
 800a614:	d10c      	bne.n	800a630 <__ieee754_powf+0x38>
 800a616:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800a61a:	0076      	lsls	r6, r6, #1
 800a61c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800a620:	f240 829c 	bls.w	800ab5c <__ieee754_powf+0x564>
 800a624:	ee38 0a28 	vadd.f32	s0, s16, s17
 800a628:	ecbd 8b02 	vpop	{d8}
 800a62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a630:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800a634:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800a638:	d802      	bhi.n	800a640 <__ieee754_powf+0x48>
 800a63a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a63e:	d908      	bls.n	800a652 <__ieee754_powf+0x5a>
 800a640:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800a644:	d1ee      	bne.n	800a624 <__ieee754_powf+0x2c>
 800a646:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800a64a:	0064      	lsls	r4, r4, #1
 800a64c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800a650:	e7e6      	b.n	800a620 <__ieee754_powf+0x28>
 800a652:	2e00      	cmp	r6, #0
 800a654:	da1e      	bge.n	800a694 <__ieee754_powf+0x9c>
 800a656:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800a65a:	d22b      	bcs.n	800a6b4 <__ieee754_powf+0xbc>
 800a65c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800a660:	d332      	bcc.n	800a6c8 <__ieee754_powf+0xd0>
 800a662:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800a666:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800a66a:	fa49 f503 	asr.w	r5, r9, r3
 800a66e:	fa05 f303 	lsl.w	r3, r5, r3
 800a672:	454b      	cmp	r3, r9
 800a674:	d126      	bne.n	800a6c4 <__ieee754_powf+0xcc>
 800a676:	f005 0501 	and.w	r5, r5, #1
 800a67a:	f1c5 0502 	rsb	r5, r5, #2
 800a67e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800a682:	d122      	bne.n	800a6ca <__ieee754_powf+0xd2>
 800a684:	2c00      	cmp	r4, #0
 800a686:	f280 826f 	bge.w	800ab68 <__ieee754_powf+0x570>
 800a68a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a68e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a692:	e7c9      	b.n	800a628 <__ieee754_powf+0x30>
 800a694:	2500      	movs	r5, #0
 800a696:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a69a:	d1f0      	bne.n	800a67e <__ieee754_powf+0x86>
 800a69c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800a6a0:	f000 825c 	beq.w	800ab5c <__ieee754_powf+0x564>
 800a6a4:	d908      	bls.n	800a6b8 <__ieee754_powf+0xc0>
 800a6a6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800aa08 <__ieee754_powf+0x410>
 800a6aa:	2c00      	cmp	r4, #0
 800a6ac:	bfa8      	it	ge
 800a6ae:	eeb0 0a68 	vmovge.f32	s0, s17
 800a6b2:	e7b9      	b.n	800a628 <__ieee754_powf+0x30>
 800a6b4:	2502      	movs	r5, #2
 800a6b6:	e7ee      	b.n	800a696 <__ieee754_powf+0x9e>
 800a6b8:	2c00      	cmp	r4, #0
 800a6ba:	f280 8252 	bge.w	800ab62 <__ieee754_powf+0x56a>
 800a6be:	eeb1 0a68 	vneg.f32	s0, s17
 800a6c2:	e7b1      	b.n	800a628 <__ieee754_powf+0x30>
 800a6c4:	2500      	movs	r5, #0
 800a6c6:	e7da      	b.n	800a67e <__ieee754_powf+0x86>
 800a6c8:	2500      	movs	r5, #0
 800a6ca:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800a6ce:	d102      	bne.n	800a6d6 <__ieee754_powf+0xde>
 800a6d0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a6d4:	e7a8      	b.n	800a628 <__ieee754_powf+0x30>
 800a6d6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a6da:	d109      	bne.n	800a6f0 <__ieee754_powf+0xf8>
 800a6dc:	2e00      	cmp	r6, #0
 800a6de:	db07      	blt.n	800a6f0 <__ieee754_powf+0xf8>
 800a6e0:	eeb0 0a48 	vmov.f32	s0, s16
 800a6e4:	ecbd 8b02 	vpop	{d8}
 800a6e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6ec:	f000 bae7 	b.w	800acbe <__ieee754_sqrtf>
 800a6f0:	eeb0 0a48 	vmov.f32	s0, s16
 800a6f4:	f000 fadc 	bl	800acb0 <fabsf>
 800a6f8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a6fc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a700:	4647      	mov	r7, r8
 800a702:	d002      	beq.n	800a70a <__ieee754_powf+0x112>
 800a704:	f1b8 0f00 	cmp.w	r8, #0
 800a708:	d117      	bne.n	800a73a <__ieee754_powf+0x142>
 800a70a:	2c00      	cmp	r4, #0
 800a70c:	bfbc      	itt	lt
 800a70e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800a712:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a716:	2e00      	cmp	r6, #0
 800a718:	da86      	bge.n	800a628 <__ieee754_powf+0x30>
 800a71a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a71e:	ea58 0805 	orrs.w	r8, r8, r5
 800a722:	d104      	bne.n	800a72e <__ieee754_powf+0x136>
 800a724:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a728:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a72c:	e77c      	b.n	800a628 <__ieee754_powf+0x30>
 800a72e:	2d01      	cmp	r5, #1
 800a730:	f47f af7a 	bne.w	800a628 <__ieee754_powf+0x30>
 800a734:	eeb1 0a40 	vneg.f32	s0, s0
 800a738:	e776      	b.n	800a628 <__ieee754_powf+0x30>
 800a73a:	0ff0      	lsrs	r0, r6, #31
 800a73c:	3801      	subs	r0, #1
 800a73e:	ea55 0300 	orrs.w	r3, r5, r0
 800a742:	d104      	bne.n	800a74e <__ieee754_powf+0x156>
 800a744:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a748:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a74c:	e76c      	b.n	800a628 <__ieee754_powf+0x30>
 800a74e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800a752:	d973      	bls.n	800a83c <__ieee754_powf+0x244>
 800a754:	4bad      	ldr	r3, [pc, #692]	@ (800aa0c <__ieee754_powf+0x414>)
 800a756:	4598      	cmp	r8, r3
 800a758:	d808      	bhi.n	800a76c <__ieee754_powf+0x174>
 800a75a:	2c00      	cmp	r4, #0
 800a75c:	da0b      	bge.n	800a776 <__ieee754_powf+0x17e>
 800a75e:	2000      	movs	r0, #0
 800a760:	ecbd 8b02 	vpop	{d8}
 800a764:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a768:	f000 ba36 	b.w	800abd8 <__math_oflowf>
 800a76c:	4ba8      	ldr	r3, [pc, #672]	@ (800aa10 <__ieee754_powf+0x418>)
 800a76e:	4598      	cmp	r8, r3
 800a770:	d908      	bls.n	800a784 <__ieee754_powf+0x18c>
 800a772:	2c00      	cmp	r4, #0
 800a774:	dcf3      	bgt.n	800a75e <__ieee754_powf+0x166>
 800a776:	2000      	movs	r0, #0
 800a778:	ecbd 8b02 	vpop	{d8}
 800a77c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a780:	f000 ba24 	b.w	800abcc <__math_uflowf>
 800a784:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a788:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a78c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800aa14 <__ieee754_powf+0x41c>
 800a790:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800a794:	eee0 6a67 	vfms.f32	s13, s0, s15
 800a798:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a79c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800a7a0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a7a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7a8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800aa18 <__ieee754_powf+0x420>
 800a7ac:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800a7b0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800aa1c <__ieee754_powf+0x424>
 800a7b4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a7b8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800aa20 <__ieee754_powf+0x428>
 800a7bc:	eef0 6a67 	vmov.f32	s13, s15
 800a7c0:	eee0 6a07 	vfma.f32	s13, s0, s14
 800a7c4:	ee16 3a90 	vmov	r3, s13
 800a7c8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a7cc:	f023 030f 	bic.w	r3, r3, #15
 800a7d0:	ee06 3a90 	vmov	s13, r3
 800a7d4:	eee0 6a47 	vfms.f32	s13, s0, s14
 800a7d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a7dc:	3d01      	subs	r5, #1
 800a7de:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800a7e2:	4305      	orrs	r5, r0
 800a7e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7e8:	f024 040f 	bic.w	r4, r4, #15
 800a7ec:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800a7f0:	bf18      	it	ne
 800a7f2:	eeb0 8a47 	vmovne.f32	s16, s14
 800a7f6:	ee07 4a10 	vmov	s14, r4
 800a7fa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a7fe:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a802:	ee07 3a90 	vmov	s15, r3
 800a806:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a80a:	ee07 4a10 	vmov	s14, r4
 800a80e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a812:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a816:	ee17 1a10 	vmov	r1, s14
 800a81a:	2900      	cmp	r1, #0
 800a81c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a820:	f340 80dd 	ble.w	800a9de <__ieee754_powf+0x3e6>
 800a824:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800a828:	f240 80ca 	bls.w	800a9c0 <__ieee754_powf+0x3c8>
 800a82c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a834:	bf4c      	ite	mi
 800a836:	2001      	movmi	r0, #1
 800a838:	2000      	movpl	r0, #0
 800a83a:	e791      	b.n	800a760 <__ieee754_powf+0x168>
 800a83c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800a840:	bf01      	itttt	eq
 800a842:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800aa24 <__ieee754_powf+0x42c>
 800a846:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800a84a:	f06f 0317 	mvneq.w	r3, #23
 800a84e:	ee17 7a90 	vmoveq	r7, s15
 800a852:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800a856:	bf18      	it	ne
 800a858:	2300      	movne	r3, #0
 800a85a:	3a7f      	subs	r2, #127	@ 0x7f
 800a85c:	441a      	add	r2, r3
 800a85e:	4b72      	ldr	r3, [pc, #456]	@ (800aa28 <__ieee754_powf+0x430>)
 800a860:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800a864:	429f      	cmp	r7, r3
 800a866:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800a86a:	dd06      	ble.n	800a87a <__ieee754_powf+0x282>
 800a86c:	4b6f      	ldr	r3, [pc, #444]	@ (800aa2c <__ieee754_powf+0x434>)
 800a86e:	429f      	cmp	r7, r3
 800a870:	f340 80a4 	ble.w	800a9bc <__ieee754_powf+0x3c4>
 800a874:	3201      	adds	r2, #1
 800a876:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800a87a:	2600      	movs	r6, #0
 800a87c:	4b6c      	ldr	r3, [pc, #432]	@ (800aa30 <__ieee754_powf+0x438>)
 800a87e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a882:	ee07 1a10 	vmov	s14, r1
 800a886:	edd3 5a00 	vldr	s11, [r3]
 800a88a:	4b6a      	ldr	r3, [pc, #424]	@ (800aa34 <__ieee754_powf+0x43c>)
 800a88c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800a890:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a894:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800a898:	1049      	asrs	r1, r1, #1
 800a89a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800a89e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800a8a2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800a8a6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800a8aa:	ee07 1a90 	vmov	s15, r1
 800a8ae:	ee26 5a24 	vmul.f32	s10, s12, s9
 800a8b2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800a8b6:	ee15 7a10 	vmov	r7, s10
 800a8ba:	401f      	ands	r7, r3
 800a8bc:	ee06 7a90 	vmov	s13, r7
 800a8c0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800a8c4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a8c8:	ee65 7a05 	vmul.f32	s15, s10, s10
 800a8cc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a8d0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800aa38 <__ieee754_powf+0x440>
 800a8d4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800aa3c <__ieee754_powf+0x444>
 800a8d8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a8dc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800aa40 <__ieee754_powf+0x448>
 800a8e0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a8e4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800aa14 <__ieee754_powf+0x41c>
 800a8e8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a8ec:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800aa44 <__ieee754_powf+0x44c>
 800a8f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a8f4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800aa48 <__ieee754_powf+0x450>
 800a8f8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a8fc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a900:	ee35 7a26 	vadd.f32	s14, s10, s13
 800a904:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800a908:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a90c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800a910:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800a914:	eef0 5a67 	vmov.f32	s11, s15
 800a918:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800a91c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800a920:	ee15 1a90 	vmov	r1, s11
 800a924:	4019      	ands	r1, r3
 800a926:	ee05 1a90 	vmov	s11, r1
 800a92a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a92e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800a932:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a936:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a93a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a93e:	eeb0 6a67 	vmov.f32	s12, s15
 800a942:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800a946:	ee16 1a10 	vmov	r1, s12
 800a94a:	4019      	ands	r1, r3
 800a94c:	ee06 1a10 	vmov	s12, r1
 800a950:	eeb0 7a46 	vmov.f32	s14, s12
 800a954:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800a958:	493c      	ldr	r1, [pc, #240]	@ (800aa4c <__ieee754_powf+0x454>)
 800a95a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800a95e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a962:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800aa50 <__ieee754_powf+0x458>
 800a966:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800aa54 <__ieee754_powf+0x45c>
 800a96a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a96e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800aa58 <__ieee754_powf+0x460>
 800a972:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a976:	ed91 7a00 	vldr	s14, [r1]
 800a97a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a97e:	ee07 2a10 	vmov	s14, r2
 800a982:	eef0 6a67 	vmov.f32	s13, s15
 800a986:	4a35      	ldr	r2, [pc, #212]	@ (800aa5c <__ieee754_powf+0x464>)
 800a988:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a98c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800a990:	ed92 5a00 	vldr	s10, [r2]
 800a994:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a998:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a99c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a9a0:	ee16 2a90 	vmov	r2, s13
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	ee06 3a90 	vmov	s13, r3
 800a9aa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a9ae:	ee37 7a45 	vsub.f32	s14, s14, s10
 800a9b2:	eea6 7a65 	vfms.f32	s14, s12, s11
 800a9b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a9ba:	e70f      	b.n	800a7dc <__ieee754_powf+0x1e4>
 800a9bc:	2601      	movs	r6, #1
 800a9be:	e75d      	b.n	800a87c <__ieee754_powf+0x284>
 800a9c0:	d152      	bne.n	800aa68 <__ieee754_powf+0x470>
 800a9c2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800aa60 <__ieee754_powf+0x468>
 800a9c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9ca:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a9ce:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d6:	f73f af29 	bgt.w	800a82c <__ieee754_powf+0x234>
 800a9da:	2386      	movs	r3, #134	@ 0x86
 800a9dc:	e048      	b.n	800aa70 <__ieee754_powf+0x478>
 800a9de:	4a21      	ldr	r2, [pc, #132]	@ (800aa64 <__ieee754_powf+0x46c>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d907      	bls.n	800a9f4 <__ieee754_powf+0x3fc>
 800a9e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ec:	bf4c      	ite	mi
 800a9ee:	2001      	movmi	r0, #1
 800a9f0:	2000      	movpl	r0, #0
 800a9f2:	e6c1      	b.n	800a778 <__ieee754_powf+0x180>
 800a9f4:	d138      	bne.n	800aa68 <__ieee754_powf+0x470>
 800a9f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9fa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800a9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa02:	dbea      	blt.n	800a9da <__ieee754_powf+0x3e2>
 800aa04:	e7ee      	b.n	800a9e4 <__ieee754_powf+0x3ec>
 800aa06:	bf00      	nop
 800aa08:	00000000 	.word	0x00000000
 800aa0c:	3f7ffff3 	.word	0x3f7ffff3
 800aa10:	3f800007 	.word	0x3f800007
 800aa14:	3eaaaaab 	.word	0x3eaaaaab
 800aa18:	3fb8aa3b 	.word	0x3fb8aa3b
 800aa1c:	36eca570 	.word	0x36eca570
 800aa20:	3fb8aa00 	.word	0x3fb8aa00
 800aa24:	4b800000 	.word	0x4b800000
 800aa28:	001cc471 	.word	0x001cc471
 800aa2c:	005db3d6 	.word	0x005db3d6
 800aa30:	0800b1cc 	.word	0x0800b1cc
 800aa34:	fffff000 	.word	0xfffff000
 800aa38:	3e6c3255 	.word	0x3e6c3255
 800aa3c:	3e53f142 	.word	0x3e53f142
 800aa40:	3e8ba305 	.word	0x3e8ba305
 800aa44:	3edb6db7 	.word	0x3edb6db7
 800aa48:	3f19999a 	.word	0x3f19999a
 800aa4c:	0800b1bc 	.word	0x0800b1bc
 800aa50:	3f76384f 	.word	0x3f76384f
 800aa54:	3f763800 	.word	0x3f763800
 800aa58:	369dc3a0 	.word	0x369dc3a0
 800aa5c:	0800b1c4 	.word	0x0800b1c4
 800aa60:	3338aa3c 	.word	0x3338aa3c
 800aa64:	43160000 	.word	0x43160000
 800aa68:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800aa6c:	d971      	bls.n	800ab52 <__ieee754_powf+0x55a>
 800aa6e:	15db      	asrs	r3, r3, #23
 800aa70:	3b7e      	subs	r3, #126	@ 0x7e
 800aa72:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800aa76:	4118      	asrs	r0, r3
 800aa78:	4408      	add	r0, r1
 800aa7a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800aa7e:	4a3c      	ldr	r2, [pc, #240]	@ (800ab70 <__ieee754_powf+0x578>)
 800aa80:	3b7f      	subs	r3, #127	@ 0x7f
 800aa82:	411a      	asrs	r2, r3
 800aa84:	4002      	ands	r2, r0
 800aa86:	ee07 2a10 	vmov	s14, r2
 800aa8a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800aa8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800aa92:	f1c3 0317 	rsb	r3, r3, #23
 800aa96:	4118      	asrs	r0, r3
 800aa98:	2900      	cmp	r1, #0
 800aa9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa9e:	bfb8      	it	lt
 800aaa0:	4240      	neglt	r0, r0
 800aaa2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800aaa6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800ab74 <__ieee754_powf+0x57c>
 800aaaa:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800ab78 <__ieee754_powf+0x580>
 800aaae:	ee17 3a10 	vmov	r3, s14
 800aab2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800aab6:	f023 030f 	bic.w	r3, r3, #15
 800aaba:	ee07 3a10 	vmov	s14, r3
 800aabe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aac2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800aac6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800aaca:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800ab7c <__ieee754_powf+0x584>
 800aace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad2:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800aad6:	eef0 6a67 	vmov.f32	s13, s15
 800aada:	eee7 6a06 	vfma.f32	s13, s14, s12
 800aade:	eef0 5a66 	vmov.f32	s11, s13
 800aae2:	eee7 5a46 	vfms.f32	s11, s14, s12
 800aae6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800aaea:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800aaee:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800ab80 <__ieee754_powf+0x588>
 800aaf2:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800ab84 <__ieee754_powf+0x58c>
 800aaf6:	eea7 6a25 	vfma.f32	s12, s14, s11
 800aafa:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800ab88 <__ieee754_powf+0x590>
 800aafe:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ab02:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800ab8c <__ieee754_powf+0x594>
 800ab06:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ab0a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800ab90 <__ieee754_powf+0x598>
 800ab0e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ab12:	eeb0 6a66 	vmov.f32	s12, s13
 800ab16:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800ab1a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800ab1e:	ee66 5a86 	vmul.f32	s11, s13, s12
 800ab22:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ab26:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800ab2a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800ab2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ab36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ab3a:	ee10 3a10 	vmov	r3, s0
 800ab3e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ab42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ab46:	da06      	bge.n	800ab56 <__ieee754_powf+0x55e>
 800ab48:	f000 f84c 	bl	800abe4 <scalbnf>
 800ab4c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ab50:	e56a      	b.n	800a628 <__ieee754_powf+0x30>
 800ab52:	2000      	movs	r0, #0
 800ab54:	e7a5      	b.n	800aaa2 <__ieee754_powf+0x4aa>
 800ab56:	ee00 3a10 	vmov	s0, r3
 800ab5a:	e7f7      	b.n	800ab4c <__ieee754_powf+0x554>
 800ab5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ab60:	e562      	b.n	800a628 <__ieee754_powf+0x30>
 800ab62:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800ab94 <__ieee754_powf+0x59c>
 800ab66:	e55f      	b.n	800a628 <__ieee754_powf+0x30>
 800ab68:	eeb0 0a48 	vmov.f32	s0, s16
 800ab6c:	e55c      	b.n	800a628 <__ieee754_powf+0x30>
 800ab6e:	bf00      	nop
 800ab70:	ff800000 	.word	0xff800000
 800ab74:	3f317218 	.word	0x3f317218
 800ab78:	3f317200 	.word	0x3f317200
 800ab7c:	35bfbe8c 	.word	0x35bfbe8c
 800ab80:	b5ddea0e 	.word	0xb5ddea0e
 800ab84:	3331bb4c 	.word	0x3331bb4c
 800ab88:	388ab355 	.word	0x388ab355
 800ab8c:	bb360b61 	.word	0xbb360b61
 800ab90:	3e2aaaab 	.word	0x3e2aaaab
 800ab94:	00000000 	.word	0x00000000

0800ab98 <with_errnof>:
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	ed2d 8b02 	vpush	{d8}
 800ab9e:	eeb0 8a40 	vmov.f32	s16, s0
 800aba2:	4604      	mov	r4, r0
 800aba4:	f7fc ff4e 	bl	8007a44 <__errno>
 800aba8:	eeb0 0a48 	vmov.f32	s0, s16
 800abac:	ecbd 8b02 	vpop	{d8}
 800abb0:	6004      	str	r4, [r0, #0]
 800abb2:	bd10      	pop	{r4, pc}

0800abb4 <xflowf>:
 800abb4:	b130      	cbz	r0, 800abc4 <xflowf+0x10>
 800abb6:	eef1 7a40 	vneg.f32	s15, s0
 800abba:	ee27 0a80 	vmul.f32	s0, s15, s0
 800abbe:	2022      	movs	r0, #34	@ 0x22
 800abc0:	f7ff bfea 	b.w	800ab98 <with_errnof>
 800abc4:	eef0 7a40 	vmov.f32	s15, s0
 800abc8:	e7f7      	b.n	800abba <xflowf+0x6>
	...

0800abcc <__math_uflowf>:
 800abcc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800abd4 <__math_uflowf+0x8>
 800abd0:	f7ff bff0 	b.w	800abb4 <xflowf>
 800abd4:	10000000 	.word	0x10000000

0800abd8 <__math_oflowf>:
 800abd8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800abe0 <__math_oflowf+0x8>
 800abdc:	f7ff bfea 	b.w	800abb4 <xflowf>
 800abe0:	70000000 	.word	0x70000000

0800abe4 <scalbnf>:
 800abe4:	ee10 3a10 	vmov	r3, s0
 800abe8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800abec:	d02b      	beq.n	800ac46 <scalbnf+0x62>
 800abee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800abf2:	d302      	bcc.n	800abfa <scalbnf+0x16>
 800abf4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800abf8:	4770      	bx	lr
 800abfa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800abfe:	d123      	bne.n	800ac48 <scalbnf+0x64>
 800ac00:	4b24      	ldr	r3, [pc, #144]	@ (800ac94 <scalbnf+0xb0>)
 800ac02:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ac98 <scalbnf+0xb4>
 800ac06:	4298      	cmp	r0, r3
 800ac08:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ac0c:	db17      	blt.n	800ac3e <scalbnf+0x5a>
 800ac0e:	ee10 3a10 	vmov	r3, s0
 800ac12:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ac16:	3a19      	subs	r2, #25
 800ac18:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ac1c:	4288      	cmp	r0, r1
 800ac1e:	dd15      	ble.n	800ac4c <scalbnf+0x68>
 800ac20:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ac9c <scalbnf+0xb8>
 800ac24:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800aca0 <scalbnf+0xbc>
 800ac28:	ee10 3a10 	vmov	r3, s0
 800ac2c:	eeb0 7a67 	vmov.f32	s14, s15
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	bfb8      	it	lt
 800ac34:	eef0 7a66 	vmovlt.f32	s15, s13
 800ac38:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ac3c:	4770      	bx	lr
 800ac3e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800aca4 <scalbnf+0xc0>
 800ac42:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ac46:	4770      	bx	lr
 800ac48:	0dd2      	lsrs	r2, r2, #23
 800ac4a:	e7e5      	b.n	800ac18 <scalbnf+0x34>
 800ac4c:	4410      	add	r0, r2
 800ac4e:	28fe      	cmp	r0, #254	@ 0xfe
 800ac50:	dce6      	bgt.n	800ac20 <scalbnf+0x3c>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	dd06      	ble.n	800ac64 <scalbnf+0x80>
 800ac56:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ac5a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ac5e:	ee00 3a10 	vmov	s0, r3
 800ac62:	4770      	bx	lr
 800ac64:	f110 0f16 	cmn.w	r0, #22
 800ac68:	da09      	bge.n	800ac7e <scalbnf+0x9a>
 800ac6a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800aca4 <scalbnf+0xc0>
 800ac6e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800aca8 <scalbnf+0xc4>
 800ac72:	ee10 3a10 	vmov	r3, s0
 800ac76:	eeb0 7a67 	vmov.f32	s14, s15
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	e7d9      	b.n	800ac32 <scalbnf+0x4e>
 800ac7e:	3019      	adds	r0, #25
 800ac80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ac84:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ac88:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800acac <scalbnf+0xc8>
 800ac8c:	ee07 3a90 	vmov	s15, r3
 800ac90:	e7d7      	b.n	800ac42 <scalbnf+0x5e>
 800ac92:	bf00      	nop
 800ac94:	ffff3cb0 	.word	0xffff3cb0
 800ac98:	4c000000 	.word	0x4c000000
 800ac9c:	7149f2ca 	.word	0x7149f2ca
 800aca0:	f149f2ca 	.word	0xf149f2ca
 800aca4:	0da24260 	.word	0x0da24260
 800aca8:	8da24260 	.word	0x8da24260
 800acac:	33000000 	.word	0x33000000

0800acb0 <fabsf>:
 800acb0:	ee10 3a10 	vmov	r3, s0
 800acb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800acb8:	ee00 3a10 	vmov	s0, r3
 800acbc:	4770      	bx	lr

0800acbe <__ieee754_sqrtf>:
 800acbe:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800acc2:	4770      	bx	lr

0800acc4 <_init>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	bf00      	nop
 800acc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acca:	bc08      	pop	{r3}
 800accc:	469e      	mov	lr, r3
 800acce:	4770      	bx	lr

0800acd0 <_fini>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	bf00      	nop
 800acd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd6:	bc08      	pop	{r3}
 800acd8:	469e      	mov	lr, r3
 800acda:	4770      	bx	lr
